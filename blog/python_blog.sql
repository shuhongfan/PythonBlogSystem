/*
 Navicat Premium Data Transfer

 Source Server         : localhost_3306
 Source Server Type    : MySQL
 Source Server Version : 50736
 Source Host           : localhost:3306
 Source Schema         : python_blog

 Target Server Type    : MySQL
 Target Server Version : 50736
 File Encoding         : 65001

 Date: 23/12/2021 16:26:08
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for auth_group
-- ----------------------------
DROP TABLE IF EXISTS `auth_group`;
CREATE TABLE `auth_group`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(150) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `name`(`name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of auth_group
-- ----------------------------

-- ----------------------------
-- Table structure for auth_group_permissions
-- ----------------------------
DROP TABLE IF EXISTS `auth_group_permissions`;
CREATE TABLE `auth_group_permissions`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `auth_group_permissions_group_id_permission_id_0cd325b0_uniq`(`group_id`, `permission_id`) USING BTREE,
  INDEX `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm`(`permission_id`) USING BTREE,
  CONSTRAINT `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `auth_group_permissions_group_id_b120cbf9_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of auth_group_permissions
-- ----------------------------

-- ----------------------------
-- Table structure for auth_permission
-- ----------------------------
DROP TABLE IF EXISTS `auth_permission`;
CREATE TABLE `auth_permission`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `auth_permission_content_type_id_codename_01ab375a_uniq`(`content_type_id`, `codename`) USING BTREE,
  CONSTRAINT `auth_permission_content_type_id_2f476e4b_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 41 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of auth_permission
-- ----------------------------
INSERT INTO `auth_permission` VALUES (1, 'Can add log entry', 1, 'add_logentry');
INSERT INTO `auth_permission` VALUES (2, 'Can change log entry', 1, 'change_logentry');
INSERT INTO `auth_permission` VALUES (3, 'Can delete log entry', 1, 'delete_logentry');
INSERT INTO `auth_permission` VALUES (4, 'Can view log entry', 1, 'view_logentry');
INSERT INTO `auth_permission` VALUES (5, 'Can add permission', 2, 'add_permission');
INSERT INTO `auth_permission` VALUES (6, 'Can change permission', 2, 'change_permission');
INSERT INTO `auth_permission` VALUES (7, 'Can delete permission', 2, 'delete_permission');
INSERT INTO `auth_permission` VALUES (8, 'Can view permission', 2, 'view_permission');
INSERT INTO `auth_permission` VALUES (9, 'Can add group', 3, 'add_group');
INSERT INTO `auth_permission` VALUES (10, 'Can change group', 3, 'change_group');
INSERT INTO `auth_permission` VALUES (11, 'Can delete group', 3, 'delete_group');
INSERT INTO `auth_permission` VALUES (12, 'Can view group', 3, 'view_group');
INSERT INTO `auth_permission` VALUES (13, 'Can add content type', 4, 'add_contenttype');
INSERT INTO `auth_permission` VALUES (14, 'Can change content type', 4, 'change_contenttype');
INSERT INTO `auth_permission` VALUES (15, 'Can delete content type', 4, 'delete_contenttype');
INSERT INTO `auth_permission` VALUES (16, 'Can view content type', 4, 'view_contenttype');
INSERT INTO `auth_permission` VALUES (17, 'Can add session', 5, 'add_session');
INSERT INTO `auth_permission` VALUES (18, 'Can change session', 5, 'change_session');
INSERT INTO `auth_permission` VALUES (19, 'Can delete session', 5, 'delete_session');
INSERT INTO `auth_permission` VALUES (20, 'Can view session', 5, 'view_session');
INSERT INTO `auth_permission` VALUES (21, 'Can add 用户管理', 6, 'add_user');
INSERT INTO `auth_permission` VALUES (22, 'Can change 用户管理', 6, 'change_user');
INSERT INTO `auth_permission` VALUES (23, 'Can delete 用户管理', 6, 'delete_user');
INSERT INTO `auth_permission` VALUES (24, 'Can view 用户管理', 6, 'view_user');
INSERT INTO `auth_permission` VALUES (25, 'Can add (\'类别管理\',)', 7, 'add_articcategory');
INSERT INTO `auth_permission` VALUES (26, 'Can change (\'类别管理\',)', 7, 'change_articcategory');
INSERT INTO `auth_permission` VALUES (27, 'Can delete (\'类别管理\',)', 7, 'delete_articcategory');
INSERT INTO `auth_permission` VALUES (28, 'Can view (\'类别管理\',)', 7, 'view_articcategory');
INSERT INTO `auth_permission` VALUES (29, 'Can add (\'类别管理\',)', 7, 'add_articlecategory');
INSERT INTO `auth_permission` VALUES (30, 'Can change (\'类别管理\',)', 7, 'change_articlecategory');
INSERT INTO `auth_permission` VALUES (31, 'Can delete (\'类别管理\',)', 7, 'delete_articlecategory');
INSERT INTO `auth_permission` VALUES (32, 'Can view (\'类别管理\',)', 7, 'view_articlecategory');
INSERT INTO `auth_permission` VALUES (33, 'Can add 文章管理', 8, 'add_article');
INSERT INTO `auth_permission` VALUES (34, 'Can change 文章管理', 8, 'change_article');
INSERT INTO `auth_permission` VALUES (35, 'Can delete 文章管理', 8, 'delete_article');
INSERT INTO `auth_permission` VALUES (36, 'Can view 文章管理', 8, 'view_article');
INSERT INTO `auth_permission` VALUES (37, 'Can add 评论管理', 9, 'add_comment');
INSERT INTO `auth_permission` VALUES (38, 'Can change 评论管理', 9, 'change_comment');
INSERT INTO `auth_permission` VALUES (39, 'Can delete 评论管理', 9, 'delete_comment');
INSERT INTO `auth_permission` VALUES (40, 'Can view 评论管理', 9, 'view_comment');

-- ----------------------------
-- Table structure for django_admin_log
-- ----------------------------
DROP TABLE IF EXISTS `django_admin_log`;
CREATE TABLE `django_admin_log`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_time` datetime(6) NOT NULL,
  `object_id` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `object_repr` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `action_flag` smallint(5) UNSIGNED NOT NULL,
  `change_message` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `content_type_id` int(11) NULL DEFAULT NULL,
  `user_id` bigint(20) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `django_admin_log_content_type_id_c4bce8eb_fk_django_co`(`content_type_id`) USING BTREE,
  INDEX `django_admin_log_user_id_c564eba6_fk_tb_users_id`(`user_id`) USING BTREE,
  CONSTRAINT `django_admin_log_content_type_id_c4bce8eb_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `django_admin_log_user_id_c564eba6_fk_tb_users_id` FOREIGN KEY (`user_id`) REFERENCES `tb_users` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 14 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of django_admin_log
-- ----------------------------
INSERT INTO `django_admin_log` VALUES (1, '2021-12-13 04:45:58.787472', '1', 'Python', 1, '[{\"added\": {}}]', 7, 8);
INSERT INTO `django_admin_log` VALUES (2, '2021-12-13 04:46:02.773868', '2', 'Java', 1, '[{\"added\": {}}]', 7, 8);
INSERT INTO `django_admin_log` VALUES (3, '2021-12-13 04:46:06.177341', '3', 'HTML', 1, '[{\"added\": {}}]', 7, 8);
INSERT INTO `django_admin_log` VALUES (4, '2021-12-13 04:46:10.984685', '4', '测试', 1, '[{\"added\": {}}]', 7, 8);
INSERT INTO `django_admin_log` VALUES (5, '2021-12-13 04:46:14.484474', '5', 'PHP', 1, '[{\"added\": {}}]', 7, 8);
INSERT INTO `django_admin_log` VALUES (6, '2021-12-13 04:46:17.978759', '6', 'GO', 1, '[{\"added\": {}}]', 7, 8);
INSERT INTO `django_admin_log` VALUES (7, '2021-12-13 04:46:22.535670', '7', '运维', 1, '[{\"added\": {}}]', 7, 8);
INSERT INTO `django_admin_log` VALUES (8, '2021-12-13 13:24:46.923691', '1', 'Python', 2, '[{\"changed\": {\"fields\": [\"Title\"]}}]', 7, 8);
INSERT INTO `django_admin_log` VALUES (9, '2021-12-14 01:24:31.615953', '4', '测试', 3, '', 7, 8);
INSERT INTO `django_admin_log` VALUES (10, '2021-12-14 01:24:42.471903', '2', 'CSS', 2, '[{\"changed\": {\"fields\": [\"Title\"]}}]', 7, 8);
INSERT INTO `django_admin_log` VALUES (11, '2021-12-14 01:26:07.343172', '2', 'CSS', 3, '', 7, 8);
INSERT INTO `django_admin_log` VALUES (12, '2021-12-14 01:26:28.983309', '5', 'VUE', 2, '[{\"changed\": {\"fields\": [\"Title\"]}}]', 7, 8);
INSERT INTO `django_admin_log` VALUES (13, '2021-12-14 01:26:44.917229', '3', 'C', 2, '[{\"changed\": {\"fields\": [\"Title\"]}}]', 7, 8);

-- ----------------------------
-- Table structure for django_content_type
-- ----------------------------
DROP TABLE IF EXISTS `django_content_type`;
CREATE TABLE `django_content_type`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app_label` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `model` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `django_content_type_app_label_model_76bd3d3b_uniq`(`app_label`, `model`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of django_content_type
-- ----------------------------
INSERT INTO `django_content_type` VALUES (1, 'admin', 'logentry');
INSERT INTO `django_content_type` VALUES (3, 'auth', 'group');
INSERT INTO `django_content_type` VALUES (2, 'auth', 'permission');
INSERT INTO `django_content_type` VALUES (4, 'contenttypes', 'contenttype');
INSERT INTO `django_content_type` VALUES (8, 'home', 'article');
INSERT INTO `django_content_type` VALUES (7, 'home', 'articlecategory');
INSERT INTO `django_content_type` VALUES (9, 'home', 'comment');
INSERT INTO `django_content_type` VALUES (5, 'sessions', 'session');
INSERT INTO `django_content_type` VALUES (6, 'users', 'user');

-- ----------------------------
-- Table structure for django_migrations
-- ----------------------------
DROP TABLE IF EXISTS `django_migrations`;
CREATE TABLE `django_migrations`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `app` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `applied` datetime(6) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 24 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of django_migrations
-- ----------------------------
INSERT INTO `django_migrations` VALUES (1, 'contenttypes', '0001_initial', '2021-12-12 07:44:09.911464');
INSERT INTO `django_migrations` VALUES (2, 'contenttypes', '0002_remove_content_type_name', '2021-12-12 07:44:10.164014');
INSERT INTO `django_migrations` VALUES (3, 'auth', '0001_initial', '2021-12-12 07:44:10.719026');
INSERT INTO `django_migrations` VALUES (4, 'auth', '0002_alter_permission_name_max_length', '2021-12-12 07:44:10.827069');
INSERT INTO `django_migrations` VALUES (5, 'auth', '0003_alter_user_email_max_length', '2021-12-12 07:44:10.838060');
INSERT INTO `django_migrations` VALUES (6, 'auth', '0004_alter_user_username_opts', '2021-12-12 07:44:10.849075');
INSERT INTO `django_migrations` VALUES (7, 'auth', '0005_alter_user_last_login_null', '2021-12-12 07:44:10.861053');
INSERT INTO `django_migrations` VALUES (8, 'auth', '0006_require_contenttypes_0002', '2021-12-12 07:44:10.865071');
INSERT INTO `django_migrations` VALUES (9, 'auth', '0007_alter_validators_add_error_messages', '2021-12-12 07:44:10.877076');
INSERT INTO `django_migrations` VALUES (10, 'auth', '0008_alter_user_username_max_length', '2021-12-12 07:44:10.888075');
INSERT INTO `django_migrations` VALUES (11, 'auth', '0009_alter_user_last_name_max_length', '2021-12-12 07:44:10.899071');
INSERT INTO `django_migrations` VALUES (12, 'auth', '0010_alter_group_name_max_length', '2021-12-12 07:44:11.000072');
INSERT INTO `django_migrations` VALUES (13, 'auth', '0011_update_proxy_permissions', '2021-12-12 07:44:11.012071');
INSERT INTO `django_migrations` VALUES (14, 'auth', '0012_alter_user_first_name_max_length', '2021-12-12 07:44:11.031065');
INSERT INTO `django_migrations` VALUES (15, 'users', '0001_initial', '2021-12-12 07:44:11.944212');
INSERT INTO `django_migrations` VALUES (16, 'admin', '0001_initial', '2021-12-12 07:44:12.259203');
INSERT INTO `django_migrations` VALUES (17, 'admin', '0002_logentry_remove_auto_add', '2021-12-12 07:44:12.275209');
INSERT INTO `django_migrations` VALUES (18, 'admin', '0003_logentry_add_action_flag_choices', '2021-12-12 07:44:12.290202');
INSERT INTO `django_migrations` VALUES (19, 'sessions', '0001_initial', '2021-12-12 07:44:12.381229');
INSERT INTO `django_migrations` VALUES (23, 'home', '0001_initial', '2021-12-13 11:44:05.816109');

-- ----------------------------
-- Table structure for django_session
-- ----------------------------
DROP TABLE IF EXISTS `django_session`;
CREATE TABLE `django_session`  (
  `session_key` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `session_data` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `expire_date` datetime(6) NOT NULL,
  PRIMARY KEY (`session_key`) USING BTREE,
  INDEX `django_session_expire_date_a5c62663`(`expire_date`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of django_session
-- ----------------------------

-- ----------------------------
-- Table structure for tb_article
-- ----------------------------
DROP TABLE IF EXISTS `tb_article`;
CREATE TABLE `tb_article`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `avatar` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `tags` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `sumary` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `total_views` int(10) UNSIGNED NOT NULL,
  `comments_count` int(10) UNSIGNED NOT NULL,
  `created` datetime(6) NOT NULL,
  `updated` datetime(6) NOT NULL,
  `author_id` bigint(20) NOT NULL,
  `category_id` bigint(20) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `tb_article_category_id_d66932e8_fk_tb_category_id`(`category_id`) USING BTREE,
  INDEX `tb_article_author_id_dcf763a4_fk_tb_users_id`(`author_id`) USING BTREE,
  CONSTRAINT `tb_article_author_id_dcf763a4_fk_tb_users_id` FOREIGN KEY (`author_id`) REFERENCES `tb_users` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `tb_article_category_id_d66932e8_fk_tb_category_id` FOREIGN KEY (`category_id`) REFERENCES `tb_category` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 105 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tb_article
-- ----------------------------
INSERT INTO `tb_article` VALUES (2, 'article/20211213/HF.png', 'SHF', 'SHF', 'SHF', '<p>SHF</p>\n', 2, 1, '2021-12-13 07:19:30.116354', '2021-12-13 11:54:11.952622', 8, 1);
INSERT INTO `tb_article` VALUES (21, 'article/20211213/SHF_PkA3jEK.png', 'Python （计算机编程语言）', 'Python （计算机编程语言）', 'Python 20年来首次将其置于Java、C和JavaScript之上', '<p>Python由<a href=\"https://baike.baidu.com/item/%E8%8D%B7%E5%85%B0/190469\" target=\"_blank\">荷兰</a><a href=\"https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6/107037\" target=\"_blank\">数学</a>和<a href=\"https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/9132\" target=\"_blank\">计算机科学</a>研究学会的<a href=\"https://baike.baidu.com/item/Guido%20van%20Rossum/3225314\" target=\"_blank\">Guido van Rossum</a>&nbsp;于1990 年代初设计，作为一门叫做<a href=\"https://baike.baidu.com/item/ABC%E8%AF%AD%E8%A8%80/334996\" target=\"_blank\">ABC语言</a>的替代品。<sup>&nbsp;[1]</sup><a name=\"ref_[1]_21087\">&nbsp;</a>&nbsp;Python提供了高效的高级<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1450\" target=\"_blank\">数据结构</a>，还能简单有效地<a href=\"https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2262089\" target=\"_blank\">面向对象</a>编程。Python语法和动态类型，以及<a href=\"https://baike.baidu.com/item/%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80/8888952\" target=\"_blank\">解释型语言</a>的本质，使它成为多数平台上写<a href=\"https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC/1697005\" target=\"_blank\">脚本</a>和快速开发应用的编程语言，<sup>&nbsp;[2]</sup><a name=\"ref_[2]_21087\">&nbsp;</a>&nbsp;随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、<a href=\"https://baike.baidu.com/item/%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE/3986637\" target=\"_blank\">大型项目</a>的开发。<sup>&nbsp;[3]</sup><a name=\"ref_[3]_21087\">&nbsp;</a></p>\r\n\r\n<p>Python<a href=\"https://baike.baidu.com/item/%E8%A7%A3%E9%87%8A%E5%99%A8/10418965\" target=\"_blank\">解释器</a>易于扩展，可以使用<a href=\"https://baike.baidu.com/item/C/7252092\" target=\"_blank\">C</a>或<a href=\"https://baike.baidu.com/item/C%2B%2B/99272\" target=\"_blank\">C++</a>（或者其他可以通过C调用的语言）扩展新的功能和<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/10997964\" target=\"_blank\">数据类型</a>。<sup>&nbsp;[4]</sup><a name=\"ref_[4]_21087\">&nbsp;</a>&nbsp;Python 也可用于可定制化软件中的扩展程序语言。Python丰富的标准库，提供了适用于各个主要系统平台的<a href=\"https://baike.baidu.com/item/%E6%BA%90%E7%A0%81/344212\" target=\"_blank\">源码</a>或<a href=\"https://baike.baidu.com/item/%E6%9C%BA%E5%99%A8%E7%A0%81/86125\" target=\"_blank\">机器码</a>。<sup>&nbsp;[4]</sup><a name=\"ref_[4]_21087\">&nbsp;</a></p>\r\n\r\n<p>2021年10月，语言流行指数的编译器Tiobe将Python加冕为最受欢迎的编程语言，20年来首次将其置于Java、C和JavaScript之上。<sup>&nbsp;[16]</sup><a name=\"ref_[16]_21087\">&nbsp;</a></p>\r\n', 29, 3, '2021-12-13 11:55:16.077787', '2021-12-21 08:56:41.478247', 8, 1);
INSERT INTO `tb_article` VALUES (22, 'article/20211214/python.jpg', 'Python 基础教程', 'Python 基础教程', 'Python 基础教程', '<p>Python 是一种解释型、面向对象、动态数据类型的高级程序设计语言。</p>\r\n\r\n<p>Python 由 Guido van Rossum 于 1989 年底发明，第一个公开发行版发行于 1991 年。</p>\r\n\r\n<p>像 Perl 语言一样, Python 源代码同样遵循 GPL(GNU General Public License) 协议。</p>\r\n\r\n<p><strong>官方宣布，2020 年 1 月 1 日， 停止 Python 2 的更新。</strong></p>\r\n\r\n<p><strong>Python 2.7 被确定为最后一个 Python 2.x 版本。</strong></p>\r\n', 6, 2, '2021-12-14 01:02:39.921626', '2021-12-14 02:56:50.641155', 5, 1);
INSERT INTO `tb_article` VALUES (23, 'article/20211214/python_fw798b9.jpg', 'Python 简介', 'Python 简介', 'Python 简介', '<p>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</p>\r\n\r\n<p>Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Python 是一种解释型语言：</strong>&nbsp;这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Python 是交互式语言：</strong>&nbsp;这意味着，您可以在一个 Python 提示符&nbsp;&gt;&gt;&gt;&nbsp;后直接执行代码。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Python 是面向对象语言:</strong>&nbsp;这意味着Python支持面向对象的风格或代码封装在对象的编程技术。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Python 是初学者的语言：</strong>Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。</p>\r\n	</li>\r\n</ul>\r\n', 0, 0, '2021-12-14 01:14:04.874768', '2021-12-14 01:14:04.874768', 5, 1);
INSERT INTO `tb_article` VALUES (24, 'article/20211214/python_kNbLibz.jpg', 'Python 发展历史', 'Python 发展历史', 'Python 发展历史', '<p>Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。</p>\r\n\r\n<p>Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。</p>\r\n\r\n<p>像 Perl 语言一样，Python 源代码同样遵循 GPL(GNU General Public License)协议。</p>\r\n\r\n<p>现在 Python 是由一个核心开发团队在维护，Guido van Rossum 仍然占据着至关重要的作用，指导其进展。</p>\r\n\r\n<p>Python 2.7 被确定为最后一个 Python 2.x 版本，它除了支持 Python 2.x 语法外，还支持部分 Python 3.1 语法。</p>\r\n', 0, 0, '2021-12-14 01:14:53.082455', '2021-12-14 01:14:53.090480', 5, 1);
INSERT INTO `tb_article` VALUES (25, 'article/20211214/python_747HMX1.jpg', 'Python 特点', 'Python 特点', 'Python 特点', '<h2>Python 特点</h2>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>1.易于学习：</strong>Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>2.易于阅读：</strong>Python代码定义的更清晰。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>3.易于维护：</strong>Python的成功在于它的源代码是相当容易维护的。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>4.一个广泛的标准库：</strong>Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>5.互动模式：</strong>互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>6.可移植：</strong>基于其开放源代码的特性，Python已经被移植（也就是使其工作）到许多平台。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>7.可扩展：</strong>如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>8.数据库：</strong>Python提供所有主要的商业数据库的接口。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>9.GUI编程：</strong>Python支持GUI可以创建和移植到许多系统调用。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>10.可嵌入:&nbsp;</strong>你可以将Python嵌入到C/C++程序，让你的程序的用户获得&quot;脚本化&quot;的能力。</p>\r\n	</li>\r\n</ul>\r\n', 2, 0, '2021-12-14 01:15:19.948395', '2021-12-14 01:17:36.824029', 5, 1);
INSERT INTO `tb_article` VALUES (26, 'article/20211214/python_BPIrqBn.jpg', 'Python 环境搭建', 'Python 环境搭建', 'Python 环境搭建', '<p>本章节我们将向大家介绍如何在本地搭建Python开发环境。</p>\r\n\r\n<p>Python可应用于多平台包括 Linux 和 Mac OS X。</p>\r\n\r\n<p>你可以通过终端窗口输入 &quot;python&quot; 命令来查看本地是否已经安装Python以及Python的安装版本。</p>\r\n\r\n<ul>\r\n	<li>Unix (Solaris, Linux, FreeBSD, AIX, HP/UX, SunOS, IRIX, 等等。)</li>\r\n	<li>Win 9x/NT/2000</li>\r\n	<li>Macintosh (Intel, PPC, 68K)</li>\r\n	<li>OS/2</li>\r\n	<li>DOS (多个DOS版本)</li>\r\n	<li>PalmOS</li>\r\n	<li>Nokia 移动手机</li>\r\n	<li>Windows CE</li>\r\n	<li>Acorn/RISC OS</li>\r\n	<li>BeOS</li>\r\n	<li>Amiga</li>\r\n	<li>VMS/OpenVMS</li>\r\n	<li>QNX</li>\r\n	<li>VxWorks</li>\r\n	<li>Psion</li>\r\n	<li>Python 同样可以移植到 Java 和 .NET 虚拟机上\r\n	<h2>Python下载</h2>\r\n\r\n	<p>Python最新源码，二进制文档，新闻资讯等可以在Python的官网查看到：</p>\r\n\r\n	<p>Python官网：<a href=\"https://www.python.org/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://www.python.org/</a></p>\r\n\r\n	<p>你可以在以下链接中下载 Python 的文档，你可以下载 HTML、PDF 和 PostScript 等格式的文档。</p>\r\n\r\n	<p>Python文档下载地址：<a href=\"https://www.python.org/doc/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://www.python.org/doc/</a></p>\r\n\r\n	<h2>Python安装</h2>\r\n\r\n	<p>Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。</p>\r\n\r\n	<p>您需要下载适用于您使用平台的二进制代码，然后安装Python。</p>\r\n\r\n	<p>如果您平台的二进制代码是不可用的，你需要使用C编译器手动编译源代码。</p>\r\n\r\n	<p>编译的源代码，功能上有更多的选择性， 为python安装提供了更多的灵活性。</p>\r\n\r\n	<p>以下是各个平台安装包的下载地址：</p>\r\n\r\n	<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/DC24DD0C-08A2-4D61-8C6F-4CA1EEB23535.jpg\" /></p>\r\n\r\n	<p>以下为不同平台上安装 Python 的方法：</p>\r\n\r\n	<h3>Unix &amp; Linux 平台安装 Python:</h3>\r\n\r\n	<p>以下为在 Unix &amp; Linux 平台上安装 Python 的简单步骤：</p>\r\n	</li>\r\n	<li>打开 WEB 浏览器访问<a href=\"https://www.python.org/downloads/source/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://www.python.org/downloads/source/</a></li>\r\n	<li>选择适用 于Unix/Linux 的源码压缩包。</li>\r\n	<li>下载及解压压缩包。</li>\r\n	<li>如果你需要自定义一些选项修改<em>Modules/Setup</em></li>\r\n	<li><strong>执行</strong>&nbsp;./configure 脚本</li>\r\n	<li>make</li>\r\n	<li>make install</li>\r\n	<li>\r\n	<p>执行以上操作后，Python 会安装在 /usr/local/bin 目录中，Python 库安装在 /usr/local/lib/pythonXX，XX 为你使用的 Python 的版本号。</p>\r\n\r\n	<h3>Window 平台安装 Python:</h3>\r\n\r\n	<p>以下为在 Window 平台上安装 Python 的简单步骤：</p>\r\n	</li>\r\n	<li>\r\n	<p>打开 WEB 浏览器访问<a href=\"https://www.python.org/downloads/windows/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://www.python.org/downloads/windows/</a></p>\r\n\r\n	<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/721E917D-CCA5-4F37-8FD6-486315EC8CF8.png\" /></p>\r\n	</li>\r\n	<li>在下载列表中选择Window平台安装包，包格式为：<em>python-XYZ.msi</em>&nbsp;文件 ， XYZ 为你要安装的版本号。</li>\r\n	<li>\r\n	<p>要使用安装程序&nbsp;<em>python-XYZ.msi</em>, Windows 系统必须支持 Microsoft Installer 2.0 搭配使用。只要保存安装文件到本地计算机，然后运行它，看看你的机器支持 MSI。Windows XP 和更高版本已经有 MSI，很多老机器也可以安装 MSI。</p>\r\n\r\n	<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/20180711-160607.png\" /></p>\r\n	</li>\r\n	<li>\r\n	<p>下载后，双击下载包，进入 Python 安装向导，安装非常简单，你只需要使用默认的设置一直点击&quot;下一步&quot;直到安装完成即可。</p>\r\n	</li>\r\n	<li>\r\n	<h3>MAC 平台安装 Python:</h3>\r\n\r\n	<p>MAC 系统一般都自带有 Python2.x版本 的环境，你也可以在链接&nbsp;<a href=\"https://www.python.org/downloads/mac-osx/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://www.python.org/downloads/mac-osx/</a>&nbsp;上下载最新版安装。</p>\r\n	&nbsp;\r\n\r\n	<hr />\r\n	<h2>环境变量配置</h2>\r\n\r\n	<p>程序和可执行文件可以在许多目录，而这些路径很可能不在操作系统提供可执行文件的搜索路径中。</p>\r\n\r\n	<p>path(路径)存储在环境变量中，这是由操作系统维护的一个命名的字符串。这些变量包含可用的命令行解释器和其他程序的信息。</p>\r\n\r\n	<p>Unix或Windows中路径变量为PATH（UNIX区分大小写，Windows不区分大小写）。</p>\r\n\r\n	<p>在Mac OS中，安装程序过程中改变了python的安装路径。如果你需要在其他目录引用Python，你必须在path中添加Python目录。</p>\r\n\r\n	<h3>在 Unix/Linux 设置环境变量</h3>\r\n	</li>\r\n	<li><strong>在 csh shell:</strong>&nbsp;输入\r\n	<pre>\r\nsetenv PATH &quot;$PATH:/usr/local/bin/python&quot;</pre>\r\n	, 按下&nbsp;Enter。</li>\r\n	<li><strong>在 bash shell (Linux):</strong>&nbsp;输入\r\n	<pre>\r\nexport PATH=&quot;$PATH:/usr/local/bin/python&quot; </pre>\r\n	，按下&nbsp;Enter。</li>\r\n	<li><strong>在 sh 或者 ksh shell:</strong>&nbsp;输入\r\n	<pre>\r\nPATH=&quot;$PATH:/usr/local/bin/python&quot; </pre>\r\n	, 按下&nbsp;Enter。</li>\r\n	<li>\r\n	<p><strong>注意:&nbsp;</strong>/usr/local/bin/python 是 Python 的安装目录。</p>\r\n\r\n	<h3>在 Windows 设置环境变量</h3>\r\n\r\n	<p>在环境变量中添加Python目录：</p>\r\n\r\n	<p><strong>在命令提示框中(cmd) :</strong>&nbsp;输入</p>\r\n\r\n	<pre>\r\npath=%path%;C:\\Python </pre>\r\n\r\n	<p>按下&nbsp;Enter。</p>\r\n\r\n	<p><strong>注意:&nbsp;</strong>C:\\Python 是Python的安装目录。</p>\r\n\r\n	<p>也可以通过以下方式设置：</p>\r\n	</li>\r\n	<li>右键点击&quot;计算机&quot;，然后点击&quot;属性&quot;</li>\r\n	<li>然后点击&quot;高级系统设置&quot;</li>\r\n	<li>选择&quot;系统变量&quot;窗口下面的&quot;Path&quot;,双击即可！</li>\r\n	<li>&nbsp;</li>\r\n	<li>然后在&quot;Path&quot;行，添加python安装路径即可(我的D:\\Python32)，所以在后面，添加该路径即可。&nbsp;<strong>ps：记住，路径直接用分号&quot;；&quot;隔开！</strong></li>\r\n	<li>最后设置成功以后，在cmd命令行，输入命令&quot;python&quot;，就可以有相关显示。</li>\r\n	<li>\r\n	<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/201209201707594792.png\" /></p>\r\n\r\n	<hr />\r\n	<h2>Python 环境变量</h2>\r\n\r\n	<p>下面几个重要的环境变量，它应用于Python：</p>\r\n\r\n	<table>\r\n		<tbody>\r\n			<tr>\r\n				<th>变量名</th>\r\n				<th>描述</th>\r\n			</tr>\r\n			<tr>\r\n				<td>PYTHONPATH</td>\r\n				<td>PYTHONPATH是Python搜索路径，默认我们import的模块都会从PYTHONPATH里面寻找。</td>\r\n			</tr>\r\n			<tr>\r\n				<td>PYTHONSTARTUP</td>\r\n				<td>Python启动后，先寻找PYTHONSTARTUP环境变量，然后执行此变量指定的文件中的代码。</td>\r\n			</tr>\r\n			<tr>\r\n				<td>PYTHONCASEOK</td>\r\n				<td>加入PYTHONCASEOK的环境变量, 就会使python导入模块的时候不区分大小写.</td>\r\n			</tr>\r\n			<tr>\r\n				<td>PYTHONHOME</td>\r\n				<td>另一种模块搜索路径。它通常内嵌于的PYTHONSTARTUP或PYTHONPATH目录中，使得两个模块库更容易切换。</td>\r\n			</tr>\r\n		</tbody>\r\n	</table>\r\n	&nbsp;\r\n\r\n	<hr />\r\n	<h2>运行Python</h2>\r\n\r\n	<p>有三种方式可以运行Python：</p>\r\n\r\n	<h3>1、交互式解释器：</h3>\r\n\r\n	<p>你可以通过命令行窗口进入 Python，并在交互式解释器中开始编写 Python 代码。</p>\r\n\r\n	<p>你可以在 Unix、DOS 或任何其他提供了命令行或者 shell 的系统进行 Python 编码工作。</p>\r\n\r\n	<p>$ python # Unix/Linux<br />\r\n	<br />\r\n	或者<br />\r\n	<br />\r\n	C:&gt;python # Windows/DOS</p>\r\n\r\n	<p>以下为Python命令行参数：</p>\r\n\r\n	<table>\r\n		<tbody>\r\n			<tr>\r\n				<th>选项</th>\r\n				<th>描述</th>\r\n			</tr>\r\n			<tr>\r\n				<td>-d</td>\r\n				<td>在解析时显示调试信息</td>\r\n			</tr>\r\n			<tr>\r\n				<td>-O</td>\r\n				<td>生成优化代码 ( .pyo 文件 )</td>\r\n			</tr>\r\n			<tr>\r\n				<td>-S</td>\r\n				<td>启动时不引入查找Python路径的位置</td>\r\n			</tr>\r\n			<tr>\r\n				<td>-V</td>\r\n				<td>输出Python版本号</td>\r\n			</tr>\r\n			<tr>\r\n				<td>-X</td>\r\n				<td>从 1.6版本之后基于内建的异常（仅仅用于字符串）已过时。</td>\r\n			</tr>\r\n			<tr>\r\n				<td>-c cmd</td>\r\n				<td>执行 Python 脚本，并将运行结果作为 cmd 字符串。</td>\r\n			</tr>\r\n			<tr>\r\n				<td>file</td>\r\n				<td>在给定的python文件执行python脚本。</td>\r\n			</tr>\r\n		</tbody>\r\n	</table>\r\n\r\n	<h3>2、命令行脚本</h3>\r\n\r\n	<p>在你的应用程序中通过引入解释器可以在命令行中执行Python脚本，如下所示：</p>\r\n\r\n	<p>$ python script.py # Unix/Linux<br />\r\n	<br />\r\n	或者<br />\r\n	<br />\r\n	C:&gt;python script.py # Windows/DOS</p>\r\n\r\n	<p><strong>注意：</strong>在执行脚本时，请检查脚本是否有可执行权限。</p>\r\n\r\n	<h3>3、集成开发环境（IDE：Integrated Development Environment）: PyCharm</h3>\r\n\r\n	<p>PyCharm 是由 JetBrains 打造的一款 Python IDE，支持 macOS、 Windows、 Linux 系统。</p>\r\n\r\n	<p>PyCharm 功能 : 调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制&hellip;&hellip;</p>\r\n\r\n	<p>PyCharm 下载地址 :&nbsp;<a href=\"https://www.jetbrains.com/pycharm/download/\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.jetbrains.com/pycharm/download/</a></p>\r\n\r\n	<p>PyCharm 安装地址：<a href=\"https://www.runoob.com/w3cnote/pycharm-windows-install.html\" rel=\"noopener noreferrer\" target=\"_blank\">http://www.runoob.com/w3cnote/pycharm-windows-install.html</a></p>\r\n\r\n	<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/execute-python-hello-world-program.png\" /></p>\r\n\r\n	<p>安装 PyCharm 中文插件，打开菜单栏 File，选择 Settings，然后选 Plugins，点 Marketplace，搜索 chinese，然后点击 install 安装：</p>\r\n\r\n	<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/aHR0cDovL3d3dy54aW1vcWluZy5jbi9kYXRhL3VwbG9hZHMvMjAyMDA0MjIvNTY1ODA1NTIyNDhhYTIwNmQzZThiMTQzNDVlZjc2NjEuanBn.jpeg\" /></p>\r\n\r\n	<p>在接下来的学习中请确保您的环境已搭建成功。</p>\r\n\r\n	<p>在以后的章节中给出的例子已在 Python2.7.6 版本测试通过。</p>\r\n	</li>\r\n</ul>\r\n', 1, 0, '2021-12-14 01:17:23.253003', '2021-12-14 01:17:25.040961', 5, 1);
INSERT INTO `tb_article` VALUES (27, 'article/20211214/python_56hpo30.jpg', 'Python 中文编码', 'Python 中文编码', 'Python 中文编码', '<h1>Python 中文编码</h1>\r\n\r\n<p>前面章节中我们已经学会了如何用 Python 输出&nbsp;<strong>&quot;Hello, World!&quot;</strong>，英文没有问题，但是如果你输出中文字符&nbsp;<strong>&quot;你好，世界&quot;</strong>&nbsp;就有可能会碰到中文编码问题。</p>\r\n\r\n<p>Python 文件中如果未指定编码，在执行过程会出现报错：</p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\nprint (&quot;你好，世界&quot;)</pre>\r\n\r\n<p>以上程序执行输出结果为：</p>\r\n\r\n<pre>\r\n  File &quot;test.py&quot;, line 2\r\nSyntaxError: Non-ASCII character &#39;\\xe4&#39; in file test.py on line 2, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details</pre>\r\n\r\n<p>Python中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。</p>\r\n\r\n<p>解决方法为只要在文件开头加入&nbsp;# -*- coding: UTF-8 -*-&nbsp;或者&nbsp;# coding=utf-8&nbsp;就行了</p>\r\n\r\n<blockquote>\r\n<p><strong>注意：</strong># coding=utf-8&nbsp;的&nbsp;=&nbsp;号两边不要空格。</p>\r\n</blockquote>\r\n\r\n<h2>实例(Python 2.0+)</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- print( &quot;你好，世界&quot; )</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/showpy.php?filename=helloworld_cn&amp;language=py\" rel=\"noopener noreferrer\" target=\"_blank\">运行实例 &raquo;</a></p>\r\n\r\n<p>输出结果为：</p>\r\n\r\n<pre>\r\n你好，世界</pre>\r\n\r\n<p>所以如果大家在学习过程中，代码中包含中文，就需要在头部指定编码。</p>\r\n\r\n<blockquote>\r\n<p><strong>注意：</strong>Python3.X 源码文件默认使用utf-8编码，所以可以正常解析中文，无需指定 UTF-8 编码。</p>\r\n\r\n<p><strong>注意：</strong>如果你使用编辑器，同时需要设置 py 文件存储的格式为 UTF-8，否则会出现类似以下错误信息：</p>\r\n\r\n<pre>\r\nSyntaxError: (unicode error) &lsquo;utf-8&rsquo; codec can&rsquo;t decode byte 0xc4 in position 0:\r\ninvalid continuation byte</pre>\r\n\r\n<p>Pycharm 设置步骤：</p>\r\n\r\n<ul>\r\n	<li>进入&nbsp;<strong>file &gt; Settings</strong>，在输入框搜索&nbsp;<strong>encoding</strong>。</li>\r\n	<li>找到&nbsp;<strong>Editor &gt; File encodings</strong>，将&nbsp;<strong>IDE Encoding</strong>&nbsp;和&nbsp;<strong>Project Encoding</strong>&nbsp;设置为utf-8。</li>\r\n</ul>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/12/pycharm-utf8.jpg\" /></p>\r\n</blockquote>\r\n', 1, 0, '2021-12-14 01:20:21.020320', '2021-12-14 01:20:22.993009', 5, 1);
INSERT INTO `tb_article` VALUES (28, 'article/20211214/python_eGvk5Rb.jpg', 'Python 基础语法', 'Python 基础语法', 'Python 基础语法', '<h1>Python&nbsp;基础语法</h1>\r\n\r\n<p>Python 语言与 Perl，C 和 Java 等语言有许多相似之处。但是，也存在一些差异。</p>\r\n\r\n<p>在本章中我们将来学习 Python 的基础语法，让你快速学会 Python 编程。</p>\r\n\r\n<hr />\r\n<h2>第一个 Python 程序</h2>\r\n\r\n<h3>交互式编程</h3>\r\n\r\n<p>交互式编程不需要创建脚本文件，是通过 Python 解释器的交互模式进来编写代码。</p>\r\n\r\n<p>linux上你只需要在命令行中输入 Python 命令即可启动交互式编程,提示窗口如下：</p>\r\n\r\n<p>$ python<br />\r\nPython 2.7.6&nbsp;(default,&nbsp;Sep &nbsp;9&nbsp;2014,&nbsp;15:04:36)<br />\r\n[GCC 4.2.1 Compatible Apple LLVM&nbsp;6.0&nbsp;(clang-600.0.39)]&nbsp;on darwin<br />\r\nType&nbsp;&quot;help&quot;,&nbsp;&quot;copyright&quot;,&nbsp;&quot;credits&quot;&nbsp;or&nbsp;&quot;license&quot;&nbsp;for&nbsp;more information.<br />\r\n&gt;&gt;&gt;</p>\r\n\r\n<p>Window 上在安装 Python 时已经安装了交互式编程客户端，提示窗口如下：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/prompt_1.png\" /></p>\r\n\r\n<p>在 python 提示符中输入以下文本信息，然后按 Enter 键查看运行效果：</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; print (&quot;Hello, Python!&quot;)</pre>\r\n\r\n<p>在 Python 2.7.6 版本中,以上实例输出结果如下：</p>\r\n\r\n<pre>\r\nHello, Python!</pre>\r\n\r\n<h3>脚本式编程</h3>\r\n\r\n<p>通过脚本参数调用解释器开始执行脚本，直到脚本执行完毕。当脚本执行完成后，解释器不再有效。</p>\r\n\r\n<p>让我们写一个简单的 Python 脚本程序。所有 Python 文件将以&nbsp;.py&nbsp;为扩展名。将以下的源代码拷贝至 test.py 文件中。</p>\r\n\r\n<pre>\r\nprint (&quot;Hello, Python!&quot;)</pre>\r\n\r\n<p>这里，假设你已经设置了 Python 解释器 PATH 变量。使用以下命令运行程序：</p>\r\n\r\n<pre>\r\n$ python test.py</pre>\r\n\r\n<p>输出结果：</p>\r\n\r\n<pre>\r\nHello, Python!</pre>\r\n\r\n<p>让我们尝试另一种方式来执行 Python 脚本。修改 test.py 文件，如下所示：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python<br />\r\n<br />\r\nprint&nbsp;(&quot;Hello, Python!&quot;)</p>\r\n\r\n<p>这里，假定您的Python解释器在/usr/bin目录中，使用以下命令执行脚本：</p>\r\n\r\n<pre>\r\n$ chmod +x test.py     # 脚本文件添加可执行权限\r\n$ ./test.py</pre>\r\n\r\n<p>输出结果：</p>\r\n\r\n<pre>\r\nHello, Python!</pre>\r\n\r\n<hr />\r\n<h2>Python2.x 中使用 Python3.x 的 print 函数</h2>\r\n\r\n<p>如果 Python2.x 版本想使用使用 Python3.x 的 print 函数，可以导入&nbsp;__future__&nbsp;包，该包禁用 Python2.x 的 print 语句，采用 Python3.x 的 print 函数：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;list&nbsp;=[&quot;a&quot;,&nbsp;&quot;b&quot;,&nbsp;&quot;c&quot;]<br />\r\n&gt;&gt;&gt;&nbsp;print&nbsp;list&nbsp;&nbsp; &nbsp;# python2.x 的 print 语句<br />\r\n[&#39;a&#39;,&nbsp;&#39;b&#39;,&nbsp;&#39;c&#39;]<br />\r\n&gt;&gt;&gt;&nbsp;from&nbsp;__future__&nbsp;import&nbsp;print_function &nbsp;# 导入 __future__ 包<br />\r\n&gt;&gt;&gt;&nbsp;print&nbsp;list&nbsp;&nbsp; &nbsp;&nbsp;# Python2.x 的 print 语句被禁用，使用报错<br />\r\n&nbsp; File&nbsp;&quot;&lt;stdin&gt;&quot;,&nbsp;line&nbsp;1<br />\r\n&nbsp; &nbsp;&nbsp;print&nbsp;list<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;^<br />\r\nSyntaxError: invalid syntax<br />\r\n&gt;&gt;&gt;&nbsp;print&nbsp;(list)&nbsp;&nbsp;&nbsp;# 使用 Python3.x 的 print 函数<br />\r\n[&#39;a&#39;,&nbsp;&#39;b&#39;,&nbsp;&#39;c&#39;]<br />\r\n&gt;&gt;&gt;</p>\r\n\r\n<p>Python3.x 与 Python2.x 的许多兼容性设计的功能可以通过&nbsp;__future__&nbsp;这个包来导入。</p>\r\n\r\n<hr />\r\n<h2>Python 标识符</h2>\r\n\r\n<p>在 Python 里，标识符由字母、数字、下划线组成。</p>\r\n\r\n<p>在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。</p>\r\n\r\n<p>Python 中的标识符是区分大小写的。</p>\r\n\r\n<p>以下划线开头的标识符是有特殊意义的。以单下划线开头&nbsp;_foo&nbsp;的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用&nbsp;from xxx import *&nbsp;而导入。</p>\r\n\r\n<p>以双下划线开头的&nbsp;__foo&nbsp;代表类的私有成员，以双下划线开头和结尾的&nbsp;__foo__&nbsp;代表 Python 里特殊方法专用的标识，如&nbsp;__init__()&nbsp;代表类的构造函数。</p>\r\n\r\n<p>Python 可以同一行显示多条语句，方法是用分号&nbsp;;&nbsp;分开，如：</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; print (&#39;hello&#39;);print (&#39;runoob&#39;);\r\nhello\r\nrunoob</pre>\r\n\r\n<hr />\r\n<h2>Python 保留字符</h2>\r\n\r\n<p>下面的列表显示了在Python中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。</p>\r\n\r\n<p>所有 Python 的关键字只包含小写字母。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>and</td>\r\n			<td>exec</td>\r\n			<td>not</td>\r\n		</tr>\r\n		<tr>\r\n			<td>assert</td>\r\n			<td>finally</td>\r\n			<td>or</td>\r\n		</tr>\r\n		<tr>\r\n			<td>break</td>\r\n			<td>for</td>\r\n			<td>pass</td>\r\n		</tr>\r\n		<tr>\r\n			<td>class</td>\r\n			<td>from</td>\r\n			<td>print</td>\r\n		</tr>\r\n		<tr>\r\n			<td>continue</td>\r\n			<td>global</td>\r\n			<td>raise</td>\r\n		</tr>\r\n		<tr>\r\n			<td>def</td>\r\n			<td>if</td>\r\n			<td>return</td>\r\n		</tr>\r\n		<tr>\r\n			<td>del</td>\r\n			<td>import</td>\r\n			<td>try</td>\r\n		</tr>\r\n		<tr>\r\n			<td>elif</td>\r\n			<td>in</td>\r\n			<td>while</td>\r\n		</tr>\r\n		<tr>\r\n			<td>else</td>\r\n			<td>is</td>\r\n			<td>with</td>\r\n		</tr>\r\n		<tr>\r\n			<td>except</td>\r\n			<td>lambda</td>\r\n			<td>yield</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<hr />\r\n<h2>行和缩进</h2>\r\n\r\n<p>学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号&nbsp;{}&nbsp;来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。</p>\r\n\r\n<p>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。</p>\r\n\r\n<p>以下实例缩进为四个空格:</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>if&nbsp;True:<br />\r\n&nbsp; &nbsp;&nbsp;print&nbsp;(&quot;True&quot;)<br />\r\nelse:<br />\r\n&nbsp; &nbsp;&nbsp;print&nbsp;(&quot;False&quot;)</p>\r\n\r\n<p>以下代码将会执行错误：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python<br />\r\n# -*- coding: UTF-8 -*-<br />\r\n# 文件名：test.py<br />\r\n<br />\r\nif&nbsp;True:<br />\r\n&nbsp; &nbsp;&nbsp;print&nbsp;(&quot;Answer&quot;)<br />\r\n&nbsp; &nbsp;&nbsp;print&nbsp;(&quot;True&quot;)<br />\r\nelse:<br />\r\n&nbsp; &nbsp;&nbsp;print&nbsp;(&quot;Answer&quot;)<br />\r\n&nbsp; &nbsp;&nbsp;# 没有严格缩进，在执行时会报错<br />\r\n&nbsp;&nbsp;print&nbsp;(&quot;False&quot;)</p>\r\n\r\n<p>执行以上代码，会出现如下错误提醒：</p>\r\n\r\n<pre>\r\n  File &quot;test.py&quot;, line 11\r\n    print (&quot;False&quot;)\r\n                  ^\r\nIndentationError: unindent does not match any outer indentation level</pre>\r\n\r\n<p><strong>IndentationError: unindent does not match any outer indentation level</strong>错误表明，你使用的缩进方式不一致，有的是 tab 键缩进，有的是空格缩进，改为一致即可。</p>\r\n\r\n<p>如果是&nbsp;<strong>IndentationError: unexpected indent</strong>&nbsp;错误, 则 python 编译器是在告诉你&quot;Hi，老兄，你的文件里格式不对了，可能是tab和空格没对齐的问题&quot;，所有 python 对格式要求非常严格。</p>\r\n\r\n<p>因此，在 Python 的代码块中必须使用相同数目的行首缩进空格数。</p>\r\n\r\n<p>建议你在每个缩进层次使用&nbsp;<strong>单个制表符</strong>&nbsp;或&nbsp;<strong>两个空格</strong>&nbsp;或&nbsp;<strong>四个空格</strong>&nbsp;, 切记不能混用</p>\r\n\r\n<hr />\r\n<h2>多行语句</h2>\r\n\r\n<p>Python语句中一般以新行作为语句的结束符。</p>\r\n\r\n<p>但是我们可以使用斜杠（ \\）将一行的语句分为多行显示，如下所示：</p>\r\n\r\n<pre>\r\ntotal = item_one + \\\r\n        item_two + \\\r\n        item_three</pre>\r\n\r\n<p>语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：</p>\r\n\r\n<pre>\r\ndays = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;,\r\n        &#39;Thursday&#39;, &#39;Friday&#39;]</pre>\r\n\r\n<hr />\r\n<h2>Python 引号</h2>\r\n\r\n<p>Python 可以使用引号(&nbsp;<strong>&#39;</strong>&nbsp;)、双引号(&nbsp;<strong>&quot;</strong>&nbsp;)、三引号(&nbsp;<strong>&#39;&#39;&#39;</strong>&nbsp;或&nbsp;<strong>&quot;&quot;&quot;</strong>&nbsp;) 来表示字符串，引号的开始与结束必须是相同类型的。</p>\r\n\r\n<p>其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。</p>\r\n\r\n<pre>\r\nword = &#39;word&#39;\r\nsentence = &quot;这是一个句子。&quot;\r\nparagraph = &quot;&quot;&quot;这是一个段落。\r\n包含了多个语句&quot;&quot;&quot;</pre>\r\n\r\n<hr />\r\n<h2>Python注释</h2>\r\n\r\n<p>python中单行注释采用 # 开头。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python<br />\r\n# -*- coding: UTF-8 -*-<br />\r\n# 文件名：test.py<br />\r\n<br />\r\n# 第一个注释<br />\r\nprint&nbsp;(&quot;Hello, Python!&quot;)&nbsp;&nbsp;# 第二个注释</p>\r\n\r\n<p>输出结果：</p>\r\n\r\n<pre>\r\nHello, Python!</pre>\r\n\r\n<p>注释可以在语句或表达式行末：</p>\r\n\r\n<pre>\r\nname = &quot;Madisetti&quot; # 这是一个注释</pre>\r\n\r\n<p>python 中多行注释使用三个单引号(&#39;&#39;&#39;)或三个双引号(&quot;&quot;&quot;)。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python<br />\r\n# -*- coding: UTF-8 -*-<br />\r\n# 文件名：test.py<br />\r\n<br />\r\n<br />\r\n&#39;&#39;&#39;<br />\r\n这是多行注释，使用单引号。<br />\r\n这是多行注释，使用单引号。<br />\r\n这是多行注释，使用单引号。<br />\r\n&#39;&#39;&#39;<br />\r\n<br />\r\n&quot;&quot;&quot;<br />\r\n这是多行注释，使用双引号。<br />\r\n这是多行注释，使用双引号。<br />\r\n这是多行注释，使用双引号。<br />\r\n&quot;&quot;&quot;</p>\r\n\r\n<hr />\r\n<h2>Python空行</h2>\r\n\r\n<p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p>\r\n\r\n<p>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p>\r\n\r\n<p>记住：空行也是程序代码的一部分。</p>\r\n\r\n<hr />\r\n<h2>等待用户输入</h2>\r\n\r\n<p>下面的程序执行后就会等待用户输入，按回车键后就会退出：</p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n# -*- coding: UTF-8 -*-\r\n\r\nraw_input(&quot;按下 enter 键退出，其他任意键显示...\\n&quot;)</pre>\r\n\r\n<p>以上代码中 ，\\n&nbsp;实现换行。一旦用户按下 enter(回车) 键退出，其它键显示。</p>\r\n\r\n<hr />\r\n<h2>同一行显示多条语句</h2>\r\n\r\n<p>Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例：</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\nimport sys; x = &#39;runoob&#39;; sys.stdout.write(x + &#39;\\n&#39;)</pre>\r\n\r\n<p>执行以上代码，输入结果为：</p>\r\n\r\n<pre>\r\n$ python test.py\r\nrunoob</pre>\r\n\r\n<hr />\r\n<h2>print 输出</h2>\r\n\r\n<p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号&nbsp;,。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python<br />\r\n# -*- coding: UTF-8 -*-<br />\r\n<br />\r\nx=&quot;a&quot;<br />\r\ny=&quot;b&quot;<br />\r\n# 换行输出<br />\r\nprint&nbsp;x<br />\r\nprint&nbsp;y<br />\r\n<br />\r\nprint&nbsp;&#39;---------&#39;<br />\r\n# 不换行输出<br />\r\nprint&nbsp;x,<br />\r\nprint&nbsp;y,<br />\r\n<br />\r\n# 不换行输出<br />\r\nprint&nbsp;x,y</p>\r\n\r\n<p>以上实例执行结果为：</p>\r\n\r\n<pre>\r\na\r\nb\r\n---------\r\na b a b</pre>\r\n\r\n<hr />\r\n<h2>多个语句构成代码组</h2>\r\n\r\n<p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p>\r\n\r\n<p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p>\r\n\r\n<p>我们将首行及后面的代码组称为一个子句(clause)。</p>\r\n\r\n<p>如下实例：</p>\r\n\r\n<pre>\r\nif expression : \r\n   suite \r\nelif expression :  \r\n   suite  \r\nelse :  \r\n   suite </pre>\r\n\r\n<hr />\r\n<h2>命令行参数</h2>\r\n\r\n<p>很多程序可以执行一些操作来查看一些基本信息，Python 可以使用&nbsp;-h&nbsp;参数查看各参数帮助信息：</p>\r\n\r\n<pre>\r\n$ python -h \r\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ... \r\nOptions and arguments (and corresponding environment variables): \r\n-c cmd : program passed in as string (terminates option list) \r\n-d     : debug output from parser (also PYTHONDEBUG=x) \r\n-E     : ignore environment variables (such as PYTHONPATH) \r\n-h     : print this help message and exit \r\n \r\n[ etc. ] </pre>\r\n\r\n<p>我们在使用脚本形式执行 Python 时，可以接收命令行输入的参数，具体使用可以参照&nbsp;<a href=\"https://www.runoob.com/python/python-command-line-arguments.html\" rel=\"noopener noreferrer\" target=\"_blank\">Python 命令行参数</a>。</p>\r\n', 0, 0, '2021-12-14 01:21:20.017432', '2021-12-14 01:21:20.017432', 5, 1);
INSERT INTO `tb_article` VALUES (29, 'article/20211214/python_A8nKL7o.jpg', 'Python 变量类型', 'Python 变量类型', 'Python 变量类型', '<h1>Python&nbsp;变量类型</h1>\r\n\r\n<p>变量存储在内存中的值，这就意味着在创建变量时会在内存中开辟一个空间。</p>\r\n\r\n<p>基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。</p>\r\n\r\n<p>因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>变量赋值</h2>\r\n\r\n<p>Python 中的变量赋值不需要类型声明。</p>\r\n\r\n<p>每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。</p>\r\n\r\n<p>每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p>\r\n\r\n<p>等号&nbsp;=&nbsp;用来给变量赋值。</p>\r\n\r\n<p>等号&nbsp;=&nbsp;运算符左边是一个变量名，等号&nbsp;=&nbsp;运算符右边是存储在变量中的值。例如：</p>\r\n\r\n<h2>实例(Python 2.0+)</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- counter = 100 # 赋值整型变量 miles = 1000.0 # 浮点型 name = &quot;John&quot; # 字符串 print counter print miles print name</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/runcode.php?filename=demo_variable&amp;type=python\" rel=\"noopener noreferrer\" target=\"_blank\">运行实例 &raquo;</a></p>\r\n\r\n<p>以上实例中，100，1000.0和&quot;John&quot;分别赋值给counter，miles，name变量。</p>\r\n\r\n<p>执行以上程序会输出如下结果：</p>\r\n\r\n<pre>\r\n100\r\n1000.0\r\nJohn</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>多个变量赋值</h2>\r\n\r\n<p>Python允许你同时为多个变量赋值。例如：</p>\r\n\r\n<pre>\r\na = b = c = 1</pre>\r\n\r\n<p>以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。</p>\r\n\r\n<p>您也可以为多个对象指定多个变量。例如：</p>\r\n\r\n<pre>\r\na, b, c = 1, 2, &quot;john&quot;</pre>\r\n\r\n<p>以上实例，两个整型对象 1 和 2 分别分配给变量 a 和 b，字符串对象 &quot;john&quot; 分配给变量 c。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>标准数据类型</h2>\r\n\r\n<p>在内存中存储的数据可以有多种类型。</p>\r\n\r\n<p>例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。</p>\r\n\r\n<p>Python 定义了一些标准类型，用于存储各种类型的数据。</p>\r\n\r\n<p>Python有五个标准的数据类型：</p>\r\n\r\n<ul>\r\n	<li>Numbers（数字）</li>\r\n	<li>String（字符串）</li>\r\n	<li>List（列表）</li>\r\n	<li>Tuple（元组）</li>\r\n	<li>Dictionary（字典）</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>Python 数字</h2>\r\n\r\n<p>数字数据类型用于存储数值。</p>\r\n\r\n<p>他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。</p>\r\n\r\n<p>当你指定一个值时，Number 对象就会被创建：</p>\r\n\r\n<pre>\r\nvar1 = 1\r\nvar2 = 10</pre>\r\n\r\n<p>您也可以使用del语句删除一些对象的引用。</p>\r\n\r\n<p>del语句的语法是：</p>\r\n\r\n<pre>\r\ndel var1[,var2[,var3[....,varN]]]</pre>\r\n\r\n<p>您可以通过使用del语句删除单个或多个对象的引用。例如：</p>\r\n\r\n<pre>\r\ndel var\r\ndel var_a, var_b</pre>\r\n\r\n<p>Python支持四种不同的数字类型：</p>\r\n\r\n<ul>\r\n	<li>int（有符号整型）</li>\r\n	<li>long（长整型，也可以代表八进制和十六进制）</li>\r\n	<li>float（浮点型）</li>\r\n	<li>complex（复数）</li>\r\n</ul>\r\n\r\n<p><strong>实例</strong></p>\r\n\r\n<p>一些数值类型的实例：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>int</th>\r\n			<th>long</th>\r\n			<th>float</th>\r\n			<th>complex</th>\r\n		</tr>\r\n		<tr>\r\n			<td>10</td>\r\n			<td>51924361L</td>\r\n			<td>0.0</td>\r\n			<td>3.14j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>100</td>\r\n			<td>-0x19323L</td>\r\n			<td>15.20</td>\r\n			<td>45.j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-786</td>\r\n			<td>0122L</td>\r\n			<td>-21.9</td>\r\n			<td>9.322e-36j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>080</td>\r\n			<td>0xDEFABCECBDAECBFBAEl</td>\r\n			<td>32.3e+18</td>\r\n			<td>.876j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-0490</td>\r\n			<td>535633629843L</td>\r\n			<td>-90.</td>\r\n			<td>-.6545+0J</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-0x260</td>\r\n			<td>-052318172735L</td>\r\n			<td>-32.54e100</td>\r\n			<td>3e+26J</td>\r\n		</tr>\r\n		<tr>\r\n			<td>0x69</td>\r\n			<td>-4721885298529L</td>\r\n			<td>70.2E-12</td>\r\n			<td>4.53e-7j</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<ul>\r\n	<li>长整型也可以使用小写 l，但是还是建议您使用大写 L，避免与数字 1 混淆。Python使用 L 来显示长整型。</li>\r\n	<li>Python 还支持复数，复数由实数部分和虚数部分构成，可以用 a + bj,或者 complex(a,b) 表示， 复数的实部 a 和虚部 b 都是浮点型。</li>\r\n</ul>\r\n\r\n<blockquote>\r\n<p><strong>注意：</strong>long 类型只存在于 Python2.X 版本中，在 2.2 以后的版本中，int 类型数据溢出后会自动转为long类型。在 Python3.X 版本中 long 类型被移除，使用 int 替代。</p>\r\n</blockquote>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>Python字符串</h2>\r\n\r\n<p>字符串或串(String)是由数字、字母、下划线组成的一串字符。</p>\r\n\r\n<p>一般记为 :</p>\r\n\r\n<pre>\r\ns = &quot;a1a2&middot;&middot;&middot;an&quot;   # n&gt;=0</pre>\r\n\r\n<p>它是编程语言中表示文本的数据类型。</p>\r\n\r\n<p>python的字串列表有2种取值顺序:</p>\r\n\r\n<ul>\r\n	<li>从左到右索引默认0开始的，最大范围是字符串长度少1</li>\r\n	<li>从右到左索引默认-1开始的，最大范围是字符串开头</li>\r\n</ul>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/python-string-slice.png\" /></p>\r\n\r\n<p>如果你要实现从字符串中获取一段子字符串的话，可以使用&nbsp;[头下标:尾下标]&nbsp;来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。</p>\r\n\r\n<p>[头下标:尾下标]&nbsp;获取的子字符串包含头下标的字符，但不包含尾下标的字符。</p>\r\n\r\n<p>比如:</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; s = &#39;abcdef&#39;\r\n&gt;&gt;&gt; s[1:5]\r\n&#39;bcde&#39;</pre>\r\n\r\n<p>当使用以冒号分隔的字符串，python 返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。</p>\r\n\r\n<p>上面的结果包含了&nbsp;s[1]&nbsp;的值 b，而取到的最大范围不包括<strong>尾下标</strong>，就是&nbsp;s[5]&nbsp;的值 f。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/o99aU.png\" /></p>\r\n\r\n<p>加号（+）是字符串连接运算符，星号（*）是重复操作。如下实例：</p>\r\n\r\n<h2>实例(Python 2.0+)</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- str = &#39;Hello World!&#39; print str # 输出完整字符串 print str[0] # 输出字符串中的第一个字符 print str[2:5] # 输出字符串中第三个至第六个之间的字符串 print str[2:] # 输出从第三个字符开始的字符串 print str * 2 # 输出字符串两次 print str + &quot;TEST&quot; # 输出连接的字符串</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\nHello World!\r\nH\r\nllo\r\nllo World!\r\nHello World!Hello World!\r\nHello World!TEST</pre>\r\n\r\n<p>Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/python_list_slice_2.png\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>Python列表</h2>\r\n\r\n<p>List（列表） 是 Python 中使用最频繁的数据类型。</p>\r\n\r\n<p>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。</p>\r\n\r\n<p>列表用&nbsp;[ ]&nbsp;标识，是 python 最通用的复合数据类型。</p>\r\n\r\n<p>列表中值的切割也可以用到变量&nbsp;[头下标:尾下标]&nbsp;，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/list_slicing1_new1.png\" /></p>\r\n\r\n<p>加号&nbsp;+&nbsp;是列表连接运算符，星号&nbsp;*&nbsp;是重复操作。如下实例：</p>\r\n\r\n<h2>实例(Python 2.0+)</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- list = [ &#39;runoob&#39;, 786 , 2.23, &#39;john&#39;, 70.2 ] tinylist = [123, &#39;john&#39;] print list # 输出完整列表 print list[0] # 输出列表的第一个元素 print list[1:3] # 输出第二个至第三个元素 print list[2:] # 输出从第三个开始至列表末尾的所有元素 print tinylist * 2 # 输出列表两次 print list + tinylist # 打印组合的列表</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n[&#39;runoob&#39;, 786, 2.23, &#39;john&#39;, 70.2]\r\nrunoob\r\n[786, 2.23]\r\n[2.23, &#39;john&#39;, 70.2]\r\n[123, &#39;john&#39;, 123, &#39;john&#39;]\r\n[&#39;runoob&#39;, 786, 2.23, &#39;john&#39;, 70.2, 123, &#39;john&#39;]</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>Python 元组</h2>\r\n\r\n<p>元组是另一个数据类型，类似于 List（列表）。</p>\r\n\r\n<p>元组用&nbsp;()&nbsp;标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。</p>\r\n\r\n<h2>实例(Python 2.0+)</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- tuple = ( &#39;runoob&#39;, 786 , 2.23, &#39;john&#39;, 70.2 ) tinytuple = (123, &#39;john&#39;) print tuple # 输出完整元组 print tuple[0] # 输出元组的第一个元素 print tuple[1:3] # 输出第二个至第四个（不包含）的元素 print tuple[2:] # 输出从第三个开始至列表末尾的所有元素 print tinytuple * 2 # 输出元组两次 print tuple + tinytuple # 打印组合的元组</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n(&#39;runoob&#39;, 786, 2.23, &#39;john&#39;, 70.2)\r\nrunoob\r\n(786, 2.23)\r\n(2.23, &#39;john&#39;, 70.2)\r\n(123, &#39;john&#39;, 123, &#39;john&#39;)\r\n(&#39;runoob&#39;, 786, 2.23, &#39;john&#39;, 70.2, 123, &#39;john&#39;)</pre>\r\n\r\n<p>以下是元组无效的，因为元组是不允许更新的。而列表是允许更新的：</p>\r\n\r\n<h2>实例(Python 2.0+)</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- tuple = ( &#39;runoob&#39;, 786 , 2.23, &#39;john&#39;, 70.2 ) list = [ &#39;runoob&#39;, 786 , 2.23, &#39;john&#39;, 70.2 ] tuple[2] = 1000 # 元组中是非法应用 list[2] = 1000 # 列表中是合法应用</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>Python 字典</h2>\r\n\r\n<p>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。</p>\r\n\r\n<p>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>\r\n\r\n<p>字典用&quot;{ }&quot;标识。字典由索引(key)和它对应的值value组成。</p>\r\n\r\n<h2>实例(Python 2.0+)</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- dict = {} dict[&#39;one&#39;] = &quot;This is one&quot; dict[2] = &quot;This is two&quot; tinydict = {&#39;name&#39;: &#39;runoob&#39;,&#39;code&#39;:6734, &#39;dept&#39;: &#39;sales&#39;} print dict[&#39;one&#39;] # 输出键为&#39;one&#39; 的值 print dict[2] # 输出键为 2 的值 print tinydict # 输出完整的字典 print tinydict.keys() # 输出所有键 print tinydict.values() # 输出所有值</p>\r\n\r\n<p>输出结果为：</p>\r\n\r\n<pre>\r\nThis is one\r\nThis is two\r\n{&#39;dept&#39;: &#39;sales&#39;, &#39;code&#39;: 6734, &#39;name&#39;: &#39;runoob&#39;}\r\n[&#39;dept&#39;, &#39;code&#39;, &#39;name&#39;]\r\n[&#39;sales&#39;, 6734, &#39;runoob&#39;]</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>Python数据类型转换</h2>\r\n\r\n<p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p>\r\n\r\n<p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>函数</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/python-func-int.html\" rel=\"noopener noreferrer\" target=\"_blank\">int(x [,base])</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将x转换为一个整数</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/python-func-long.html\" rel=\"noopener noreferrer\" target=\"_blank\">long(x [,base] )</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将x转换为一个长整数</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/python-func-float.html\" rel=\"noopener noreferrer\" target=\"_blank\">float(x)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将x转换到一个浮点数</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/python-func-complex.html\" rel=\"noopener noreferrer\" target=\"_blank\">complex(real [,imag])</a></p>\r\n			</td>\r\n			<td>\r\n			<p>创建一个复数</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/python-func-str.html\" rel=\"noopener noreferrer\" target=\"_blank\">str(x)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将对象 x 转换为字符串</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/python-func-repr.html\" rel=\"noopener noreferrer\" target=\"_blank\">repr(x)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将对象 x 转换为表达式字符串</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/python-func-eval.html\" rel=\"noopener noreferrer\" target=\"_blank\">eval(str)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>用来计算在字符串中的有效Python表达式,并返回一个对象</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/att-tuple-tuple.html\" rel=\"noopener noreferrer\" target=\"_blank\">tuple(s)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将序列 s 转换为一个元组</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/att-list-list.html\" rel=\"noopener noreferrer\" target=\"_blank\">list(s)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将序列 s 转换为一个列表</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/python-func-set.html\" rel=\"noopener noreferrer\" target=\"_blank\">set(s)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>转换为可变集合</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/python-func-dict.html\" rel=\"noopener noreferrer\" target=\"_blank\">dict(d)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>创建一个字典。d 必须是一个序列 (key,value)元组。</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/python-func-frozenset.html\" rel=\"noopener noreferrer\" target=\"_blank\">frozenset(s)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>转换为不可变集合</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/python-func-chr.html\" rel=\"noopener noreferrer\" target=\"_blank\">chr(x)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将一个整数转换为一个字符</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/python-func-unichr.html\" rel=\"noopener noreferrer\" target=\"_blank\">unichr(x)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将一个整数转换为Unicode字符</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/python-func-ord.html\" rel=\"noopener noreferrer\" target=\"_blank\">ord(x)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将一个字符转换为它的整数值</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/python-func-hex.html\" rel=\"noopener noreferrer\" target=\"_blank\">hex(x)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将一个整数转换为一个十六进制字符串</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python/python-func-oct.html\" rel=\"noopener noreferrer\" target=\"_blank\">oct(x)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将一个整数转换为一个八进制字符串</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 0, '2021-12-14 01:21:57.321792', '2021-12-14 01:21:57.329817', 5, 1);
INSERT INTO `tb_article` VALUES (30, 'article/20211214/python_svCgbhh.jpg', 'Python 运算符', 'Python 运算符', 'Python 运算符', '<h1>Python&nbsp;运算符</h1>\r\n\r\n<hr />\r\n<h2>什么是运算符？</h2>\r\n\r\n<p>本章节主要说明Python的运算符。举个简单的例子<strong>&nbsp;4 +5 = 9&nbsp;</strong>。 例子中，<strong>4</strong>&nbsp;和&nbsp;<strong>5</strong>&nbsp;被称为<strong>操作数</strong>，&quot;<strong>+</strong>&quot; 称为运算符。</p>\r\n\r\n<p>Python语言支持以下类型的运算符:</p>\r\n\r\n<ul>\r\n	<li><a href=\"https://www.runoob.com/python/python-operators.html#ysf1\">算术运算符</a></li>\r\n	<li><a href=\"https://www.runoob.com/python/python-operators.html#ysf2\">比较（关系）运算符</a></li>\r\n	<li><a href=\"https://www.runoob.com/python/python-operators.html#ysf3\">赋值运算符</a></li>\r\n	<li><a href=\"https://www.runoob.com/python/python-operators.html#ysf4\">逻辑运算符</a></li>\r\n	<li><a href=\"https://www.runoob.com/python/python-operators.html#ysf5\">位运算符</a></li>\r\n	<li><a href=\"https://www.runoob.com/python/python-operators.html#ysf6\">成员运算符</a></li>\r\n	<li><a href=\"https://www.runoob.com/python/python-operators.html#ysf7\">身份运算符</a></li>\r\n	<li><a href=\"https://www.runoob.com/python/python-operators.html#ysf8\">运算符优先级</a></li>\r\n</ul>\r\n\r\n<p>接下来让我们一个个来学习Python的运算符。</p>\r\n\r\n<hr />\r\n<h2>Python算术运算符</h2>\r\n\r\n<p>以下假设变量：<strong>&nbsp;a=10，b=20</strong>：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>+</td>\r\n			<td>加 - 两个对象相加</td>\r\n			<td>a + b 输出结果 30</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-</td>\r\n			<td>减 - 得到负数或是一个数减去另一个数</td>\r\n			<td>a - b 输出结果 -10</td>\r\n		</tr>\r\n		<tr>\r\n			<td>*</td>\r\n			<td>乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>\r\n			<td>a * b 输出结果 200</td>\r\n		</tr>\r\n		<tr>\r\n			<td>/</td>\r\n			<td>除 - x除以y</td>\r\n			<td>b / a 输出结果 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>%</td>\r\n			<td>取模 - 返回除法的余数</td>\r\n			<td>b % a 输出结果 0</td>\r\n		</tr>\r\n		<tr>\r\n			<td>**</td>\r\n			<td>幂 - 返回x的y次幂</td>\r\n			<td>a**b 为10的20次方， 输出结果 100000000000000000000</td>\r\n		</tr>\r\n		<tr>\r\n			<td>//</td>\r\n			<td>取整除 - 返回商的整数部分（<strong>向下取整</strong>）</td>\r\n			<td>\r\n			<pre>\r\n&gt;&gt;&gt; 9//2\r\n4\r\n&gt;&gt;&gt; -9//2\r\n-5</pre>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>以下实例演示了Python所有算术运算符的操作：</p>\r\n\r\n<h2>实例(Python 2.0+)</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- a = 21 b = 10 c = 0 c = a + b print &quot;1 - c 的值为：&quot;, c c = a - b print &quot;2 - c 的值为：&quot;, c c = a * b print &quot;3 - c 的值为：&quot;, c c = a / b print &quot;4 - c 的值为：&quot;, c c = a % b print &quot;5 - c 的值为：&quot;, c # 修改变量 a 、b 、c a = 2 b = 3 c = a**b print &quot;6 - c 的值为：&quot;, c a = 10 b = 5 c = a//b print &quot;7 - c 的值为：&quot;, c</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/runcode.php?filename=test_operator&amp;type=python\" rel=\"noopener noreferrer\" target=\"_blank\">运行实例 &raquo;</a></p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n1 - c 的值为： 31\r\n2 - c 的值为： 11\r\n3 - c 的值为： 210\r\n4 - c 的值为： 2\r\n5 - c 的值为： 1\r\n6 - c 的值为： 8\r\n7 - c 的值为： 2</pre>\r\n\r\n<blockquote>\r\n<p><strong>注意：</strong>Python2.x 里，整数除整数，只能得出整数。如果要得到小数部分，把其中一个数改成浮点数即可。</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; 1/2\r\n0\r\n&gt;&gt;&gt; 1.0/2\r\n0.5\r\n&gt;&gt;&gt; 1/float(2)\r\n0.5</pre>\r\n</blockquote>\r\n\r\n<hr />\r\n<h2>Python比较运算符</h2>\r\n\r\n<p>以下假设变量a为10，变量b为20：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>==</td>\r\n			<td>等于 - 比较对象是否相等</td>\r\n			<td>(a == b) 返回 False。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>!=</td>\r\n			<td>不等于 - 比较两个对象是否不相等</td>\r\n			<td>(a != b) 返回 true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;&gt;</td>\r\n			<td>不等于 - 比较两个对象是否不相等。python3 已废弃。</td>\r\n			<td>(a &lt;&gt; b) 返回 true。这个运算符类似 != 。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;</td>\r\n			<td>大于 - 返回x是否大于y</td>\r\n			<td>(a &gt; b) 返回 False。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;</td>\r\n			<td>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</td>\r\n			<td>(a &lt; b) 返回 true。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;=</td>\r\n			<td>大于等于 - 返回x是否大于等于y。</td>\r\n			<td>(a &gt;= b) 返回 False。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;=</td>\r\n			<td>小于等于 - 返回x是否小于等于y。</td>\r\n			<td>(a &lt;= b) 返回 true。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>以下实例演示了Python所有比较运算符的操作：</p>\r\n\r\n<h2>实例(Python 2.0+)</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- a = 21 b = 10 c = 0 if a == b : print &quot;1 - a 等于 b&quot; else: print &quot;1 - a 不等于 b&quot; if a != b : print &quot;2 - a 不等于 b&quot; else: print &quot;2 - a 等于 b&quot; if a &lt;&gt; b : print &quot;3 - a 不等于 b&quot; else: print &quot;3 - a 等于 b&quot; if a &lt; b : print &quot;4 - a 小于 b&quot; else: print &quot;4 - a 大于等于 b&quot; if a &gt; b : print &quot;5 - a 大于 b&quot; else: print &quot;5 - a 小于等于 b&quot; # 修改变量 a 和 b 的值 a = 5 b = 20 if a &lt;= b : print &quot;6 - a 小于等于 b&quot; else: print &quot;6 - a 大于 b&quot; if b &gt;= a : print &quot;7 - b 大于等于 a&quot; else: print &quot;7 - b 小于 a&quot;</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n1 - a 不等于 b\r\n2 - a 不等于 b\r\n3 - a 不等于 b\r\n4 - a 大于等于 b\r\n5 - a 大于 b\r\n6 - a 小于等于 b\r\n7 - b 大于等于 a</pre>\r\n\r\n<hr />\r\n<h2>Python赋值运算符</h2>\r\n\r\n<p>以下假设变量a为10，变量b为20：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>=</td>\r\n			<td>简单的赋值运算符</td>\r\n			<td>c = a + b 将 a + b 的运算结果赋值为 c</td>\r\n		</tr>\r\n		<tr>\r\n			<td>+=</td>\r\n			<td>加法赋值运算符</td>\r\n			<td>c += a 等效于 c = c + a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-=</td>\r\n			<td>减法赋值运算符</td>\r\n			<td>c -= a 等效于 c = c - a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>*=</td>\r\n			<td>乘法赋值运算符</td>\r\n			<td>c *= a 等效于 c = c * a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>/=</td>\r\n			<td>除法赋值运算符</td>\r\n			<td>c /= a 等效于 c = c / a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>%=</td>\r\n			<td>取模赋值运算符</td>\r\n			<td>c %= a 等效于 c = c % a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>**=</td>\r\n			<td>幂赋值运算符</td>\r\n			<td>c **= a 等效于 c = c ** a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>//=</td>\r\n			<td>取整除赋值运算符</td>\r\n			<td>c //= a 等效于 c = c // a</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>以下实例演示了Python所有赋值运算符的操作：</p>\r\n\r\n<h2>实例(Python 2.0+)</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- a = 21 b = 10 c = 0 c = a + b print &quot;1 - c 的值为：&quot;, c c += a print &quot;2 - c 的值为：&quot;, c c *= a print &quot;3 - c 的值为：&quot;, c c /= a print &quot;4 - c 的值为：&quot;, c c = 2 c %= a print &quot;5 - c 的值为：&quot;, c c **= a print &quot;6 - c 的值为：&quot;, c c //= a print &quot;7 - c 的值为：&quot;, c</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n1 - c 的值为： 31\r\n2 - c 的值为： 52\r\n3 - c 的值为： 1092\r\n4 - c 的值为： 52\r\n5 - c 的值为： 2\r\n6 - c 的值为： 2097152\r\n7 - c 的值为： 99864</pre>\r\n\r\n<hr />\r\n<h2>Python位运算符</h2>\r\n\r\n<p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p>\r\n\r\n<p>下表中变量 a 为 60，b 为 13，二进制格式如下：</p>\r\n\r\n<pre>\r\na = 0011 1100\r\n\r\nb = 0000 1101\r\n\r\n-----------------\r\n\r\na&amp;b = 0000 1100\r\n\r\na|b = 0011 1101\r\n\r\na^b = 0011 0001\r\n\r\n~a  = 1100 0011</pre>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp;</td>\r\n			<td>按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>\r\n			<td>(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td>\r\n		</tr>\r\n		<tr>\r\n			<td>|</td>\r\n			<td>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td>\r\n			<td>(a | b) 输出结果 61 ，二进制解释： 0011 1101</td>\r\n		</tr>\r\n		<tr>\r\n			<td>^</td>\r\n			<td>按位异或运算符：当两对应的二进位相异时，结果为1</td>\r\n			<td>(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td>\r\n		</tr>\r\n		<tr>\r\n			<td>~</td>\r\n			<td>按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。~x&nbsp;类似于&nbsp;-x-1</td>\r\n			<td>(~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;&lt;</td>\r\n			<td>左移动运算符：运算数的各二进位全部左移若干位，由&nbsp;&lt;&lt;&nbsp;右边的数字指定了移动的位数，高位丢弃，低位补0。</td>\r\n			<td>a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt;</td>\r\n			<td>右移动运算符：把&quot;&gt;&gt;&quot;左边的运算数的各二进位全部右移若干位，&gt;&gt;&nbsp;右边的数字指定了移动的位数</td>\r\n			<td>a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>以下实例演示了Python所有位运算符的操作：</p>\r\n\r\n<h2>实例(Python 2.0+)</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- a = 60 # 60 = 0011 1100 b = 13 # 13 = 0000 1101 c = 0 c = a &amp; b; # 12 = 0000 1100 print &quot;1 - c 的值为：&quot;, c c = a | b; # 61 = 0011 1101 print &quot;2 - c 的值为：&quot;, c c = a ^ b; # 49 = 0011 0001 print &quot;3 - c 的值为：&quot;, c c = ~a; # -61 = 1100 0011 print &quot;4 - c 的值为：&quot;, c c = a &lt;&lt; 2; # 240 = 1111 0000 print &quot;5 - c 的值为：&quot;, c c = a &gt;&gt; 2; # 15 = 0000 1111 print &quot;6 - c 的值为：&quot;, c</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n1 - c 的值为： 12\r\n2 - c 的值为： 61\r\n3 - c 的值为： 49\r\n4 - c 的值为： -61\r\n5 - c 的值为： 240\r\n6 - c 的值为： 15</pre>\r\n\r\n<hr />\r\n<h2>Python逻辑运算符</h2>\r\n\r\n<p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>逻辑表达式</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>and</td>\r\n			<td>x and y</td>\r\n			<td>布尔&quot;与&quot; - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td>\r\n			<td>(a and b) 返回 20。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>or</td>\r\n			<td>x or y</td>\r\n			<td>布尔&quot;或&quot; - 如果 x 是非 0，它返回 x 的计算值，否则它返回 y 的计算值。</td>\r\n			<td>(a or b) 返回 10。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>not</td>\r\n			<td>not x</td>\r\n			<td>布尔&quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>\r\n			<td>not(a and b) 返回 False</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<h2>实例(Python 2.0+)</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- a = 10 b = 20 if a and b : print &quot;1 - 变量 a 和 b 都为 true&quot; else: print &quot;1 - 变量 a 和 b 有一个不为 true&quot; if a or b : print &quot;2 - 变量 a 和 b 都为 true，或其中一个变量为 true&quot; else: print &quot;2 - 变量 a 和 b 都不为 true&quot; # 修改变量 a 的值 a = 0 if a and b : print &quot;3 - 变量 a 和 b 都为 true&quot; else: print &quot;3 - 变量 a 和 b 有一个不为 true&quot; if a or b : print &quot;4 - 变量 a 和 b 都为 true，或其中一个变量为 true&quot; else: print &quot;4 - 变量 a 和 b 都不为 true&quot; if not( a and b ): print &quot;5 - 变量 a 和 b 都为 false，或其中一个变量为 false&quot; else: print &quot;5 - 变量 a 和 b 都为 true&quot;</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n1 - 变量 a 和 b 都为 true\r\n2 - 变量 a 和 b 都为 true，或其中一个变量为 true\r\n3 - 变量 a 和 b 有一个不为 true\r\n4 - 变量 a 和 b 都为 true，或其中一个变量为 true\r\n5 - 变量 a 和 b 都为 false，或其中一个变量为 false</pre>\r\n\r\n<hr />\r\n<h2>Python成员运算符</h2>\r\n\r\n<p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>in</td>\r\n			<td>如果在指定的序列中找到值返回 True，否则返回 False。</td>\r\n			<td>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>not in</td>\r\n			<td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td>\r\n			<td>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>以下实例演示了Python所有成员运算符的操作：</p>\r\n\r\n<h2>实例(Python 2.0+)</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- a = 10 b = 20 list = [1, 2, 3, 4, 5 ]; if ( a in list ): print &quot;1 - 变量 a 在给定的列表中 list 中&quot; else: print &quot;1 - 变量 a 不在给定的列表中 list 中&quot; if ( b not in list ): print &quot;2 - 变量 b 不在给定的列表中 list 中&quot; else: print &quot;2 - 变量 b 在给定的列表中 list 中&quot; # 修改变量 a 的值 a = 2 if ( a in list ): print &quot;3 - 变量 a 在给定的列表中 list 中&quot; else: print &quot;3 - 变量 a 不在给定的列表中 list 中&quot;</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n1 - 变量 a 不在给定的列表中 list 中\r\n2 - 变量 b 不在给定的列表中 list 中\r\n3 - 变量 a 在给定的列表中 list 中</pre>\r\n\r\n<hr />\r\n<h2>Python身份运算符</h2>\r\n\r\n<p>身份运算符用于比较两个对象的存储单元</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>is</td>\r\n			<td>is 是判断两个标识符是不是引用自一个对象</td>\r\n			<td><strong>x is y</strong>, 类似&nbsp;<strong>id(x) == id(y)</strong>&nbsp;, 如果引用的是同一个对象则返回 True，否则返回 False</td>\r\n		</tr>\r\n		<tr>\r\n			<td>is not</td>\r\n			<td>is not 是判断两个标识符是不是引用自不同对象</td>\r\n			<td><strong>x is not y</strong>&nbsp;， 类似&nbsp;<strong>id(a) != id(b)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>注：</strong>&nbsp;<a href=\"https://www.runoob.com/python/python-func-id.html\" rel=\"noopener noreferrer\" target=\"_blank\">id()</a>&nbsp;函数用于获取对象内存地址。</p>\r\n\r\n<p>以下实例演示了Python所有身份运算符的操作：</p>\r\n\r\n<h2>实例(Python 2.0+)</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- a = 20 b = 20 if ( a is b ): print &quot;1 - a 和 b 有相同的标识&quot; else: print &quot;1 - a 和 b 没有相同的标识&quot; if ( a is not b ): print &quot;2 - a 和 b 没有相同的标识&quot; else: print &quot;2 - a 和 b 有相同的标识&quot; # 修改变量 b 的值 b = 30 if ( a is b ): print &quot;3 - a 和 b 有相同的标识&quot; else: print &quot;3 - a 和 b 没有相同的标识&quot; if ( a is not b ): print &quot;4 - a 和 b 没有相同的标识&quot; else: print &quot;4 - a 和 b 有相同的标识&quot;</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n1 - a 和 b 有相同的标识\r\n2 - a 和 b 有相同的标识\r\n3 - a 和 b 没有相同的标识\r\n4 - a 和 b 没有相同的标识</pre>\r\n\r\n<blockquote>\r\n<p>is 与 == 区别：</p>\r\n\r\n<p>is 用于判断两个变量引用对象是否为同一个(同一块内存空间)， == 用于判断引用变量的值是否相等。</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; a = [1, 2, 3]\r\n&gt;&gt;&gt; b = a\r\n&gt;&gt;&gt; b is a \r\nTrue\r\n&gt;&gt;&gt; b == a\r\nTrue\r\n&gt;&gt;&gt; b = a[:]\r\n&gt;&gt;&gt; b is a\r\nFalse\r\n&gt;&gt;&gt; b == a\r\nTrue</pre>\r\n</blockquote>\r\n\r\n<hr />\r\n<h2>Python运算符优先级</h2>\r\n\r\n<p>以下表格列出了从最高到最低优先级的所有运算符：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>**</td>\r\n			<td>指数 (最高优先级)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>~ + -</td>\r\n			<td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>* / % //</td>\r\n			<td>乘，除，取模和取整除</td>\r\n		</tr>\r\n		<tr>\r\n			<td>+ -</td>\r\n			<td>加法减法</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt; &lt;&lt;</td>\r\n			<td>右移，左移运算符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp;</td>\r\n			<td>位 &#39;AND&#39;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>^ |</td>\r\n			<td>位运算符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;= &lt; &gt; &gt;=</td>\r\n			<td>比较运算符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;&gt; == !=</td>\r\n			<td>等于运算符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>= %= /= //= -= += *= **=</td>\r\n			<td>赋值运算符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>is is not</td>\r\n			<td>身份运算符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>in not in</td>\r\n			<td>成员运算符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>not and or</td>\r\n			<td>逻辑运算符</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>以下实例演示了Python所有运算符优先级的操作：</p>\r\n\r\n<h2>实例(Python 2.0+)</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- a = 20 b = 10 c = 15 d = 5 e = 0 e = (a + b) * c / d #( 30 * 15 ) / 5 print &quot;(a + b) * c / d 运算结果为：&quot;, e e = ((a + b) * c) / d # (30 * 15 ) / 5 print &quot;((a + b) * c) / d 运算结果为：&quot;, e e = (a + b) * (c / d); # (30) * (15/5) print &quot;(a + b) * (c / d) 运算结果为：&quot;, e e = a + (b * c) / d; # 20 + (150/5) print &quot;a + (b * c) / d 运算结果为：&quot;, e</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n(a + b) * c / d 运算结果为： 90\r\n((a + b) * c) / d 运算结果为： 90\r\n(a + b) * (c / d) 运算结果为： 90\r\na + (b * c) / d 运算结果为： 50</pre>\r\n', 0, 0, '2021-12-14 01:22:27.110438', '2021-12-14 01:22:27.118441', 5, 1);
INSERT INTO `tb_article` VALUES (31, 'article/20211214/python_LCIIZor.jpg', 'Python 条件语句', 'Python 条件语句', 'Python 条件语句', '<h1>Python&nbsp;条件语句</h1>\r\n\r\n<p>Python条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。</p>\r\n\r\n<p>可以通过下图来简单了解条件语句的执行过程:</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/if-condition.jpg\" /></p>\r\n\r\n<p>Python程序语言指定任何非0和非空（null）值为true，0 或者 null为false。</p>\r\n\r\n<p>Python 编程中 if 语句用于控制程序的执行，基本形式为：</p>\r\n\r\n<pre>\r\nif 判断条件：\r\n    执行语句&hellip;&hellip;\r\nelse：\r\n    执行语句&hellip;&hellip;</pre>\r\n\r\n<p>其中&quot;判断条件&quot;成立时（非零），则执行后面的语句，而执行内容可以多行，以缩进来区分表示同一范围。</p>\r\n\r\n<p>else 为可选语句，当需要在条件不成立时执行内容则可以执行相关语句。</p>\r\n\r\n<p>Gif 演示：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/05/006faQNTgw1f5wnm0mcxrg30ci07o47l.gif\" /></p>\r\n\r\n<p>具体例子如下：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- # 例1：if 基本用法 flag = False name = &#39;luren&#39; if name == &#39;python&#39;: # 判断变量是否为 python flag = True # 条件成立时设置标志为真 print &#39;welcome boss&#39; # 并输出欢迎信息 else: print name # 条件不成立时输出变量名称</p>\r\n\r\n<p>输出结果为：</p>\r\n\r\n<pre>\r\nluren&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 输出结果</pre>\r\n\r\n<p>if 语句的判断条件可以用&gt;（大于）、&lt;(小于)、==（等于）、&gt;=（大于等于）、&lt;=（小于等于）来表示其关系。</p>\r\n\r\n<p>当判断条件为多个值时，可以使用以下形式：</p>\r\n\r\n<pre>\r\nif 判断条件1:\r\n    执行语句1&hellip;&hellip;\r\nelif 判断条件2:\r\n    执行语句2&hellip;&hellip;\r\nelif 判断条件3:\r\n    执行语句3&hellip;&hellip;\r\nelse:\r\n    执行语句4&hellip;&hellip;</pre>\r\n\r\n<p>实例如下：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- # 例2：elif用法 num = 5 if num == 3: # 判断num的值 print &#39;boss&#39; elif num == 2: print &#39;user&#39; elif num == 1: print &#39;worker&#39; elif num &lt; 0: # 值小于零时输出 print &#39;error&#39; else: print &#39;roadman&#39; # 条件均不成立时输出</p>\r\n\r\n<p>输出结果为：</p>\r\n\r\n<pre>\r\nroadman&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 输出结果</pre>\r\n\r\n<p>由于 python 并不支持 switch 语句，所以多个条件判断，只能用 elif 来实现，如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- # 例3：if语句多个条件 num = 9 if num &gt;= 0 and num &lt;= 10: # 判断值是否在0~10之间 print &#39;hello&#39; # 输出结果: hello num = 10 if num &lt; 0 or num &gt; 10: # 判断值是否在小于0或大于10 print &#39;hello&#39; else: print &#39;undefine&#39; # 输出结果: undefine num = 8 # 判断值是否在0~5或者10~15之间 if (num &gt;= 0 and num &lt;= 5) or (num &gt;= 10 and num &lt;= 15): print &#39;hello&#39; else: print &#39;undefine&#39; # 输出结果: undefine</p>\r\n\r\n<p>当if有多个条件时可使用括号来区分判断的先后顺序，括号中的判断优先执行，此外 and 和 or 的优先级低于&gt;（大于）、&lt;（小于）等判断符号，即大于和小于在没有括号的情况下会比与或要优先判断。</p>\r\n\r\n<h2>简单的语句组</h2>\r\n\r\n<p>你也可以在同一行的位置上使用if条件判断语句，如下实例：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- var = 100 if ( var == 100 ) : print &quot;变量 var 的值为100&quot; print &quot;Good bye!&quot;</p>\r\n\r\n<p>以上代码执行输出结果如下：</p>\r\n\r\n<pre>\r\n变量 var 的值为100\r\nGood bye!</pre>\r\n', 1, 0, '2021-12-14 01:22:48.735465', '2021-12-14 01:22:50.818104', 5, 1);
INSERT INTO `tb_article` VALUES (32, 'article/20211214/python_hZzJWaB.jpg', 'Python 循环语句', 'Python 循环语句', 'Python 循环语句', '<h1>Python&nbsp;循环语句</h1>\r\n\r\n<p>本章节将向大家介绍Python的循环语句，程序在一般情况下是按顺序执行的。</p>\r\n\r\n<p>编程语言提供了各种控制结构，允许更复杂的执行路径。</p>\r\n\r\n<p>循环语句允许我们执行一个语句或语句组多次，下面是在大多数编程语言中的循环语句的一般形式：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/12/loop.png\" /></p>\r\n\r\n<p>Python 提供了 for 循环和 while 循环（在 Python 中没有 do..while 循环）:</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>循环类型</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python/python-while-loop.html\" title=\"Python WHILE 循环\">while 循环</a></td>\r\n			<td>在给定的判断条件为 true 时执行循环体，否则退出循环体。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python/python-for-loop.html\" title=\" Python FOR 循环\">for 循环</a></td>\r\n			<td>重复执行语句</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python/python-nested-loops.html\" title=\"Python 循环全套\">嵌套循环</a></td>\r\n			<td>你可以在while循环体中嵌套for循环</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>循环控制语句</h2>\r\n\r\n<p>循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>控制语句</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python/python-break-statement.html\" title=\"Python break 语句\">break 语句</a></td>\r\n			<td>在语句块执行过程中终止循环，并且跳出整个循环</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python/python-continue-statement.html\" title=\"Python  语句\">continue 语句</a></td>\r\n			<td>在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python/python-pass-statement.html\" title=\"Python pass 语句\">pass 语句</a></td>\r\n			<td>pass是空语句，是为了保持程序结构的完整性。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 0, '2021-12-14 01:23:24.539350', '2021-12-14 01:23:24.547356', 5, 1);
INSERT INTO `tb_article` VALUES (33, 'article/20211214/python_EU9AR4X.jpg', 'Python While 循环语句', 'Python While 循环语句', 'Python While 循环语句', '<h1>Python&nbsp;While 循环语句</h1>\r\n\r\n<p>Python 编程中 while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。其基本形式为：</p>\r\n\r\n<pre>\r\nwhile 判断条件(condition)：\r\n    执行语句(statements)&hellip;&hellip;</pre>\r\n\r\n<p>执行语句可以是单个语句或语句块。判断条件可以是任何表达式，任何非零、或非空（null）的值均为true。</p>\r\n\r\n<p>当判断条件假 false 时，循环结束。</p>\r\n\r\n<p>执行流程图如下：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/886A6E10-58F1-4A9B-8640-02DBEFF0EF9A.jpg\" /></p>\r\n\r\n<h3>Gif 演示 Python while 语句执行过程</h3>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/05/006faQNTgw1f5wnm06h3ug30ci08cake.gif\" /></p>\r\n\r\n<p>复杂一点:</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/loop-over-python-list-animation.gif\" /></p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python count = 0 while (count &lt; 9): print &#39;The count is:&#39;, count count = count + 1 print &quot;Good bye!&quot;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/runcode.php?filename=test_while&amp;type=python\" rel=\"noopener noreferrer\" target=\"_blank\">运行实例 &raquo;</a></p>\r\n\r\n<p>以上代码执行输出结果:</p>\r\n\r\n<pre>\r\nThe count is: 0\r\nThe count is: 1\r\nThe count is: 2\r\nThe count is: 3\r\nThe count is: 4\r\nThe count is: 5\r\nThe count is: 6\r\nThe count is: 7\r\nThe count is: 8\r\nGood bye!</pre>\r\n\r\n<p>while 语句时还有另外两个重要的命令 continue，break 来跳过循环，continue 用于跳过该次循环，break 则是用于退出循环，此外&quot;判断条件&quot;还可以是个常值，表示循环必定成立，具体用法如下：</p>\r\n\r\n<p># continue 和 break 用法 i = 1 while i &lt; 10: i += 1 if i%2 &gt; 0: # 非双数时跳过输出 continue print i # 输出双数2、4、6、8、10 i = 1 while 1: # 循环条件为1必定成立 print i # 输出1~10 i += 1 if i &gt; 10: # 当i大于10时跳出循环 break</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>无限循环</h2>\r\n\r\n<p>如果条件判断语句永远为 true，循环将会无限的执行下去，如下实例：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python # -*- coding: UTF-8 -*- var = 1 while var == 1 : # 该条件永远为true，循环将无限执行下去 num = raw_input(&quot;Enter a number :&quot;) print &quot;You entered: &quot;, num print &quot;Good bye!&quot;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\nEnter a number  :20\r\nYou entered:  20\r\nEnter a number  :29\r\nYou entered:  29\r\nEnter a number  :3\r\nYou entered:  3\r\nEnter a number between :Traceback (most recent call last):\r\n  File &quot;test.py&quot;, line 5, in &lt;module&gt;\r\n    num = raw_input(&quot;Enter a number :&quot;)\r\nKeyboardInterrupt</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>注意：</strong>以上的无限循环你可以使用 CTRL+C 来中断循环。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>循环使用 else 语句</h2>\r\n\r\n<p>在 python 中，while &hellip; else 在循环条件为 false 时执行 else 语句块：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python count = 0 while count &lt; 5: print count, &quot; is less than 5&quot; count = count + 1 else: print count, &quot; is not less than 5&quot;</p>\r\n\r\n<p>以上实例输出结果为：</p>\r\n\r\n<pre>\r\n0 is less than 5\r\n1 is less than 5\r\n2 is less than 5\r\n3 is less than 5\r\n4 is less than 5\r\n5 is not less than 5</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>简单语句组</h2>\r\n\r\n<p>类似 if 语句的语法，如果你的 while 循环体中只有一条语句，你可以将该语句与while写在同一行中， 如下所示：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python flag = 1 while (flag): print &#39;Given flag is really true!&#39; print &quot;Good bye!&quot;</p>\r\n\r\n<p><strong>注意：</strong>以上的无限循环你可以使用&nbsp;CTRL+C&nbsp;来中断循环。</p>\r\n', 2, 0, '2021-12-14 01:23:53.394733', '2021-12-14 02:35:29.865548', 5, 1);
INSERT INTO `tb_article` VALUES (34, 'article/20211214/c-mini-logo.png', 'C 简介', 'C 简介', 'C 简介', '<h1>C&nbsp;简介</h1>\r\n\r\n<p>C 语言是一种通用的高级语言，最初是由丹尼斯&middot;里奇在贝尔实验室为开发 UNIX 操作系统而设计的。C 语言最开始是于 1972 年在 DEC PDP-11 计算机上被首次实现。</p>\r\n\r\n<p>在 1978 年，布莱恩&middot;柯林汉（Brian Kernighan）和丹尼斯&middot;里奇（Dennis Ritchie）制作了 C 的第一个公开可用的描述，现在被称为 K&amp;R 标准。</p>\r\n\r\n<p>UNIX 操作系统，C编译器，和几乎所有的 UNIX 应用程序都是用 C 语言编写的。由于各种原因，C 语言现在已经成为一种广泛使用的专业语言。</p>\r\n\r\n<ul>\r\n	<li>易于学习。</li>\r\n	<li>结构化语言。</li>\r\n	<li>它产生高效率的程序。</li>\r\n	<li>它可以处理底层的活动。</li>\r\n	<li>它可以在多种计算机平台上编译。</li>\r\n</ul>\r\n\r\n<h2>关于 C</h2>\r\n\r\n<ul>\r\n	<li>C 语言是为了编写 UNIX 操作系统而被发明的。</li>\r\n	<li>C 语言是以 B 语言为基础的，B 语言大概是在 1970 年被引进的。</li>\r\n	<li>C 语言标准是于 1988 年由美国国家标准协会（ANSI，全称 American National Standard Institute）制定的。</li>\r\n	<li>截至 1973 年，UNIX 操作系统完全使用 C 语言编写。</li>\r\n	<li>目前，C 语言是最广泛使用的系统程序设计语言。</li>\r\n	<li>大多数先进的软件都是使用 C 语言实现的。</li>\r\n	<li>当今最流行的 Linux 操作系统和 RDBMS（Relational Database Management System：关系数据库管理系统） MySQL 都是使用 C 语言编写的。</li>\r\n</ul>\r\n\r\n<h2>为什么要使用 C？</h2>\r\n\r\n<p>C 语言最初是用于系统开发工作，特别是组成操作系统的程序。由于 C 语言所产生的代码运行速度与汇编语言编写的代码运行速度几乎一样，所以采用 C 语言作为系统开发语言。下面列举几个使用 C 的实例：</p>\r\n\r\n<ul>\r\n	<li>操作系统</li>\r\n	<li>语言编译器</li>\r\n	<li>汇编器</li>\r\n	<li>文本编辑器</li>\r\n	<li>打印机</li>\r\n	<li>网络驱动器</li>\r\n	<li>现代程序</li>\r\n	<li>数据库</li>\r\n	<li>语言解释器</li>\r\n	<li>实体工具</li>\r\n</ul>\r\n\r\n<h2>C 程序</h2>\r\n\r\n<p>一个 C 语言程序，可以是 3 行，也可以是数百万行，它可以写在一个或多个扩展名为&nbsp;<strong>&quot;.c&quot;</strong>&nbsp;的文本文件中，例如，<em>hello.c</em>。您可以使用&nbsp;<strong>&quot;vi&quot;</strong>、<strong>&quot;vim&quot;</strong>&nbsp;或任何其他文本编辑器来编写您的 C 语言程序。</p>\r\n\r\n<p>本教程假定您已经知道如何编辑一个文本文件，以及如何在程序文件中编写源代码。</p>\r\n\r\n<hr />\r\n<h2>C11</h2>\r\n\r\n<p>C11（也被称为C1X）指ISO标准ISO/IEC 9899:2011，是当前最新的C语言标准。在它之前的C语言标准为C99。</p>\r\n\r\n<h3>新特性</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>对齐处理（Alignment）的标准化（包括_Alignas标志符，alignof运算符，aligned_alloc函数以及&lt;stdalign.h&gt;头文件）。</p>\r\n	</li>\r\n	<li>\r\n	<p>_Noreturn 函数标记，类似于 gcc 的 __attribute__((noreturn))。</p>\r\n	</li>\r\n	<li>\r\n	<p>_Generic 关键字。</p>\r\n	</li>\r\n	<li>\r\n	<p>多线程（Multithreading）支持，包括：<br />\r\n	_Thread_local存储类型标识符，&lt;threads.h&gt;头文件，里面包含了线程的创建和管理函数。<br />\r\n	_Atomic类型修饰符和&lt;stdatomic.h&gt;头文件。</p>\r\n	</li>\r\n	<li>\r\n	<p>增强的Unicode的支持。基于C Unicode技术报告ISO/IEC TR 19769:2004，增强了对Unicode的支持。包括为UTF-16/UTF-32编码增加了char16_t和char32_t数据类型，提供了包含unicode字符串转换函数的头文件&lt;uchar.h&gt;。</p>\r\n	</li>\r\n	<li>\r\n	<p>删除了 gets() 函数，使用一个新的更安全的函数gets_s()替代。</p>\r\n	</li>\r\n	<li>\r\n	<p>增加了边界检查函数接口，定义了新的安全的函数，例如 fopen_s()，strcat_s() 等等。</p>\r\n	</li>\r\n	<li>\r\n	<p>增加了更多浮点处理宏(宏)。</p>\r\n	</li>\r\n	<li>\r\n	<p>匿名结构体/联合体支持。这个在gcc早已存在，C11将其引入标准。</p>\r\n	</li>\r\n	<li>\r\n	<p>静态断言（Static assertions），_Static_assert()，在解释 #if 和 #error 之后被处理。</p>\r\n	</li>\r\n	<li>\r\n	<p>新的 fopen() 模式，(&quot;&hellip;x&quot;)。类似 POSIX 中的 O_CREAT|O_EXCL，在文件锁中比较常用。</p>\r\n	</li>\r\n	<li>\r\n	<p>新增 quick_exit() 函数作为第三种终止程序的方式。当 exit()失败时可以做最少的清理工作。</p>\r\n	</li>\r\n</ul>\r\n', 0, 0, '2021-12-14 01:28:19.757983', '2021-12-14 01:28:19.765960', 8, 3);
INSERT INTO `tb_article` VALUES (35, 'article/20211214/c-mini-logo_W12JEii.png', 'C 环境设置', 'C 环境设置', 'C 环境设置', '<h1>C&nbsp;环境设置</h1>\r\n\r\n<h2>本地环境设置</h2>\r\n\r\n<p>如果您想要设置 C 语言环境，您需要确保电脑上有以下两款可用的软件，文本编辑器和 C 编译器。</p>\r\n\r\n<h2>文本编辑器</h2>\r\n\r\n<p>这将用于输入您的程序。文本编辑器包括 Windows Notepad、OS Edit command、Brief、Epsilon、EMACS 和 vim/vi。</p>\r\n\r\n<p>文本编辑器的名称和版本在不同的操作系统上可能会有所不同。例如，Notepad 通常用于 Windows 操作系统上，vim/vi 可用于 Linux/UNIX 操作系统上。</p>\r\n\r\n<p>通过编辑器创建的文件通常称为源文件，源文件包含程序源代码。C 程序的源文件通常使用扩展名&nbsp;.c。</p>\r\n\r\n<p>在开始编程之前，请确保您有一个文本编辑器，且有足够的经验来编写一个计算机程序，然后把它保存在一个文件中，编译并执行它。</p>\r\n\r\n<h2>C 编译器</h2>\r\n\r\n<p>写在源文件中的源代码是人类可读的源。它需要&quot;编译&quot;，转为机器语言，这样 CPU 可以按给定指令执行程序。</p>\r\n\r\n<p>C 语言编译器用于把源代码编译成最终的可执行程序。这里假设您已经对编程语言编译器有基本的了解了。</p>\r\n\r\n<p>最常用的免费可用的编译器是 GNU 的 C/C++ 编译器，如果您使用的是 HP 或 Solaris，则可以使用各自操作系统上的编译器。</p>\r\n\r\n<p>以下部分将指导您如何在不同的操作系统上安装 GNU 的 C/C++ 编译器。这里同时提到 C/C++，主要是因为 GNU 的 gcc 编译器适合于 C 和 C++ 编程语言。</p>\r\n\r\n<h3>UNIX/Linux 上的安装</h3>\r\n\r\n<p>如果您使用的是&nbsp;<strong>Linux 或 UNIX</strong>，请在命令行使用下面的命令来检查您的系统上是否安装了 GCC：</p>\r\n\r\n<pre>\r\n$ gcc -v</pre>\r\n\r\n<p>如果您的计算机上已经安装了 GNU 编译器，则会显示如下消息：</p>\r\n\r\n<pre>\r\nUsing built-in specs.\r\nTarget: i386-redhat-linux\r\nConfigured with: ../configure --prefix=/usr .......\r\nThread model: posix\r\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)</pre>\r\n\r\n<p>如果未安装 GCC，那么请按照&nbsp;<a href=\"http://gcc.gnu.org/install/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">http://gcc.gnu.org/install/</a>&nbsp;上的详细说明安装 GCC。</p>\r\n\r\n<p>本教程是基于 Linux 编写的，所有给定的实例都已在 Cent OS Linux 系统上编译过。</p>\r\n\r\n<h3>Mac OS 上的安装</h3>\r\n\r\n<p>如果您使用的是 Mac OS X，最快捷的获取 GCC 的方法是从苹果的网站上下载 Xcode 开发环境，并按照安装说明进行安装。一旦安装上 Xcode，您就能使用 GNU 编译器。</p>\r\n\r\n<p>Xcode 目前可从&nbsp;<a href=\"http://developer.apple.com/technologies/tools/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">developer.apple.com/technologies/tools/</a>&nbsp;上下载。</p>\r\n\r\n<h3>Windows 上的安装</h3>\r\n\r\n<p>为了在 Windows 上安装 GCC，您需要安装 MinGW。为了安装 MinGW，请访问 MinGW 的主页&nbsp;<a href=\"http://mingw-w64.org/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">mingw-w64.org</a>，进入 MinGW 下载页面，下载最新版本的 MinGW 安装程序，命名格式为 MinGW-&lt;version&gt;.exe。</p>\r\n\r\n<p>当安装 MinGW 时，您至少要安装 gcc-core、gcc-g++、binutils 和 MinGW runtime，但是一般情况下都会安装更多其他的项。</p>\r\n\r\n<p>添加您安装的 MinGW 的 bin 子目录到您的&nbsp;<strong>PATH</strong>&nbsp;环境变量中，这样您就可以在命令行中通过简单的名称来指定这些工具。</p>\r\n\r\n<p>当完成安装时，您可以从 Windows 命令行上运行 gcc、g++、ar、ranlib、dlltool 和其他一些 GNU 工具。</p>\r\n', 0, 0, '2021-12-14 01:29:08.395013', '2021-12-14 01:29:08.395013', 8, 3);
INSERT INTO `tb_article` VALUES (36, 'article/20211214/c-mini-logo_1SaRsDt.png', 'C 程序结构', 'C 程序结构', 'C 程序结构', '<h1>C&nbsp;程序结构</h1>\r\n\r\n<p>在我们学习 C 语言的基本构建块之前，让我们先来看看一个最小的 C 程序结构，在接下来的章节中可以以此作为参考。</p>\r\n\r\n<h2>C Hello World 实例</h2>\r\n\r\n<p>C 程序主要包括以下部分：</p>\r\n\r\n<ul>\r\n	<li>预处理器指令</li>\r\n	<li>函数</li>\r\n	<li>变量</li>\r\n	<li>语句 &amp; 表达式</li>\r\n	<li>注释</li>\r\n</ul>\r\n\r\n<p>让我们看一段简单的代码，可以输出单词 &quot;Hello World&quot;：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; int main() { /* 我的第一个 C 程序 */ printf(&quot;Hello, World! \\n&quot;); return 0; }</p>\r\n\r\n<p>接下来我们讲解一下上面这段程序：</p>\r\n\r\n<ol>\r\n	<li>程序的第一行&nbsp;<em>#include &lt;stdio.h&gt;</em>&nbsp;是预处理器指令，告诉 C 编译器在实际编译之前要包含 stdio.h 文件。</li>\r\n	<li>下一行&nbsp;<em>int main()</em>&nbsp;是主函数，程序从这里开始执行。</li>\r\n	<li>下一行 /*...*/ 将会被编译器忽略，这里放置程序的注释内容。它们被称为程序的注释。</li>\r\n	<li>下一行&nbsp;<em>printf(...)</em>&nbsp;是 C 中另一个可用的函数，会在屏幕上显示消息 &quot;Hello, World!&quot;。</li>\r\n	<li>下一行&nbsp;<strong>return 0;</strong>&nbsp;终止 main() 函数，并返回值 0。</li>\r\n</ol>\r\n\r\n<h2>编译 &amp; 执行 C 程序</h2>\r\n\r\n<p>接下来让我们看看如何把源代码保存在一个文件中，以及如何编译并运行它。下面是简单的步骤：</p>\r\n\r\n<ol>\r\n	<li>打开一个文本编辑器，添加上述代码。</li>\r\n	<li>保存文件为&nbsp;<em>hello.c</em>。</li>\r\n	<li>打开命令提示符，进入到保存文件所在的目录。</li>\r\n	<li>键入&nbsp;<em>gcc hello.c</em>，输入回车，编译代码。</li>\r\n	<li>如果代码中没有错误，命令提示符会跳到下一行，并生成&nbsp;<em>a.out</em>&nbsp;可执行文件。</li>\r\n	<li>现在，键入&nbsp;<em>a.out</em>&nbsp;来执行程序。</li>\r\n	<li>您可以看到屏幕上显示&nbsp;<em>&quot;Hello World&quot;</em>。</li>\r\n</ol>\r\n\r\n<pre>\r\n$ gcc hello.c\r\n$ ./a.out\r\nHello, World!</pre>\r\n\r\n<p>请确保您的路径中已包含 gcc 编译器，并确保在包含源文件 hello.c 的目录中运行它。</p>\r\n\r\n<p>如果是多个 c 代码的源码文件，编译方法如下：</p>\r\n\r\n<pre>\r\n$ gcc test1.c test2.c -o main.out\r\n$ ./main.out</pre>\r\n\r\n<p>test1.c 与 test2.c 是两个源代码文件。</p>\r\n', 0, 0, '2021-12-14 01:30:35.271756', '2021-12-14 01:30:35.271756', 8, 3);
INSERT INTO `tb_article` VALUES (37, 'article/20211214/c-mini-logo_y5jEDur.png', 'C 基本语法', 'C 基本语法', 'C 基本语法', '<h1>C&nbsp;基本语法</h1>\r\n\r\n<p>我们已经看过 C 程序的基本结构，这将有助于我们理解 C 语言的其他基本的构建块。</p>\r\n\r\n<h2>C 的令牌（Token）</h2>\r\n\r\n<p>C 程序由各种令牌组成，令牌可以是关键字、标识符、常量、字符串值，或者是一个符号。例如，下面的 C 语句包括五个令牌：</p>\r\n\r\n<pre>\r\nprintf(&quot;Hello, World! \\n&quot;);</pre>\r\n\r\n<p>这五个令牌分别是：</p>\r\n\r\n<pre>\r\nprintf\r\n(\r\n&quot;Hello, World! \\n&quot;\r\n)\r\n;</pre>\r\n\r\n<h2>分号 ;</h2>\r\n\r\n<p>在 C 程序中，分号是语句结束符。也就是说，每个语句必须以分号结束。它表明一个逻辑实体的结束。</p>\r\n\r\n<p>例如，下面是两个不同的语句：</p>\r\n\r\n<pre>\r\nprintf(&quot;Hello, World! \\n&quot;);\r\nreturn 0;</pre>\r\n\r\n<h2>注释</h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>C 语言有两种注释方式：</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n// 单行注释</pre>\r\n\r\n<p>以&nbsp;//&nbsp;开始的单行注释，这种注释可以单独占一行。</p>\r\n\r\n<pre>\r\n/* 单行注释 */\r\n/* \r\n 多行注释\r\n 多行注释\r\n 多行注释\r\n */</pre>\r\n\r\n<p>/* */&nbsp;这种格式的注释可以单行或多行。</p>\r\n\r\n<p>您不能在注释内嵌套注释，注释也不能出现在字符串或字符值中。</p>\r\n\r\n<h2>标识符</h2>\r\n\r\n<p>C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。</p>\r\n\r\n<p>C 标识符内不允许出现标点字符，比如 @、$ 和 %。C 是<strong>区分大小写</strong>的编程语言。因此，在 C 中，<em>Manpower</em>&nbsp;和&nbsp;<em>manpower</em>&nbsp;是两个不同的标识符。下面列出几个有效的标识符：</p>\r\n\r\n<pre>\r\nmohd       zara    abc   move_name  a_123\r\nmyname50   _temp   j     a23b9      retVal</pre>\r\n\r\n<h2>关键字</h2>\r\n\r\n<p>下表列出了 C 中的保留字。这些保留字不能作为常量名、变量名或其他标识符名称。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>关键字</th>\r\n			<th>说明</th>\r\n		</tr>\r\n		<tr>\r\n			<td>auto</td>\r\n			<td>声明自动变量</td>\r\n		</tr>\r\n		<tr>\r\n			<td>break</td>\r\n			<td>跳出当前循环</td>\r\n		</tr>\r\n		<tr>\r\n			<td>case</td>\r\n			<td>开关语句分支</td>\r\n		</tr>\r\n		<tr>\r\n			<td>char</td>\r\n			<td>声明字符型变量或函数返回值类型</td>\r\n		</tr>\r\n		<tr>\r\n			<td>const</td>\r\n			<td>定义常量，如果一个变量被 const 修饰，那么它的值就不能再被改变</td>\r\n		</tr>\r\n		<tr>\r\n			<td>continue</td>\r\n			<td>结束当前循环，开始下一轮循环</td>\r\n		</tr>\r\n		<tr>\r\n			<td>default</td>\r\n			<td>开关语句中的&quot;其它&quot;分支</td>\r\n		</tr>\r\n		<tr>\r\n			<td>do</td>\r\n			<td>循环语句的循环体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>double</td>\r\n			<td>声明双精度浮点型变量或函数返回值类型</td>\r\n		</tr>\r\n		<tr>\r\n			<td>else</td>\r\n			<td>条件语句否定分支（与 if 连用）</td>\r\n		</tr>\r\n		<tr>\r\n			<td>enum</td>\r\n			<td>声明枚举类型</td>\r\n		</tr>\r\n		<tr>\r\n			<td>extern</td>\r\n			<td>声明变量或函数是在其它文件或本文件的其他位置定义</td>\r\n		</tr>\r\n		<tr>\r\n			<td>float</td>\r\n			<td>声明浮点型变量或函数返回值类型</td>\r\n		</tr>\r\n		<tr>\r\n			<td>for</td>\r\n			<td>一种循环语句</td>\r\n		</tr>\r\n		<tr>\r\n			<td>goto</td>\r\n			<td>无条件跳转语句</td>\r\n		</tr>\r\n		<tr>\r\n			<td>if</td>\r\n			<td>条件语句</td>\r\n		</tr>\r\n		<tr>\r\n			<td>int</td>\r\n			<td>声明整型变量或函数</td>\r\n		</tr>\r\n		<tr>\r\n			<td>long</td>\r\n			<td>声明长整型变量或函数返回值类型</td>\r\n		</tr>\r\n		<tr>\r\n			<td>register</td>\r\n			<td>声明寄存器变量</td>\r\n		</tr>\r\n		<tr>\r\n			<td>return</td>\r\n			<td>子程序返回语句（可以带参数，也可不带参数）</td>\r\n		</tr>\r\n		<tr>\r\n			<td>short</td>\r\n			<td>声明短整型变量或函数</td>\r\n		</tr>\r\n		<tr>\r\n			<td>signed</td>\r\n			<td>声明有符号类型变量或函数</td>\r\n		</tr>\r\n		<tr>\r\n			<td>sizeof</td>\r\n			<td>计算数据类型或变量长度（即所占字节数）</td>\r\n		</tr>\r\n		<tr>\r\n			<td>static</td>\r\n			<td>声明静态变量</td>\r\n		</tr>\r\n		<tr>\r\n			<td>struct</td>\r\n			<td>声明结构体类型</td>\r\n		</tr>\r\n		<tr>\r\n			<td>switch</td>\r\n			<td>用于开关语句</td>\r\n		</tr>\r\n		<tr>\r\n			<td>typedef</td>\r\n			<td>用以给数据类型取别名</td>\r\n		</tr>\r\n		<tr>\r\n			<td>unsigned</td>\r\n			<td>声明无符号类型变量或函数</td>\r\n		</tr>\r\n		<tr>\r\n			<td>union</td>\r\n			<td>声明共用体类型</td>\r\n		</tr>\r\n		<tr>\r\n			<td>void</td>\r\n			<td>声明函数无返回值或无参数，声明无类型指针</td>\r\n		</tr>\r\n		<tr>\r\n			<td>volatile</td>\r\n			<td>说明变量在程序执行中可被隐含地改变</td>\r\n		</tr>\r\n		<tr>\r\n			<td>while</td>\r\n			<td>循环语句的循环条件</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>C99 新增关键字</h3>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td><tt>_Bool</tt></td>\r\n			<td><tt>_Complex</tt></td>\r\n			<td><tt>_Imaginary</tt></td>\r\n			<td><tt>inline</tt></td>\r\n			<td><tt>restrict</tt></td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>C11 新增关键字</h3>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td><tt>_Alignas</tt></td>\r\n			<td><tt>_Alignof</tt></td>\r\n			<td><tt>_Atomic</tt></td>\r\n			<td><tt>_Generic</tt></td>\r\n			<td><tt>_Noreturn</tt></td>\r\n		</tr>\r\n		<tr>\r\n			<td><tt>_Static_assert</tt></td>\r\n			<td><tt>_Thread_local</tt></td>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>C 中的空格</h2>\r\n\r\n<p>只包含空格的行，被称为空白行，可能带有注释，C 编译器会完全忽略它。</p>\r\n\r\n<p>在 C 中，空格用于描述空白符、制表符、换行符和注释。空格分隔语句的各个部分，让编译器能识别语句中的某个元素（比如 int）在哪里结束，下一个元素在哪里开始。因此，在下面的语句中：</p>\r\n\r\n<pre>\r\nint age;</pre>\r\n\r\n<p>在这里，int 和 age 之间必须至少有一个空格字符（通常是一个空白符），这样编译器才能够区分它们。另一方面，在下面的语句中：</p>\r\n\r\n<pre>\r\nfruit = apples + oranges;   // 获取水果的总数</pre>\r\n\r\n<p>fruit 和 =，或者 = 和 apples 之间的空格字符不是必需的，但是为了增强可读性，您可以根据需要适当增加一些空格。</p>\r\n', 0, 0, '2021-12-14 01:31:14.622273', '2021-12-14 01:31:14.629985', 8, 3);
INSERT INTO `tb_article` VALUES (38, 'article/20211214/c-mini-logo_sjDXLd0.png', 'C 数据类型', 'C 数据类型', 'C 数据类型', '<h1>C&nbsp;数据类型</h1>\r\n\r\n<p>在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。</p>\r\n\r\n<p>C 中的类型可分为以下几种：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>序号</th>\r\n			<th>类型与描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><strong>基本类型：</strong><br />\r\n			它们是算术类型，包括两种类型：整数类型和浮点类型。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><strong>枚举类型：</strong><br />\r\n			它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><strong>void 类型：</strong><br />\r\n			类型说明符&nbsp;<em>void</em>&nbsp;表明没有可用的值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td><strong>派生类型：</strong><br />\r\n			它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>数组类型和结构类型统称为聚合类型。函数的类型指的是函数返回值的类型。在本章节接下来的部分我们将介绍基本类型，其他几种类型会在后边几个章节中进行讲解。</p>\r\n\r\n<h2>整数类型</h2>\r\n\r\n<p>下表列出了关于标准整数类型的存储大小和值范围的细节：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>类型</th>\r\n			<th>存储大小</th>\r\n			<th>值范围</th>\r\n		</tr>\r\n		<tr>\r\n			<td>char</td>\r\n			<td>1 字节</td>\r\n			<td>-128 到 127 或 0 到 255</td>\r\n		</tr>\r\n		<tr>\r\n			<td>unsigned char</td>\r\n			<td>1 字节</td>\r\n			<td>0 到 255</td>\r\n		</tr>\r\n		<tr>\r\n			<td>signed char</td>\r\n			<td>1 字节</td>\r\n			<td>-128 到 127</td>\r\n		</tr>\r\n		<tr>\r\n			<td>int</td>\r\n			<td>2 或 4 字节</td>\r\n			<td>-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td>\r\n		</tr>\r\n		<tr>\r\n			<td>unsigned int</td>\r\n			<td>2 或 4 字节</td>\r\n			<td>0 到 65,535 或 0 到 4,294,967,295</td>\r\n		</tr>\r\n		<tr>\r\n			<td>short</td>\r\n			<td>2 字节</td>\r\n			<td>-32,768 到 32,767</td>\r\n		</tr>\r\n		<tr>\r\n			<td>unsigned short</td>\r\n			<td>2 字节</td>\r\n			<td>0 到 65,535</td>\r\n		</tr>\r\n		<tr>\r\n			<td>long</td>\r\n			<td>4 字节</td>\r\n			<td>-2,147,483,648 到 2,147,483,647</td>\r\n		</tr>\r\n		<tr>\r\n			<td>unsigned long</td>\r\n			<td>4 字节</td>\r\n			<td>0 到 4,294,967,295</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<blockquote>\r\n<p>注意，各种类型的存储大小与系统位数有关，但目前通用的以64位系统为主。</p>\r\n\r\n<p>以下列出了32位系统与64位系统的存储大小的差别（windows 相同）：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/09/32-64.jpg\" style=\"width:70%\" /></p>\r\n</blockquote>\r\n\r\n<p>为了得到某个类型或某个变量在特定平台上的准确大小，您可以使用&nbsp;<strong>sizeof</strong>&nbsp;运算符。表达式&nbsp;<em>sizeof(type)</em>&nbsp;得到对象或类型的存储字节大小。下面的实例演示了获取 int 类型的大小：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; #include &lt;limits.h&gt; int main() { printf(&quot;int 存储大小 : %lu \\n&quot;, sizeof(int)); return 0; }</p>\r\n\r\n<p><strong>%lu</strong>&nbsp;为 32 位无符号整数，详细说明查看&nbsp;<a href=\"https://www.runoob.com/cprogramming/c-function-printf.html\" rel=\"noopener noreferrer\" target=\"_blank\">C 库函数 - printf()</a>。</p>\r\n\r\n<p>当您在 Linux 上编译并执行上面的程序时，它会产生下列结果：</p>\r\n\r\n<pre>\r\nint 存储大小 : 4 </pre>\r\n\r\n<h2>浮点类型</h2>\r\n\r\n<p>下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>类型</th>\r\n			<th>存储大小</th>\r\n			<th>值范围</th>\r\n			<th>精度</th>\r\n		</tr>\r\n		<tr>\r\n			<td>float</td>\r\n			<td>4 字节</td>\r\n			<td>1.2E-38 到 3.4E+38</td>\r\n			<td>6 位有效位</td>\r\n		</tr>\r\n		<tr>\r\n			<td>double</td>\r\n			<td>8 字节</td>\r\n			<td>2.3E-308 到 1.7E+308</td>\r\n			<td>15 位有效位</td>\r\n		</tr>\r\n		<tr>\r\n			<td>long double</td>\r\n			<td>16 字节</td>\r\n			<td>3.4E-4932 到 1.1E+4932</td>\r\n			<td>19 位有效位</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>头文件 float.h 定义了宏，在程序中可以使用这些值和其他有关实数二进制表示的细节。下面的实例将输出浮点类型占用的存储空间以及它的范围值：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; #include &lt;float.h&gt; int main() { printf(&quot;float 存储最大字节数 : %lu \\n&quot;, sizeof(float)); printf(&quot;float 最小值: %E\\n&quot;, FLT_MIN ); printf(&quot;float 最大值: %E\\n&quot;, FLT_MAX ); printf(&quot;精度值: %d\\n&quot;, FLT_DIG ); return 0; }</p>\r\n\r\n<p><strong>%E</strong>&nbsp;为以指数形式输出单、双精度实数，详细说明查看&nbsp;<a href=\"https://www.runoob.com/cprogramming/c-function-printf.html\" rel=\"noopener noreferrer\" target=\"_blank\">C 库函数 - printf()</a>。</p>\r\n\r\n<p>当您在 Linux 上编译并执行上面的程序时，它会产生下列结果：</p>\r\n\r\n<pre>\r\nfloat 存储最大字节数 : 4 \r\nfloat 最小值: 1.175494E-38\r\nfloat 最大值: 3.402823E+38\r\n精度值: 6</pre>\r\n\r\n<h2>void 类型</h2>\r\n\r\n<p>void 类型指定没有可用的值。它通常用于以下三种情况下：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>序号</th>\r\n			<th>类型与描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><strong>函数返回为空</strong><br />\r\n			C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如&nbsp;<strong>void exit (int status);</strong></td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><strong>函数参数为空</strong><br />\r\n			C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如&nbsp;<strong>int rand(void);</strong></td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><strong>指针指向 void</strong><br />\r\n			类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数&nbsp;<strong>void *malloc( size_t size );</strong>&nbsp;返回指向 void 的指针，可以转换为任何数据类型。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>如果现在您还是无法完全理解 void 类型，不用太担心，在后续的章节中我们将会详细讲解这些概念。</p>\r\n', 0, 0, '2021-12-14 01:32:07.401551', '2021-12-14 01:32:07.401551', 8, 3);
INSERT INTO `tb_article` VALUES (39, 'article/20211214/c-mini-logo_1W8SYQn.png', 'C 变量', 'C 变量', 'C 变量', '<h1>C&nbsp;变量</h1>\r\n\r\n<p>变量其实只不过是程序可操作的存储区的名称。C 中每个变量都有特定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。</p>\r\n\r\n<p>变量的名称可以由字母、数字和下划线字符组成。它必须以字母或下划线开头。大写字母和小写字母是不同的，因为 C 是大小写敏感的。基于前一章讲解的基本类型，有以下几种基本的变量类型：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>类型</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>char</td>\r\n			<td>通常是一个字节（八位）, 这是一个整数类型。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>int</td>\r\n			<td>整型，4 个字节，取值范围 -2147483648 到 2147483647。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>float</td>\r\n			<td>\r\n			<p>单精度浮点值。单精度是这样的格式，1位符号，8位指数，23位小数。</p>\r\n\r\n			<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/09/v2-749cc641eb4d5dafd085e8c23f8826aa_hd.png\" /></p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>double</td>\r\n			<td>\r\n			<p>双精度浮点值。双精度是1位符号，11位指数，52位小数。</p>\r\n\r\n			<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/09/v2-48240f0e1e0dd33ec89100cbe2d30707_hd.png\" /></p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>void</td>\r\n			<td>表示类型的缺失。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>C 语言也允许定义各种其他类型的变量，比如枚举、指针、数组、结构、共用体等等，这将会在后续的章节中进行讲解，本章节我们先讲解基本变量类型。</p>\r\n\r\n<h2>C 中的变量定义</h2>\r\n\r\n<p>变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。变量定义指定一个数据类型，并包含了该类型的一个或多个变量的列表，如下所示：</p>\r\n\r\n<pre>\r\ntype variable_list;</pre>\r\n\r\n<p>在这里，<strong>type</strong>&nbsp;必须是一个有效的 C 数据类型，可以是 char、w_char、int、float、double 或任何用户自定义的对象，<strong>variable_list</strong>&nbsp;可以由一个或多个标识符名称组成，多个标识符之间用逗号分隔。下面列出几个有效的声明：</p>\r\n\r\n<pre>\r\nint    i, j, k;\r\nchar   c, ch;\r\nfloat  f, salary;\r\ndouble d;</pre>\r\n\r\n<p>行&nbsp;<strong>int i, j, k;</strong>&nbsp;声明并定义了变量 i、j 和 k，这指示编译器创建类型为 int 的名为 i、j、k 的变量。</p>\r\n\r\n<p>变量可以在声明的时候被初始化（指定一个初始值）。初始化器由一个等号，后跟一个常量表达式组成，如下所示：</p>\r\n\r\n<pre>\r\ntype variable_name = value;</pre>\r\n\r\n<p>下面列举几个实例：</p>\r\n\r\n<pre>\r\nextern int d = 3, f = 5;    // d 和 f 的声明与初始化\r\nint d = 3, f = 5;           // 定义并初始化 d 和 f\r\nbyte z = 22;                // 定义并初始化 z\r\nchar x = &#39;x&#39;;               // 变量 x 的值为 &#39;x&#39;</pre>\r\n\r\n<p>不带初始化的定义：带有静态存储持续时间的变量会被隐式初始化为 NULL（所有字节的值都是 0），其他所有变量的初始值是未定义的。</p>\r\n\r\n<h2>C 中的变量声明</h2>\r\n\r\n<p>变量声明向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。</p>\r\n\r\n<p>变量的声明有两种情况：</p>\r\n\r\n<ul>\r\n	<li>1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。</li>\r\n	<li>2、另一种是不需要建立存储空间的，通过使用extern关键字声明变量名而不定义它。 例如：extern int a 其中变量 a 可以在别的文件中定义的。</li>\r\n	<li>除非有extern关键字，否则都是变量的定义。</li>\r\n</ul>\r\n\r\n<pre>\r\nextern int i; //声明，不是定义\r\nint i; //声明，也是定义</pre>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>尝试下面的实例，其中，变量在头部就已经被声明，但是定义与初始化在主函数内：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; // 函数外定义变量 x 和 y int x; int y; int addtwonum() { // 函数内声明变量 x 和 y 为外部变量 extern int x; extern int y; // 给外部变量（全局变量）x 和 y 赋值 x = 1; y = 2; return x+y; } int main() { int result; // 调用函数 addtwonum result = addtwonum(); printf(&quot;result 为: %d&quot;,result); return 0; }</p>\r\n\r\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\r\n\r\n<pre>\r\nresult 为: 3</pre>\r\n\r\n<p>如果需要在一个源文件中引用另外一个源文件中定义的变量，我们只需在引用的文件中将变量加上 extern 关键字的声明即可。</p>\r\n\r\n<h2>addtwonum.c 文件代码：</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; /*外部变量声明*/ extern int x ; extern int y ; int addtwonum() { return x+y; }</p>\r\n\r\n<h2>test.c 文件代码：</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; /*定义两个全局变量*/ int x=1; int y=2; int addtwonum(); int main(void) { int result; result = addtwonum(); printf(&quot;result 为: %d\\n&quot;,result); return 0; }</p>\r\n\r\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\r\n\r\n<pre>\r\n$ gcc addtwonum.c test.c -o main\r\n$ ./main\r\nresult 为: 3</pre>\r\n\r\n<h2>C 中的左值（Lvalues）和右值（Rvalues）</h2>\r\n\r\n<p>C 中有两种类型的表达式：</p>\r\n\r\n<ol>\r\n	<li><strong>左值（lvalue）：</strong>指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li>\r\n	<li><strong>右值（rvalue）：</strong>术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li>\r\n</ol>\r\n\r\n<p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。下面是一个有效的语句：</p>\r\n\r\n<pre>\r\nint g = 20;</pre>\r\n\r\n<p>但是下面这个就不是一个有效的语句，会生成编译时错误：</p>\r\n\r\n<pre>\r\n10 = 20;</pre>\r\n', 0, 0, '2021-12-14 01:32:47.947695', '2021-12-14 01:32:47.955690', 8, 3);
INSERT INTO `tb_article` VALUES (40, 'article/20211214/c-mini-logo_id6b6Hu.png', 'C 常量', 'C 常量', 'C 常量', '<h1>C&nbsp;常量</h1>\r\n\r\n<p>常量是固定值，在程序执行期间不会改变。这些固定的值，又叫做<strong>字面量</strong>。</p>\r\n\r\n<p>常量可以是任何的基本数据类型，比如整数常量、浮点常量、字符常量，或字符串字面值，也有枚举常量。</p>\r\n\r\n<p><strong>常量</strong>就像是常规的变量，只不过常量的值在定义后不能进行修改。</p>\r\n\r\n<h2>整数常量</h2>\r\n\r\n<p>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。</p>\r\n\r\n<p>整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意。</p>\r\n\r\n<p>下面列举几个整数常量的实例：</p>\r\n\r\n<pre>\r\n212         /* 合法的 */\r\n215u        /* 合法的 */\r\n0xFeeL      /* 合法的 */\r\n078         /* 非法的：8 不是八进制的数字 */\r\n032UU       /* 非法的：不能重复后缀 */</pre>\r\n\r\n<p>以下是各种类型的整数常量的实例：</p>\r\n\r\n<pre>\r\n85         /* 十进制 */\r\n0213       /* 八进制 */\r\n0x4b       /* 十六进制 */\r\n30         /* 整数 */\r\n30u        /* 无符号整数 */\r\n30l        /* 长整数 */\r\n30ul       /* 无符号长整数 */</pre>\r\n\r\n<h2>浮点常量</h2>\r\n\r\n<p>浮点常量由整数部分、小数点、小数部分和指数部分组成。您可以使用小数形式或者指数形式来表示浮点常量。</p>\r\n\r\n<p>当使用小数形式表示时，必须包含整数部分、小数部分，或同时包含两者。当使用指数形式表示时， 必须包含小数点、指数，或同时包含两者。带符号的指数是用 e 或 E 引入的。</p>\r\n\r\n<p>下面列举几个浮点常量的实例：</p>\r\n\r\n<pre>\r\n3.14159       /* 合法的 */\r\n314159E-5L    /* 合法的 */\r\n510E          /* 非法的：不完整的指数 */\r\n210f          /* 非法的：没有小数或指数 */\r\n.e55          /* 非法的：缺少整数或分数 */</pre>\r\n\r\n<h2>字符常量</h2>\r\n\r\n<p>字符常量是括在单引号中，例如，&#39;x&#39; 可以存储在&nbsp;<strong>char</strong>&nbsp;类型的简单变量中。</p>\r\n\r\n<p>字符常量可以是一个普通的字符（例如 &#39;x&#39;）、一个转义序列（例如 &#39;\\t&#39;），或一个通用的字符（例如 &#39;\\u02C0&#39;）。</p>\r\n\r\n<p>在 C 中，有一些特定的字符，当它们前面有反斜杠时，它们就具有特殊的含义，被用来表示如换行符（\\n）或制表符（\\t）等。下表列出了一些这样的转义序列码：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>转义序列</th>\r\n			<th>含义</th>\r\n		</tr>\r\n		<tr>\r\n			<td>\\\\</td>\r\n			<td>\\ 字符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\&#39;</td>\r\n			<td>&#39; 字符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\&quot;</td>\r\n			<td>&quot; 字符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\?</td>\r\n			<td>? 字符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\a</td>\r\n			<td>警报铃声</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\b</td>\r\n			<td>退格键</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\f</td>\r\n			<td>换页符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\n</td>\r\n			<td>换行符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\r</td>\r\n			<td>回车</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\t</td>\r\n			<td>水平制表符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\v</td>\r\n			<td>垂直制表符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\ooo</td>\r\n			<td>一到三位的八进制数</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\xhh . . .</td>\r\n			<td>一个或多个数字的十六进制数</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>下面的实例显示了一些转义序列字符：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; int main() { printf(&quot;Hello\\tWorld\\n\\n&quot;); return 0; }</p>\r\n\r\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\r\n\r\n<pre>\r\nHello   World\r\n</pre>\r\n\r\n<h2>字符串常量</h2>\r\n\r\n<p>字符串字面值或常量是括在双引号 &quot;&quot; 中的。一个字符串包含类似于字符常量的字符：普通的字符、转义序列和通用的字符。</p>\r\n\r\n<p>您可以使用空格做分隔符，把一个很长的字符串常量进行分行。</p>\r\n\r\n<p>下面的实例显示了一些字符串常量。下面这三种形式所显示的字符串是相同的。</p>\r\n\r\n<pre>\r\n&quot;hello, dear&quot;\r\n\r\n&quot;hello, \\\r\n\r\ndear&quot;\r\n\r\n&quot;hello, &quot; &quot;d&quot; &quot;ear&quot;</pre>\r\n\r\n<h2>定义常量</h2>\r\n\r\n<p>在 C 中，有两种简单的定义常量的方式：</p>\r\n\r\n<ol>\r\n	<li>使用&nbsp;<strong>#define</strong>&nbsp;预处理器。</li>\r\n	<li>使用&nbsp;<strong>const</strong>&nbsp;关键字。</li>\r\n</ol>\r\n\r\n<h3>#define 预处理器</h3>\r\n\r\n<p>下面是使用 #define 预处理器定义常量的形式：</p>\r\n\r\n<pre>\r\n#define identifier value</pre>\r\n\r\n<p>具体请看下面的实例：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; #define LENGTH 10 #define WIDTH 5 #define NEWLINE &#39;\\n&#39; int main() { int area; area = LENGTH * WIDTH; printf(&quot;value of area : %d&quot;, area); printf(&quot;%c&quot;, NEWLINE); return 0; }</p>\r\n\r\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\r\n\r\n<pre>\r\nvalue of area : 50</pre>\r\n\r\n<h3>const 关键字</h3>\r\n\r\n<p>您可以使用&nbsp;<strong>const</strong>&nbsp;前缀声明指定类型的常量，如下所示：</p>\r\n\r\n<pre>\r\nconst type variable = value;</pre>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/09/c-const-2021-01-15.png\" /></p>\r\n\r\n<p>const 声明常量要在一个语句内完成：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/09/c-const-2021-01-15-2.png\" /></p>\r\n\r\n<p>具体请看下面的实例：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; int main() { const int LENGTH = 10; const int WIDTH = 5; const char NEWLINE = &#39;\\n&#39;; int area; area = LENGTH * WIDTH; printf(&quot;value of area : %d&quot;, area); printf(&quot;%c&quot;, NEWLINE); return 0; }</p>\r\n\r\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\r\n\r\n<pre>\r\nvalue of area : 50</pre>\r\n\r\n<p>请注意，把常量定义为大写字母形式，是一个很好的编程习惯。</p>\r\n', 0, 0, '2021-12-14 01:33:23.495289', '2021-12-14 01:33:23.503291', 8, 3);
INSERT INTO `tb_article` VALUES (41, 'article/20211214/c-mini-logo_Ixz6wdR.png', 'C 存储类', 'C 存储类', 'C 存储类', '<h1>C&nbsp;存储类</h1>\r\n\r\n<p>存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C 程序中可用的存储类：</p>\r\n\r\n<ul>\r\n	<li>auto</li>\r\n	<li>register</li>\r\n	<li>static</li>\r\n	<li>extern</li>\r\n</ul>\r\n\r\n<h2>auto 存储类</h2>\r\n\r\n<p><strong>auto</strong>&nbsp;存储类是所有局部变量默认的存储类。</p>\r\n\r\n<pre>\r\n{\r\n   int mount;\r\n   auto int month;\r\n}</pre>\r\n\r\n<p>上面的实例定义了两个带有相同存储类的变量，auto 只能用在函数内，即 auto 只能修饰局部变量。</p>\r\n\r\n<h2>register 存储类</h2>\r\n\r\n<p><strong>register</strong>&nbsp;存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个字），且不能对它应用一元的 &#39;&amp;&#39; 运算符（因为它没有内存位置）。</p>\r\n\r\n<pre>\r\n{\r\n   register int  miles;\r\n}</pre>\r\n\r\n<p>寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 &#39;register&#39; 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p>\r\n\r\n<h2>static 存储类</h2>\r\n\r\n<p><strong>static</strong>&nbsp;存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p>\r\n\r\n<p>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p>\r\n\r\n<p>全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。</p>\r\n\r\n<p>以下实例演示了 static 修饰全局变量和局部变量的应用：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; /* 函数声明 */ void func1(void); static int count=10; /* 全局变量 - static 是默认的 */ int main() { while (count--) { func1(); } return 0; } void func1(void) { /* &#39;thingy&#39; 是 &#39;func1&#39; 的局部变量 - 只初始化一次 * 每次调用函数 &#39;func1&#39; &#39;thingy&#39; 值不会被重置。 */ static int thingy=5; thingy++; printf(&quot; thingy 为 %d ， count 为 %d\\n&quot;, thingy, count); }</p>\r\n\r\n<p>实例中 count 作为全局变量可以在函数内使用，thingy 使用 static 修饰后，不会在每次调用时重置。</p>\r\n\r\n<p>可能您现在还无法理解这个实例，因为我已经使用了函数和全局变量，这两个概念目前为止还没进行讲解。即使您现在不能完全理解，也没有关系，后续的章节我们会详细讲解。当上面的代码被编译和执行时，它会产生下列结果：</p>\r\n\r\n<pre>\r\n thingy 为 6 ， count 为 9\r\n thingy 为 7 ， count 为 8\r\n thingy 为 8 ， count 为 7\r\n thingy 为 9 ， count 为 6\r\n thingy 为 10 ， count 为 5\r\n thingy 为 11 ， count 为 4\r\n thingy 为 12 ， count 为 3\r\n thingy 为 13 ， count 为 2\r\n thingy 为 14 ， count 为 1\r\n thingy 为 15 ， count 为 0</pre>\r\n\r\n<h2>extern 存储类</h2>\r\n\r\n<p><strong>extern</strong>&nbsp;存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用&nbsp;<strong>extern</strong>&nbsp;时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p>\r\n\r\n<p>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用&nbsp;<em>extern</em>&nbsp;来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em>&nbsp;是用来在另一个文件中声明一个全局变量或函数。</p>\r\n\r\n<p>extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，如下所示：</p>\r\n\r\n<p><strong>第一个文件：main.c</strong></p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; int count ; extern void write_extern(); int main() { count = 5; write_extern(); }</p>\r\n\r\n<p><strong>第二个文件：support.c</strong></p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; extern int count; void write_extern(void) { printf(&quot;count is %d\\n&quot;, count); }</p>\r\n\r\n<p>在这里，第二个文件中的&nbsp;<em>extern</em>&nbsp;关键字用于声明已经在第一个文件 main.c 中定义的&nbsp;<em>count</em>。现在 ，编译这两个文件，如下所示：</p>\r\n\r\n<pre>\r\n $ gcc main.c support.c</pre>\r\n\r\n<p>这会产生&nbsp;<strong>a.out</strong>&nbsp;可执行程序，当程序被执行时，它会产生下列结果：</p>\r\n\r\n<pre>\r\ncount is 5</pre>\r\n', 0, 0, '2021-12-14 01:33:44.640107', '2021-12-14 01:33:44.640107', 8, 3);
INSERT INTO `tb_article` VALUES (42, 'article/20211214/c-mini-logo_sSbBQAW.png', 'C 运算符', 'C 运算符', 'C 运算符', '<h1>C&nbsp;运算符</h1>\r\n\r\n<p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C 语言内置了丰富的运算符，并提供了以下类型的运算符：</p>\r\n\r\n<ul>\r\n	<li>算术运算符</li>\r\n	<li>关系运算符</li>\r\n	<li>逻辑运算符</li>\r\n	<li>位运算符</li>\r\n	<li>赋值运算符</li>\r\n	<li>杂项运算符</li>\r\n</ul>\r\n\r\n<p>本章将逐一介绍算术运算符、关系运算符、逻辑运算符、位运算符、赋值运算符和其他运算符。</p>\r\n\r\n<h2>算术运算符</h2>\r\n\r\n<p>下表显示了 C 语言支持的所有算术运算符。假设变量&nbsp;<strong>A</strong>&nbsp;的值为 10，变量&nbsp;<strong>B</strong>&nbsp;的值为 20，则：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>+</td>\r\n			<td>把两个操作数相加</td>\r\n			<td>A + B 将得到 30</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-</td>\r\n			<td>从第一个操作数中减去第二个操作数</td>\r\n			<td>A - B 将得到 -10</td>\r\n		</tr>\r\n		<tr>\r\n			<td>*</td>\r\n			<td>把两个操作数相乘</td>\r\n			<td>A * B 将得到 200</td>\r\n		</tr>\r\n		<tr>\r\n			<td>/</td>\r\n			<td>分子除以分母</td>\r\n			<td>B / A 将得到 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>%</td>\r\n			<td>取模运算符，整除后的余数</td>\r\n			<td>B % A 将得到 0</td>\r\n		</tr>\r\n		<tr>\r\n			<td>++</td>\r\n			<td>自增运算符，整数值增加 1</td>\r\n			<td>A++ 将得到 11</td>\r\n		</tr>\r\n		<tr>\r\n			<td>--</td>\r\n			<td>自减运算符，整数值减少 1</td>\r\n			<td>A-- 将得到 9</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>请看下面的实例，了解 C 语言中所有可用的算术运算符：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; int main() { int a = 21; int b = 10; int c ; c = a + b; printf(&quot;Line 1 - c 的值是 %d\\n&quot;, c ); c = a - b; printf(&quot;Line 2 - c 的值是 %d\\n&quot;, c ); c = a * b; printf(&quot;Line 3 - c 的值是 %d\\n&quot;, c ); c = a / b; printf(&quot;Line 4 - c 的值是 %d\\n&quot;, c ); c = a % b; printf(&quot;Line 5 - c 的值是 %d\\n&quot;, c ); c = a++; // 赋值后再加 1 ，c 为 21，a 为 22 printf(&quot;Line 6 - c 的值是 %d\\n&quot;, c ); c = a--; // 赋值后再减 1 ，c 为 22 ，a 为 21 printf(&quot;Line 7 - c 的值是 %d\\n&quot;, c ); }</p>\r\n\r\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\r\n\r\n<pre>\r\nLine 1 - c 的值是 31\r\nLine 2 - c 的值是 11\r\nLine 3 - c 的值是 210\r\nLine 4 - c 的值是 2\r\nLine 5 - c 的值是 1\r\nLine 6 - c 的值是 21\r\nLine 7 - c 的值是 22</pre>\r\n\r\n<p>以下实例演示了 a++ 与 ++a 的区别：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; int main() { int c; int a = 10; c = a++; printf(&quot;先赋值后运算：\\n&quot;); printf(&quot;Line 1 - c 的值是 %d\\n&quot;, c ); printf(&quot;Line 2 - a 的值是 %d\\n&quot;, a ); a = 10; c = a--; printf(&quot;Line 3 - c 的值是 %d\\n&quot;, c ); printf(&quot;Line 4 - a 的值是 %d\\n&quot;, a ); printf(&quot;先运算后赋值：\\n&quot;); a = 10; c = ++a; printf(&quot;Line 5 - c 的值是 %d\\n&quot;, c ); printf(&quot;Line 6 - a 的值是 %d\\n&quot;, a ); a = 10; c = --a; printf(&quot;Line 7 - c 的值是 %d\\n&quot;, c ); printf(&quot;Line 8 - a 的值是 %d\\n&quot;, a ); }</p>\r\n\r\n<p>以上程序执行输出结果为：</p>\r\n\r\n<pre>\r\n先赋值后运算：\r\nLine 1 - c 的值是 10\r\nLine 2 - a 的值是 11\r\nLine 3 - c 的值是 10\r\nLine 4 - a 的值是 9\r\n先运算后赋值：\r\nLine 5 - c 的值是 11\r\nLine 6 - a 的值是 11\r\nLine 7 - c 的值是 9\r\nLine 8 - a 的值是 9</pre>\r\n\r\n<h2>关系运算符</h2>\r\n\r\n<p>下表显示了 C 语言支持的所有关系运算符。假设变量&nbsp;<strong>A</strong>&nbsp;的值为 10，变量&nbsp;<strong>B</strong>&nbsp;的值为 20，则：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>==</td>\r\n			<td>检查两个操作数的值是否相等，如果相等则条件为真。</td>\r\n			<td>(A == B) 为假。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>!=</td>\r\n			<td>检查两个操作数的值是否相等，如果不相等则条件为真。</td>\r\n			<td>(A != B) 为真。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;</td>\r\n			<td>检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td>\r\n			<td>(A &gt; B) 为假。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;</td>\r\n			<td>检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td>\r\n			<td>(A &lt; B) 为真。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;=</td>\r\n			<td>检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td>\r\n			<td>(A &gt;= B) 为假。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;=</td>\r\n			<td>检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td>\r\n			<td>(A &lt;= B) 为真。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>请看下面的实例，了解 C 语言中所有可用的关系运算符：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; int main() { int a = 21; int b = 10; int c ; if( a == b ) { printf(&quot;Line 1 - a 等于 b\\n&quot; ); } else { printf(&quot;Line 1 - a 不等于 b\\n&quot; ); } if ( a &lt; b ) { printf(&quot;Line 2 - a 小于 b\\n&quot; ); } else { printf(&quot;Line 2 - a 不小于 b\\n&quot; ); } if ( a &gt; b ) { printf(&quot;Line 3 - a 大于 b\\n&quot; ); } else { printf(&quot;Line 3 - a 不大于 b\\n&quot; ); } /* 改变 a 和 b 的值 */ a = 5; b = 20; if ( a &lt;= b ) { printf(&quot;Line 4 - a 小于或等于 b\\n&quot; ); } if ( b &gt;= a ) { printf(&quot;Line 5 - b 大于或等于 a\\n&quot; ); } }</p>\r\n\r\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\r\n\r\n<pre>\r\nLine 1 - a 不等于 b\r\nLine 2 - a 不小于 b\r\nLine 3 - a 大于 b\r\nLine 4 - a 小于或等于 b\r\nLine 5 - b 大于或等于 a</pre>\r\n\r\n<h2>逻辑运算符</h2>\r\n\r\n<p>下表显示了 C 语言支持的所有关系逻辑运算符。假设变量&nbsp;<strong>A</strong>&nbsp;的值为 1，变量&nbsp;<strong>B</strong>&nbsp;的值为 0，则：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp;&amp;</td>\r\n			<td>称为逻辑与运算符。如果两个操作数都非零，则条件为真。</td>\r\n			<td>(A &amp;&amp; B) 为假。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>||</td>\r\n			<td>称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。</td>\r\n			<td>(A || B) 为真。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>!</td>\r\n			<td>称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。</td>\r\n			<td>!(A &amp;&amp; B) 为真。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>请看下面的实例，了解 C 语言中所有可用的逻辑运算符：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; int main() { int a = 5; int b = 20; int c ; if ( a &amp;&amp; b ) { printf(&quot;Line 1 - 条件为真\\n&quot; ); } if ( a || b ) { printf(&quot;Line 2 - 条件为真\\n&quot; ); } /* 改变 a 和 b 的值 */ a = 0; b = 10; if ( a &amp;&amp; b ) { printf(&quot;Line 3 - 条件为真\\n&quot; ); } else { printf(&quot;Line 3 - 条件为假\\n&quot; ); } if ( !(a &amp;&amp; b) ) { printf(&quot;Line 4 - 条件为真\\n&quot; ); } }</p>\r\n\r\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\r\n\r\n<pre>\r\nLine 1 - 条件为真\r\nLine 2 - 条件为真\r\nLine 3 - 条件为假\r\nLine 4 - 条件为真</pre>\r\n\r\n<h2>位运算符</h2>\r\n\r\n<p>位运算符作用于位，并逐位执行操作。&amp;、 | 和 ^ 的真值表如下所示：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>p</th>\r\n			<th>q</th>\r\n			<th>p &amp; q</th>\r\n			<th>p | q</th>\r\n			<th>p ^ q</th>\r\n		</tr>\r\n		<tr>\r\n			<td>0</td>\r\n			<td>0</td>\r\n			<td>0</td>\r\n			<td>0</td>\r\n			<td>0</td>\r\n		</tr>\r\n		<tr>\r\n			<td>0</td>\r\n			<td>1</td>\r\n			<td>0</td>\r\n			<td>1</td>\r\n			<td>1</td>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>1</td>\r\n			<td>1</td>\r\n			<td>1</td>\r\n			<td>0</td>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>0</td>\r\n			<td>0</td>\r\n			<td>1</td>\r\n			<td>1</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>假设如果 A = 60，且 B = 13，现在以二进制格式表示，它们如下所示：</p>\r\n\r\n<p>A = 0011 1100</p>\r\n\r\n<p>B = 0000 1101</p>\r\n\r\n<p>-----------------</p>\r\n\r\n<p>A&amp;B = 0000 1100</p>\r\n\r\n<p>A|B = 0011 1101</p>\r\n\r\n<p>A^B = 0011 0001</p>\r\n\r\n<p>~A&nbsp; = 1100 0011</p>\r\n\r\n<p>下表显示了 C 语言支持的位运算符。假设变量&nbsp;<strong>A</strong>&nbsp;的值为 60，变量&nbsp;<strong>B</strong>&nbsp;的值为 13，则：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp;</td>\r\n			<td>\r\n			<p>按位与操作，按二进制位进行&quot;与&quot;运算。运算规则：</p>\r\n\r\n			<pre>\r\n0&amp;0=0;   \r\n0&amp;1=0;    \r\n1&amp;0=0;     \r\n1&amp;1=1;</pre>\r\n			</td>\r\n			<td>(A &amp; B) 将得到 12，即为 0000 1100</td>\r\n		</tr>\r\n		<tr>\r\n			<td>|</td>\r\n			<td>\r\n			<p>按位或运算符，按二进制位进行&quot;或&quot;运算。运算规则：</p>\r\n\r\n			<pre>\r\n0|0=0;   \r\n0|1=1;   \r\n1|0=1;    \r\n1|1=1;</pre>\r\n			</td>\r\n			<td>(A | B) 将得到 61，即为 0011 1101</td>\r\n		</tr>\r\n		<tr>\r\n			<td>^</td>\r\n			<td>\r\n			<p>异或运算符，按二进制位进行&quot;异或&quot;运算。运算规则：</p>\r\n\r\n			<pre>\r\n0^0=0;   \r\n0^1=1;   \r\n1^0=1;  \r\n1^1=0;</pre>\r\n			</td>\r\n			<td>(A ^ B) 将得到 49，即为 0011 0001</td>\r\n		</tr>\r\n		<tr>\r\n			<td>~</td>\r\n			<td>\r\n			<p>取反运算符，按二进制位进行&quot;取反&quot;运算。运算规则：</p>\r\n\r\n			<pre>\r\n~1=-2;   \r\n~0=-1;</pre>\r\n			</td>\r\n			<td>(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;&lt;</td>\r\n			<td>二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</td>\r\n			<td>A &lt;&lt; 2 将得到 240，即为 1111 0000</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt;</td>\r\n			<td>二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</td>\r\n			<td>A &gt;&gt; 2 将得到 15，即为 0000 1111</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>请看下面的实例，了解 C 语言中所有可用的位运算符：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; int main() { unsigned int a = 60; /* 60 = 0011 1100 */ unsigned int b = 13; /* 13 = 0000 1101 */ int c = 0; c = a &amp; b; /* 12 = 0000 1100 */ printf(&quot;Line 1 - c 的值是 %d\\n&quot;, c ); c = a | b; /* 61 = 0011 1101 */ printf(&quot;Line 2 - c 的值是 %d\\n&quot;, c ); c = a ^ b; /* 49 = 0011 0001 */ printf(&quot;Line 3 - c 的值是 %d\\n&quot;, c ); c = ~a; /*-61 = 1100 0011 */ printf(&quot;Line 4 - c 的值是 %d\\n&quot;, c ); c = a &lt;&lt; 2; /* 240 = 1111 0000 */ printf(&quot;Line 5 - c 的值是 %d\\n&quot;, c ); c = a &gt;&gt; 2; /* 15 = 0000 1111 */ printf(&quot;Line 6 - c 的值是 %d\\n&quot;, c ); }</p>\r\n\r\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\r\n\r\n<pre>\r\nLine 1 - c 的值是 12\r\nLine 2 - c 的值是 61\r\nLine 3 - c 的值是 49\r\nLine 4 - c 的值是 -61\r\nLine 5 - c 的值是 240\r\nLine 6 - c 的值是 15</pre>\r\n\r\n<h2>赋值运算符</h2>\r\n\r\n<p>下表列出了 C 语言支持的赋值运算符：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>=</td>\r\n			<td>简单的赋值运算符，把右边操作数的值赋给左边操作数</td>\r\n			<td>C = A + B 将把 A + B 的值赋给 C</td>\r\n		</tr>\r\n		<tr>\r\n			<td>+=</td>\r\n			<td>加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td>\r\n			<td>C += A 相当于 C = C + A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-=</td>\r\n			<td>减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td>\r\n			<td>C -= A 相当于 C = C - A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>*=</td>\r\n			<td>乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td>\r\n			<td>C *= A 相当于 C = C * A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>/=</td>\r\n			<td>除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td>\r\n			<td>C /= A 相当于 C = C / A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>%=</td>\r\n			<td>求模且赋值运算符，求两个操作数的模赋值给左边操作数</td>\r\n			<td>C %= A 相当于 C = C % A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;&lt;=</td>\r\n			<td>左移且赋值运算符</td>\r\n			<td>C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt;=</td>\r\n			<td>右移且赋值运算符</td>\r\n			<td>C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp;=</td>\r\n			<td>按位与且赋值运算符</td>\r\n			<td>C &amp;= 2 等同于 C = C &amp; 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>^=</td>\r\n			<td>按位异或且赋值运算符</td>\r\n			<td>C ^= 2 等同于 C = C ^ 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>|=</td>\r\n			<td>按位或且赋值运算符</td>\r\n			<td>C |= 2 等同于 C = C | 2</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>请看下面的实例，了解 C 语言中所有可用的赋值运算符：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; int main() { int a = 21; int c ; c = a; printf(&quot;Line 1 - = 运算符实例，c 的值 = %d\\n&quot;, c ); c += a; printf(&quot;Line 2 - += 运算符实例，c 的值 = %d\\n&quot;, c ); c -= a; printf(&quot;Line 3 - -= 运算符实例，c 的值 = %d\\n&quot;, c ); c *= a; printf(&quot;Line 4 - *= 运算符实例，c 的值 = %d\\n&quot;, c ); c /= a; printf(&quot;Line 5 - /= 运算符实例，c 的值 = %d\\n&quot;, c ); c = 200; c %= a; printf(&quot;Line 6 - %%= 运算符实例，c 的值 = %d\\n&quot;, c ); c &lt;&lt;= 2; printf(&quot;Line 7 - &lt;&lt;= 运算符实例，c 的值 = %d\\n&quot;, c ); c &gt;&gt;= 2; printf(&quot;Line 8 - &gt;&gt;= 运算符实例，c 的值 = %d\\n&quot;, c ); c &amp;= 2; printf(&quot;Line 9 - &amp;= 运算符实例，c 的值 = %d\\n&quot;, c ); c ^= 2; printf(&quot;Line 10 - ^= 运算符实例，c 的值 = %d\\n&quot;, c ); c |= 2; printf(&quot;Line 11 - |= 运算符实例，c 的值 = %d\\n&quot;, c ); }</p>\r\n\r\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\r\n\r\n<pre>\r\nLine 1 - =  运算符实例，c 的值 = 21\r\nLine 2 - += 运算符实例，c 的值 = 42\r\nLine 3 - -= 运算符实例，c 的值 = 21\r\nLine 4 - *= 运算符实例，c 的值 = 441\r\nLine 5 - /= 运算符实例，c 的值 = 21\r\nLine 6 - %= 运算符实例，c 的值 = 11\r\nLine 7 - &lt;&lt;= 运算符实例，c 的值 = 44\r\nLine 8 - &gt;&gt;= 运算符实例，c 的值 = 11\r\nLine 9 - &amp;= 运算符实例，c 的值 = 2\r\nLine 10 - ^= 运算符实例，c 的值 = 0\r\nLine 11 - |= 运算符实例，c 的值 = 2</pre>\r\n\r\n<h2>杂项运算符 ↦ sizeof &amp; 三元</h2>\r\n\r\n<p>下表列出了 C 语言支持的其他一些重要的运算符，包括&nbsp;<strong>sizeof</strong>&nbsp;和&nbsp;<strong>? :</strong>。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>sizeof()</td>\r\n			<td>返回变量的大小。</td>\r\n			<td>sizeof(a) 将返回 4，其中 a 是整数。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp;</td>\r\n			<td>返回变量的地址。</td>\r\n			<td>&amp;a; 将给出变量的实际地址。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>*</td>\r\n			<td>指向一个变量。</td>\r\n			<td>*a; 将指向一个变量。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>? :</td>\r\n			<td>条件表达式</td>\r\n			<td>如果条件为真 ? 则值为 X : 否则值为 Y</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>请看下面的实例，了解 C 语言中所有可用的杂项运算符：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; int main() { int a = 4; short b; double c; int* ptr; /* sizeof 运算符实例 */ printf(&quot;Line 1 - 变量 a 的大小 = %lu\\n&quot;, sizeof(a) ); printf(&quot;Line 2 - 变量 b 的大小 = %lu\\n&quot;, sizeof(b) ); printf(&quot;Line 3 - 变量 c 的大小 = %lu\\n&quot;, sizeof(c) ); /* &amp; 和 * 运算符实例 */ ptr = &amp;a; /* &#39;ptr&#39; 现在包含 &#39;a&#39; 的地址 */ printf(&quot;a 的值是 %d\\n&quot;, a); printf(&quot;*ptr 是 %d\\n&quot;, *ptr); /* 三元运算符实例 */ a = 10; b = (a == 1) ? 20: 30; printf( &quot;b 的值是 %d\\n&quot;, b ); b = (a == 10) ? 20: 30; printf( &quot;b 的值是 %d\\n&quot;, b ); }</p>\r\n\r\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\r\n\r\n<pre>\r\nLine 1 - 变量 a 的大小 = 4\r\nLine 2 - 变量 b 的大小 = 2\r\nLine 3 - 变量 c 的大小 = 8\r\na 的值是 4\r\n*ptr 是 4\r\nb 的值是 30\r\nb 的值是 20</pre>\r\n\r\n<h2>C 中的运算符优先级</h2>\r\n\r\n<p>运算符的优先级确定表达式中项的组合。这会影响到一个表达式如何计算。某些运算符比其他运算符有更高的优先级，例如，乘除运算符具有比加减运算符更高的优先级。</p>\r\n\r\n<p>例如 x = 7 + 3 * 2，在这里，x 被赋值为 13，而不是 20，因为运算符 * 具有比 + 更高的优先级，所以首先计算乘法 3*2，然后再加上 7。</p>\r\n\r\n<p>下表将按运算符优先级从高到低列出各个运算符，具有较高优先级的运算符出现在表格的上面，具有较低优先级的运算符出现在表格的下面。在表达式中，较高优先级的运算符会优先被计算。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>类别&nbsp;</th>\r\n			<th>运算符&nbsp;</th>\r\n			<th>结合性&nbsp;</th>\r\n		</tr>\r\n		<tr>\r\n			<td>后缀&nbsp;</td>\r\n			<td>() [] -&gt; . ++ - - &nbsp;</td>\r\n			<td>从左到右&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>一元&nbsp;</td>\r\n			<td>+ - ! ~ ++ - - (type)* &amp; sizeof&nbsp;</td>\r\n			<td>从右到左&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>乘除&nbsp;</td>\r\n			<td>* / %&nbsp;</td>\r\n			<td>从左到右&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>加减&nbsp;</td>\r\n			<td>+ -&nbsp;</td>\r\n			<td>从左到右&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>移位&nbsp;</td>\r\n			<td>&lt;&lt; &gt;&gt;&nbsp;</td>\r\n			<td>从左到右&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>关系&nbsp;</td>\r\n			<td>&lt; &lt;= &gt; &gt;=&nbsp;</td>\r\n			<td>从左到右&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>相等&nbsp;</td>\r\n			<td>== !=&nbsp;</td>\r\n			<td>从左到右&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>位与 AND&nbsp;</td>\r\n			<td>&amp;&nbsp;</td>\r\n			<td>从左到右&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>位异或 XOR&nbsp;</td>\r\n			<td>^&nbsp;</td>\r\n			<td>从左到右&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>位或 OR&nbsp;</td>\r\n			<td>|&nbsp;</td>\r\n			<td>从左到右&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>逻辑与 AND&nbsp;</td>\r\n			<td>&amp;&amp;&nbsp;</td>\r\n			<td>从左到右&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>逻辑或 OR&nbsp;</td>\r\n			<td>||&nbsp;</td>\r\n			<td>从左到右&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>条件&nbsp;</td>\r\n			<td>?:&nbsp;</td>\r\n			<td>从右到左&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>赋值&nbsp;</td>\r\n			<td>= += -= *= /= %=&gt;&gt;= &lt;&lt;= &amp;= ^= |=&nbsp;</td>\r\n			<td>从右到左&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>逗号&nbsp;</td>\r\n			<td>,&nbsp;</td>\r\n			<td>从左到右&nbsp;</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>请看下面的实例，了解 C 语言中运算符的优先级：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; main() { int a = 20; int b = 10; int c = 15; int d = 5; int e; e = (a + b) * c / d; // ( 30 * 15 ) / 5 printf(&quot;(a + b) * c / d 的值是 %d\\n&quot;, e ); e = ((a + b) * c) / d; // (30 * 15 ) / 5 printf(&quot;((a + b) * c) / d 的值是 %d\\n&quot; , e ); e = (a + b) * (c / d); // (30) * (15/5) printf(&quot;(a + b) * (c / d) 的值是 %d\\n&quot;, e ); e = a + (b * c) / d; // 20 + (150/5) printf(&quot;a + (b * c) / d 的值是 %d\\n&quot; , e ); return 0; }</p>\r\n\r\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\r\n\r\n<pre>\r\n(a + b) * c / d 的值是 90\r\n((a + b) * c) / d 的值是 90\r\n(a + b) * (c / d) 的值是 90\r\na + (b * c) / d 的值是 50</pre>\r\n', 0, 0, '2021-12-14 01:34:14.801567', '2021-12-14 01:34:14.809580', 8, 3);
INSERT INTO `tb_article` VALUES (43, 'article/20211214/c-mini-logo_ioYIpFL.png', 'C 判断', 'C 判断', 'C 判断', '<h1>C&nbsp;判断</h1>\r\n\r\n<p>判断结构要求程序员指定一个或多个要评估或测试的条件，以及条件为真时要执行的语句（必需的）和条件为假时要执行的语句（可选的）。</p>\r\n\r\n<p>C 语言把任何<strong>非零</strong>和<strong>非空</strong>的值假定为&nbsp;<strong>true</strong>，把<strong>零</strong>或&nbsp;<strong>null</strong>&nbsp;假定为&nbsp;<strong>false</strong>。</p>\r\n\r\n<p>下面是大多数编程语言中典型的判断结构的一般形式：</p>\r\n\r\n<p><img alt=\"C 中的判断语句\" src=\"https://static.runoob.com/wp-content/uploads/c/C-decision-20200923-1.svg\" /></p>\r\n\r\n<h2>判断语句</h2>\r\n\r\n<p>C 语言提供了以下类型的判断语句。点击链接查看每个语句的细节。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>语句</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/cprogramming/c-if.html\" rel=\"noopener noreferrer\" target=\"_blank\" title=\"C 中的 if 语句\">if 语句</a></td>\r\n			<td>一个&nbsp;<strong>if 语句</strong>&nbsp;由一个布尔表达式后跟一个或多个语句组成。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/cprogramming/c-if-else.html\" rel=\"noopener noreferrer\" target=\"_blank\" title=\"C 中的 if...else 语句\">if...else 语句</a></td>\r\n			<td>一个&nbsp;<strong>if 语句</strong>&nbsp;后可跟一个可选的&nbsp;<strong>else 语句</strong>，else 语句在布尔表达式为假时执行。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/cprogramming/c-nested-if.html\" rel=\"noopener noreferrer\" target=\"_blank\" title=\"C 中的嵌套 if 语句\">嵌套 if 语句</a></td>\r\n			<td>您可以在一个&nbsp;<strong>if</strong>&nbsp;或&nbsp;<strong>else if</strong>&nbsp;语句内使用另一个&nbsp;<strong>if</strong>&nbsp;或&nbsp;<strong>else if</strong>&nbsp;语句。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/cprogramming/c-switch.html\" rel=\"noopener noreferrer\" target=\"_blank\" title=\"C 中的 switch 语句\">switch 语句</a></td>\r\n			<td>一个&nbsp;<strong>switch</strong>&nbsp;语句允许测试一个变量等于多个值时的情况。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/cprogramming/c-nested-switch.html\" rel=\"noopener noreferrer\" target=\"_blank\" title=\"C 中的嵌套 switch 语句\">嵌套 switch 语句</a></td>\r\n			<td>您可以在一个&nbsp;<strong>switch</strong>&nbsp;语句内使用另一个&nbsp;<strong>switch&nbsp;</strong>语句。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>? : 运算符(三元运算符)</h2>\r\n\r\n<p>我们已经在前面的章节中讲解了&nbsp;<strong>条件运算符 ? :</strong>，可以用来替代&nbsp;<strong>if...else</strong>&nbsp;语句。它的一般形式如下：</p>\r\n\r\n<pre>\r\nExp1 ? Exp2 : Exp3;</pre>\r\n\r\n<p>其中，Exp1、Exp2 和 Exp3 是表达式。请注意，冒号的使用和位置。</p>\r\n\r\n<p>? 表达式的值是由 Exp1 决定的。如果 Exp1 为真，则计算 Exp2 的值，结果即为整个表达式的值。如果 Exp1 为假，则计算 Exp3 的值，结果即为整个表达式的值。</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.runoob.com/wp-content/uploads/2014/09/Conditional-Statement-in-C-Programming-Lanuage-Ternary-Operator.png\" /></p>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>以下实例通过输入一个数字来判断它是否为奇数或偶数</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include&lt;stdio.h&gt; int main() { int num; printf(&quot;输入一个数字 : &quot;); scanf(&quot;%d&quot;,&amp;num); (num%2==0)?printf(&quot;偶数&quot;):printf(&quot;奇数&quot;); }</p>\r\n', 0, 0, '2021-12-14 01:34:45.802318', '2021-12-14 01:34:45.802318', 8, 3);
INSERT INTO `tb_article` VALUES (44, 'article/20211214/c-mini-logo_NJmHk3T.png', 'C 循环', 'C 循环', 'C 循环', '<h1>C&nbsp;循环</h1>\r\n\r\n<p>有的时候，我们可能需要多次执行同一块代码。一般情况下，语句是按顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。</p>\r\n\r\n<p>编程语言提供了更为复杂执行路径的多种控制结构。</p>\r\n\r\n<p>循环语句允许我们多次执行一个语句或语句组，下面是大多数编程语言中循环语句的流程图：</p>\r\n\r\n<p><img alt=\"循环结构\" src=\"https://www.runoob.com/wp-content/uploads/2015/12/loop.png\" /></p>\r\n\r\n<h2>循环类型</h2>\r\n\r\n<p>C 语言提供了以下几种循环类型。点击链接查看每个类型的细节。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>循环类型</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/cprogramming/c-while-loop.html\" title=\"C 中的 while 循环\">while 循环</a></td>\r\n			<td>当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/cprogramming/c-for-loop.html\" title=\"C 中的 for 循环\">for 循环</a></td>\r\n			<td>多次执行一个语句序列，简化管理循环变量的代码。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/cprogramming/c-do-while-loop.html\" title=\"C 中的 do...while 循环\">do...while 循环</a></td>\r\n			<td>除了它是在循环主体结尾测试条件外，其他与 while 语句类似。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/cprogramming/c-nested-loops.html\" title=\"C 中的嵌套循环\">嵌套循环</a></td>\r\n			<td>您可以在 while、for 或 do..while 循环内使用一个或多个循环。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>循环控制语句</h2>\r\n\r\n<p>循环控制语句改变你代码的执行顺序。通过它你可以实现代码的跳转。</p>\r\n\r\n<p>C 提供了下列的循环控制语句。点击链接查看每个语句的细节。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>控制语句</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/cprogramming/c-break-statement.html\" title=\"C 中的 break 语句\">break 语句</a></td>\r\n			<td>终止<strong>循环</strong>或&nbsp;<strong>switch</strong>&nbsp;语句，程序流将继续执行紧接着循环或 switch 的下一条语句。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/cprogramming/c-continue-statement.html\" title=\"C 中的 continue 语句\">continue 语句</a></td>\r\n			<td>告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/cprogramming/c-goto-statement.html\" title=\"C 中的 goto 语句\">goto 语句</a></td>\r\n			<td>将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>无限循环</h2>\r\n\r\n<p>如果条件永远不为假，则循环将变成无限循环。<strong>for</strong>&nbsp;循环在传统意义上可用于实现无限循环。由于构成循环的三个表达式中任何一个都不是必需的，您可以将某些条件表达式留空来构成一个无限循环。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; int main () { for( ; ; ) { printf(&quot;该循环会永远执行下去！\\n&quot;); } return 0; }</p>\r\n\r\n<p>当条件表达式不存在时，它被假设为真。您也可以设置一个初始值和增量表达式，但是一般情况下，C 程序员偏向于使用 for(;;) 结构来表示一个无限循环。</p>\r\n\r\n<p><strong>注意：</strong>您可以按&nbsp;Ctrl + C&nbsp;键终止一个无限循环。</p>\r\n', 0, 0, '2021-12-14 01:35:13.288386', '2021-12-14 01:35:13.296394', 8, 3);
INSERT INTO `tb_article` VALUES (45, 'article/20211214/c-mini-logo_aE1mSTc.png', 'C 函数', 'C 函数', 'C 函数', '<h1>C&nbsp;函数</h1>\r\n\r\n<p>函数是一组一起执行一个任务的语句。每个 C 程序都至少有一个函数，即主函数&nbsp;<strong>main()</strong>&nbsp;，所有简单的程序都可以定义其他额外的函数。</p>\r\n\r\n<p>您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，划分通常是根据每个函数执行一个特定的任务来进行的。</p>\r\n\r\n<p>函数<strong>声明</strong>告诉编译器函数的名称、返回类型和参数。函数<strong>定义</strong>提供了函数的实际主体。</p>\r\n\r\n<p>C 标准库提供了大量的程序可以调用的内置函数。例如，函数&nbsp;<strong>strcat()</strong>&nbsp;用来连接两个字符串，函数&nbsp;<strong>memcpy()</strong>&nbsp;用来复制内存到另一个位置。</p>\r\n\r\n<p>函数还有很多叫法，比如方法、子例程或程序，等等。</p>\r\n\r\n<h2>定义函数</h2>\r\n\r\n<p>C 语言中的函数定义的一般形式如下：</p>\r\n\r\n<pre>\r\nreturn_type function_name( parameter list )\r\n{\r\n   body of the function\r\n}</pre>\r\n\r\n<p>在 C 语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p>\r\n\r\n<ul>\r\n	<li><strong>返回类型：</strong>一个函数可以返回一个值。<strong>return_type</strong>&nbsp;是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type 是关键字&nbsp;<strong>void</strong>。</li>\r\n	<li><strong>函数名称：</strong>这是函数的实际名称。函数名和参数列表一起构成了函数签名。</li>\r\n	<li><strong>参数：</strong>参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数。</li>\r\n	<li><strong>函数主体：</strong>函数主体包含一组定义函数执行任务的语句。</li>\r\n</ul>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>以下是&nbsp;<strong>max()</strong>&nbsp;函数的源代码。该函数有两个参数 num1 和 num2，会返回这两个数中较大的那个数：</p>\r\n\r\n<p>/* 函数返回两个数中较大的那个数 */ int max(int num1, int num2) { /* 局部变量声明 */ int result; if (num1 &gt; num2) result = num1; else result = num2; return result; }</p>\r\n\r\n<h2>函数声明</h2>\r\n\r\n<p>函数<strong>声明</strong>会告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>\r\n\r\n<p>函数声明包括以下几个部分：</p>\r\n\r\n<pre>\r\nreturn_type function_name( parameter list );</pre>\r\n\r\n<p>针对上面定义的函数 max()，以下是函数声明：</p>\r\n\r\n<pre>\r\nint max(int num1, int num2);</pre>\r\n\r\n<p>在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：</p>\r\n\r\n<pre>\r\nint max(int, int);</pre>\r\n\r\n<p>当您在一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。</p>\r\n\r\n<h2>调用函数</h2>\r\n\r\n<p>创建 C 函数时，会定义函数做什么，然后通过调用函数来完成已定义的任务。</p>\r\n\r\n<p>当程序调用函数时，程序控制权会转移给被调用的函数。被调用的函数执行已定义的任务，当函数的返回语句被执行时，或到达函数的结束括号时，会把程序控制权交还给主程序。</p>\r\n\r\n<p>调用函数时，传递所需参数，如果函数返回一个值，则可以存储返回值。例如：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#include &lt;stdio.h&gt; /* 函数声明 */ int max(int num1, int num2); int main () { /* 局部变量定义 */ int a = 100; int b = 200; int ret; /* 调用函数来获取最大值 */ ret = max(a, b); printf( &quot;Max value is : %d\\n&quot;, ret ); return 0; } /* 函数返回两个数中较大的那个数 */ int max(int num1, int num2) { /* 局部变量声明 */ int result; if (num1 &gt; num2) result = num1; else result = num2; return result; }</p>\r\n\r\n<p>把 max() 函数和 main() 函数放一块，编译源代码。当运行最后的可执行文件时，会产生下列结果：</p>\r\n\r\n<pre>\r\nMax value is : 200</pre>\r\n\r\n<h2>函数参数</h2>\r\n\r\n<p>如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的<strong>形式参数</strong>。</p>\r\n\r\n<p>形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。</p>\r\n\r\n<p>当调用函数时，有两种向函数传递参数的方式：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>调用类型</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/cprogramming/c-function-call-by-value.html\" title=\"C 中传值方式调用函数\">传值调用</a></td>\r\n			<td>该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数不会影响实际参数。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/cprogramming/c-function-call-by-pointer.html\" title=\"C 中引用方式调用函数\">引用调用</a></td>\r\n			<td>通过指针传递方式，形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>默认情况下，C 使用<strong>传值调用</strong>来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的实际参数。</p>\r\n', 4, 0, '2021-12-14 01:36:01.626182', '2021-12-21 09:03:51.142816', 8, 3);
INSERT INTO `tb_article` VALUES (46, 'article/20211214/vue.png', 'Vue.js 安装', 'Vue.js 安装', 'Vue.js 安装', '<h1>Vue.js 安装</h1>\r\n\r\n<h2>1、独立版本</h2>\r\n\r\n<p>我们可以在 Vue.js 的官网上直接下载 vue.min.js 并用&nbsp;<strong>&lt;script&gt;</strong>&nbsp;标签引入。</p>\r\n\r\n<p><a download=\"\" href=\"https://vuejs.org/js/vue.min.js\" rel=\"external noopener noreferrer\" target=\"_blank\">下载 Vue.js</a></p>\r\n\r\n<hr />\r\n<h2>2、使用 CDN 方法</h2>\r\n\r\n<p>以下推荐国外比较稳定的两个 CDN，国内还没发现哪一家比较好，目前还是建议下载到本地。</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Staticfile CDN（国内）</strong>&nbsp;:&nbsp;<a href=\"https://cdn.staticfile.org/vue/2.2.2/vue.min.js\" rel=\"external noopener noreferrer\" target=\"_blank\">https://cdn.staticfile.org/vue/2.2.2/vue.min.js</a></p>\r\n	</li>\r\n	<li>\r\n	<p><strong>unpkg</strong>：<a href=\"https://unpkg.com/vue/dist/vue.js\" rel=\"external noopener noreferrer\" target=\"_blank\">https://unpkg.com/vue/dist/vue.js</a>, 会保持和 npm 发布的最新的版本一致。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>cdnjs</strong>&nbsp;:&nbsp;<a href=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js\" rel=\"external noopener noreferrer\" target=\"_blank\">https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js</a></p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Staticfile CDN（国内）</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;p&gt;{{ message }}&lt;/p&gt; &lt;/div&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-bc\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<h2>unpkg（推荐）</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;p&gt;{{ message }}&lt;/p&gt; &lt;/div&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-hw\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<h2>cdnjs</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;p&gt;{{ message }}&lt;/p&gt; &lt;/div&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-hw-cdnjs\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>3、NPM 方法</h2>\r\n\r\n<p>由于 npm 安装速度慢，本教程使用了淘宝的镜像及其命令 cnpm，安装使用介绍参照：<a href=\"https://www.runoob.com/nodejs/nodejs-npm.html#taobaonpm\" rel=\"noopener noreferrer\" target=\"_blank\">使用淘宝 NPM 镜像</a>。</p>\r\n\r\n<p>npm 版本需要大于 3.0，如果低于此版本需要升级它：</p>\r\n\r\n<pre>\r\n# 查看版本\r\n$ npm -v\r\n2.3.0\r\n\r\n#升级 npm\r\ncnpm install npm -g\r\n\r\n\r\n# 升级或安装 cnpm\r\nnpm install cnpm -g</pre>\r\n\r\n<p>在用 Vue.js 构建大型应用时推荐使用 cnpm 安装：</p>\r\n\r\n<pre>\r\n# 最新稳定版\r\n$ cnpm install vue</pre>\r\n\r\n<hr />\r\n<h2>命令行工具</h2>\r\n\r\n<p>Vue.js 提供一个官方命令行工具，可用于快速搭建大型单页应用。</p>\r\n\r\n<pre>\r\n# 全局安装 vue-cli\r\n$ cnpm install --global vue-cli\r\n# 创建一个基于 webpack 模板的新项目\r\n$ vue init webpack my-project\r\n# 这里需要进行一些配置，默认回车即可\r\nThis will install Vue 2.x version of the template.\r\n\r\nFor Vue 1.x use: vue init webpack#1.0 my-project\r\n\r\n? Project name my-project\r\n? Project description A Vue.js project\r\n? Author runoob &lt;test@runoob.com&gt;\r\n? Vue build standalone\r\n? Use ESLint to lint your code? Yes\r\n? Pick an ESLint preset Standard\r\n? Setup unit tests with Karma + Mocha? Yes\r\n? Setup e2e tests with Nightwatch? Yes\r\n\r\n   vue-cli &middot; Generated &quot;my-project&quot;.\r\n\r\n   To get started:\r\n   \r\n     cd my-project\r\n     npm install\r\n     npm run dev\r\n   \r\n   Documentation can be found at https://vuejs-templates.github.io/webpack</pre>\r\n\r\n<p>进入项目，安装并运行：</p>\r\n\r\n<pre>\r\n$ cd my-project\r\n$ cnpm install\r\n$ cnpm run dev\r\n DONE  Compiled successfully in 4388ms\r\n\r\n&gt; Listening at http://localhost:8080</pre>\r\n\r\n<p>成功执行以上命令后访问 http://localhost:8080/，输出结果如下所示：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2017/01/56219E04-D156-43EC-AC59-BFE7E38A62C3.jpg\" /></p>\r\n\r\n<blockquote>\r\n<p><strong>注意：</strong>Vue.js 不支持 IE8 及其以下 IE 版本。</p>\r\n</blockquote>\r\n\r\n<hr />\r\n<h2>Vue 项目打包</h2>\r\n\r\n<p>打包 Vue 项目使用以下命令：</p>\r\n\r\n<pre>\r\nnpm run build</pre>\r\n\r\n<p>执行完成后，会在 Vue 项目下生成一个&nbsp;<strong>dist</strong>&nbsp;目录，一般包含 index.html 文件及 static 目录，static 目录包含了静态文件 js、css 以及图片目录 images。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2017/01/BEE1DA18-407F-4979-9DFD-D61FB77E2671.jpg\" /></p>\r\n\r\n<p>如果直接双击 index.html 打开浏览器，页面可能是空白了，想要修改下 index.html 文件中 js、css 路径即可。</p>\r\n\r\n<p>例如我们打开 dist/index.html 文件看到路径是绝对路径：</p>\r\n\r\n<pre>\r\n&lt;link href=/static/css/app.33da80d69744798940b135da93bc7b98.css rel=stylesheet&gt;\r\n&lt;script type=text/javascript src=/static/js/app.717bb358ddc19e181140.js&gt;&lt;/script&gt;</pre>\r\n\r\n<p>我们把 js、css 路径路径修改为相对路径：</p>\r\n\r\n<pre>\r\n&lt;link href=static/css/app.33da80d69744798940b135da93bc7b98.css rel=stylesheet&gt;\r\n&lt;script type=text/javascript src=static/js/app.717bb358ddc19e181140.js&gt;&lt;/script&gt;</pre>\r\n\r\n<p>这样直接双击 dist/index.html 文件就可以在浏览器中看到效果了。</p>\r\n', 0, 0, '2021-12-14 01:37:01.557989', '2021-12-14 01:37:01.565981', 8, 5);
INSERT INTO `tb_article` VALUES (47, 'article/20211214/vue_43D1cCu.png', 'Vue.js 目录结构', 'Vue.js 目录结构', 'Vue.js 目录结构', '<h1>Vue.js 目录结构</h1>\r\n\r\n<p>上一章节中我们使用了 npm 安装项目，我们在 IDE（Eclipse、Atom等） 中打开该目录，结构如下所示：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2017/01/B6E593E3-F284-4C58-A610-94C6ACDAD485.jpg\" /></p>\r\n\r\n<h3>目录解析</h3>\r\n\r\n<table>\r\n	<thead>\r\n		<tr>\r\n			<th>目录/文件</th>\r\n			<th>说明</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td>build</td>\r\n			<td>项目构建(webpack)相关代码</td>\r\n		</tr>\r\n		<tr>\r\n			<td>config</td>\r\n			<td>配置目录，包括端口号等。我们初学可以使用默认的。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>node_modules</td>\r\n			<td>npm 加载的项目依赖模块</td>\r\n		</tr>\r\n		<tr>\r\n			<td>src</td>\r\n			<td>\r\n			<p>这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：</p>\r\n\r\n			<ul>\r\n				<li>assets: 放置一些图片，如logo等。</li>\r\n				<li>components: 目录里面放了一个组件文件，可以不用。</li>\r\n				<li>App.vue: 项目入口文件，我们也可以直接将组件写这里，而不使用 components 目录。</li>\r\n				<li>main.js: 项目的核心文件。</li>\r\n			</ul>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>static</td>\r\n			<td>静态资源目录，如图片、字体等。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>test</td>\r\n			<td>初始测试目录，可删除</td>\r\n		</tr>\r\n		<tr>\r\n			<td>.xxxx文件</td>\r\n			<td>这些是一些配置文件，包括语法配置，git配置等。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>index.html</td>\r\n			<td>首页入口文件，你可以添加一些 meta 信息或统计代码啥的。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>package.json</td>\r\n			<td>项目配置文件。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>README.md</td>\r\n			<td>项目的说明文档，markdown 格式</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>在前面我们打开 APP.vue 文件，代码如下（解释在注释中）：</p>\r\n\r\n<h2>src/APP.vue</h2>\r\n\r\n<p>&lt;!-- 展示模板 --&gt; &lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;img src=&quot;./assets/logo.png&quot;&gt; &lt;hello&gt;&lt;/hello&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; // 导入组件 import Hello from &#39;./components/Hello&#39; export default { name: &#39;app&#39;, components: { Hello } } &lt;/script&gt; &lt;!-- 样式代码 --&gt; &lt;style&gt; #app { font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px; } &lt;/style&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>接下来我们可以尝试修改下初始化的项目，将 Hello.vue 修改为以下代码：</p>\r\n\r\n<h2>src/components/Hello.vue</h2>\r\n\r\n<p>&lt;template&gt; &lt;div class=&quot;hello&quot;&gt; &lt;h1&gt;{{ msg }}&lt;/h1&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { name: &#39;hello&#39;, data () { return { msg: &#39;欢迎来到菜鸟教程！&#39; } } } &lt;/script&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>重新打开页面 http://localhost:8080/，一般修改后会自动刷新，显示效果如下所示:</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2017/01/AEDE7289-0479-4F14-A9C9-898470E5620E.jpg\" /></p>\r\n', 0, 0, '2021-12-14 01:38:13.200889', '2021-12-14 01:38:13.200889', 8, 5);
INSERT INTO `tb_article` VALUES (48, 'article/20211214/vue_W1GCOJX.png', 'Vue.js 起步', 'Vue.js 起步', 'Vue.js 起步', '<h1>Vue.js 起步</h1>\r\n\r\n<p>每个 Vue 应用都需要通过实例化 Vue 来实现。</p>\r\n\r\n<p>语法格式如下：</p>\r\n\r\n<pre>\r\nvar vm = new Vue({\r\n  // 选项\r\n})</pre>\r\n\r\n<p>接下来让我们通过实例来看下 Vue 构造器中需要哪些内容：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;div id=&quot;vue_det&quot;&gt; &lt;h1&gt;site : {{site}}&lt;/h1&gt; &lt;h1&gt;url : {{url}}&lt;/h1&gt; &lt;h1&gt;{{details()}}&lt;/h1&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; var vm = new Vue({ el: &#39;#vue_det&#39;, data: { site: &quot;菜鸟教程&quot;, url: &quot;www.runoob.com&quot;, alexa: &quot;10000&quot; }, methods: { details: function() { return this.site + &quot; - 学的不仅是技术，更是梦想！&quot;; } } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-start1\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>点击 &quot;尝试一下&quot; 按钮查看在线实例</p>\r\n\r\n<p>可以看到在 Vue 构造器中有一个el 参数，它是 DOM 元素中的 id。在上面实例中 id 为 vue_det，在 div 元素中：</p>\r\n\r\n<pre>\r\n&lt;div id = &quot;vue_det&quot;&gt;&lt;/div&gt;</pre>\r\n\r\n<p>这意味着我们接下来的改动全部在以上指定的 div 内，div 外部不受影响。</p>\r\n\r\n<p>接下来我们看看如何定义数据对象。</p>\r\n\r\n<p><strong>data</strong>&nbsp;用于定义属性，实例中有三个属性分别为：site、url、alexa。</p>\r\n\r\n<p>methods&nbsp;用于定义的函数，可以通过 return 来返回函数值。</p>\r\n\r\n<p>{{ }}&nbsp;用于输出对象属性和函数返回值。</p>\r\n\r\n<pre>\r\n&lt;div id=&quot;vue_det&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;site : {{site}}&lt;/h1&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;url : {{url}}&lt;/h1&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;{{details()}}&lt;/h1&gt;\r\n&lt;/div&gt;</pre>\r\n\r\n<p>当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，html 视图将也会产生相应的变化。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;div id=&quot;vue_det&quot;&gt; &lt;h1&gt;site : {{site}}&lt;/h1&gt; &lt;h1&gt;url : {{url}}&lt;/h1&gt; &lt;h1&gt;Alexa : {{alexa}}&lt;/h1&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; // 我们的数据对象 var data = { site: &quot;菜鸟教程&quot;, url: &quot;www.runoob.com&quot;, alexa: 10000} var vm = new Vue({ el: &#39;#vue_det&#39;, data: data }) // 它们引用相同的对象！ document.write(vm.site === data.site) // true document.write(&quot;&lt;br&gt;&quot;) // 设置属性也会影响到原始数据 vm.site = &quot;Runoob&quot; document.write(data.site + &quot;&lt;br&gt;&quot;) // Runoob // &hellip;&hellip;反之亦然 data.alexa = 1234 document.write(vm.alexa) // 1234 &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-start2\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>除了数据属性，Vue 实例还提供了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来。例如：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;div id=&quot;vue_det&quot;&gt; &lt;h1&gt;site : {{site}}&lt;/h1&gt; &lt;h1&gt;url : {{url}}&lt;/h1&gt; &lt;h1&gt;Alexa : {{alexa}}&lt;/h1&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; // 我们的数据对象 var data = { site: &quot;菜鸟教程&quot;, url: &quot;www.runoob.com&quot;, alexa: 10000} var vm = new Vue({ el: &#39;#vue_det&#39;, data: data }) document.write(vm.$data === data) // true document.write(&quot;&lt;br&gt;&quot;) document.write(vm.$el === document.getElementById(&#39;vue_det&#39;)) // true &lt;/script&gt;</p>\r\n', 1, 0, '2021-12-14 01:38:44.326917', '2021-12-14 01:38:48.219288', 8, 5);
INSERT INTO `tb_article` VALUES (49, 'article/20211214/vue_Go3ffSg.png', 'Vue.js 模板语法', 'Vue.js 模板语法', 'Vue.js 模板语法', '<h1>Vue.js 模板语法</h1>\r\n\r\n<p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。</p>\r\n\r\n<p>Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。</p>\r\n\r\n<p>结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。</p>\r\n\r\n<hr />\r\n<h2>插值</h2>\r\n\r\n<h3>文本</h3>\r\n\r\n<p>数据绑定最常见的形式就是使用 {{...}}（双大括号）的文本插值：</p>\r\n\r\n<h2>文本插值</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;p&gt;{{ message }}&lt;/p&gt; &lt;/div&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-hw\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<h3>Html</h3>\r\n\r\n<p>使用 v-html 指令用于输出 html 代码：</p>\r\n\r\n<h2>v-html 指令</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;div v-html=&quot;message&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { message: &#39;&lt;h1&gt;菜鸟教程&lt;/h1&gt;&#39; } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-html\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<h3>属性</h3>\r\n\r\n<p>HTML 属性中的值应使用 v-bind 指令。</p>\r\n\r\n<p>以下实例判断 use 的值，如果为 true 使用 class1 类的样式，否则不使用该类：</p>\r\n\r\n<h2>v-bind 指令</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;label for=&quot;r1&quot;&gt;修改颜色&lt;/label&gt;&lt;input type=&quot;checkbox&quot; v-model=&quot;use&quot; id=&quot;r1&quot;&gt; &lt;br&gt;&lt;br&gt; &lt;div v-bind:class=&quot;{&#39;class1&#39;: use}&quot;&gt; v-bind:class 指令 &lt;/div&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data:{ use: false } }); &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-bind\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<h3>表达式</h3>\r\n\r\n<p>Vue.js 都提供了完全的 JavaScript 表达式支持。</p>\r\n\r\n<h2>JavaScript 表达式</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; {{5+5}}&lt;br&gt; {{ ok ? &#39;YES&#39; : &#39;NO&#39; }}&lt;br&gt; {{ message.split(&#39;&#39;).reverse().join(&#39;&#39;) }} &lt;div v-bind:id=&quot;&#39;list-&#39; + id&quot;&gt;菜鸟教程&lt;/div&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { ok: true, message: &#39;RUNOOB&#39;, id : 1 } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-js-expr\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<hr />\r\n<h2>指令</h2>\r\n\r\n<p>指令是带有 v- 前缀的特殊属性。</p>\r\n\r\n<p>指令用于在表达式的值改变时，将某些行为应用到 DOM 上。如下例子：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { seen: true } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-if\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素。</p>\r\n\r\n<h3>参数</h3>\r\n\r\n<p>参数在指令后以冒号指明。例如， v-bind 指令被用来响应地更新 HTML 属性：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;pre&gt;&lt;a v-bind:href=&quot;url&quot;&gt;菜鸟教程&lt;/a&gt;&lt;/pre&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { url: &#39;http://www.runoob.com&#39; } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-bind-href\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>在这里 href 是参数，告知 v-bind 指令将该元素的 href 属性与表达式 url 的值绑定。</p>\r\n\r\n<p>另一个例子是 v-on 指令，它用于监听 DOM 事件：</p>\r\n\r\n<pre>\r\n&lt;a v-on:click=&quot;doSomething&quot;&gt;</pre>\r\n\r\n<p>在这里参数是监听的事件名。</p>\r\n\r\n<h3>修饰符</h3>\r\n\r\n<p>修饰符是以半角句号&nbsp;.&nbsp;指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，<strong>.prevent</strong>&nbsp;修饰符告诉&nbsp;v-on&nbsp;指令对于触发的事件调用&nbsp;<strong>event.preventDefault()</strong>：</p>\r\n\r\n<pre>\r\n&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</pre>\r\n\r\n<hr />\r\n<h2>用户输入</h2>\r\n\r\n<p>在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定：</p>\r\n\r\n<h2>双向数据绑定</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;p&gt;{{ message }}&lt;/p&gt; &lt;input v-model=&quot;message&quot;&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { message: &#39;Runoob!&#39; } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-model\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>v-model&nbsp;指令用来在 input、select、textarea、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。</p>\r\n\r\n<p>按钮的事件我们可以使用 v-on 监听事件，并对用户的输入进行响应。</p>\r\n\r\n<p>以下实例在用户点击按钮后对字符串进行反转操作：</p>\r\n\r\n<h2>字符串反转</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;p&gt;{{ message }}&lt;/p&gt; &lt;button v-on:click=&quot;reverseMessage&quot;&gt;反转字符串&lt;/button&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { message: &#39;Runoob!&#39; }, methods: { reverseMessage: function () { this.message = this.message.split(&#39;&#39;).reverse().join(&#39;&#39;) } } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-reverse-message\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<hr />\r\n<h2>过滤器</h2>\r\n\r\n<p>Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由&quot;管道符&quot;指示, 格式如下：</p>\r\n\r\n<pre>\r\n&lt;!-- 在两个大括号中 --&gt;\r\n{{ message | capitalize }}\r\n\r\n&lt;!-- 在 v-bind 指令中 --&gt;\r\n&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;</pre>\r\n\r\n<p>过滤器函数接受表达式的值作为第一个参数。</p>\r\n\r\n<p>以下实例对输入的字符串第一个字母转为大写：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; {{ message | capitalize }} &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { message: &#39;runoob&#39; }, filters: { capitalize: function (value) { if (!value) return &#39;&#39; value = value.toString() return value.charAt(0).toUpperCase() + value.slice(1) } } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-filters-capitalize\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>过滤器可以串联：</p>\r\n\r\n<pre>\r\n{{ message | filterA | filterB }}</pre>\r\n\r\n<p>过滤器是 JavaScript 函数，因此可以接受参数：</p>\r\n\r\n<pre>\r\n{{ message | filterA(&#39;arg1&#39;, arg2) }}</pre>\r\n\r\n<p>这里，message 是第一个参数，字符串 &#39;arg1&#39; 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。</p>\r\n\r\n<hr />\r\n<h2>缩写</h2>\r\n\r\n<h3>v-bind 缩写</h3>\r\n\r\n<p>Vue.js 为两个最为常用的指令提供了特别的缩写：</p>\r\n\r\n<pre>\r\n&lt;!-- 完整语法 --&gt;\r\n&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;\r\n&lt;!-- 缩写 --&gt;\r\n&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;</pre>\r\n\r\n<h3>v-on 缩写</h3>\r\n\r\n<pre>\r\n&lt;!-- 完整语法 --&gt;\r\n&lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;\r\n&lt;!-- 缩写 --&gt;\r\n&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;</pre>\r\n', 0, 0, '2021-12-14 01:39:25.033293', '2021-12-14 01:39:25.041293', 8, 5);
INSERT INTO `tb_article` VALUES (50, 'article/20211214/vue_091XQAh.png', 'Vue.js 条件语句', 'Vue.js 条件语句', 'Vue.js 条件语句', '<h1>Vue.js 条件语句</h1>\r\n\r\n<h2>条件判断</h2>\r\n\r\n<h3>v-if</h3>\r\n\r\n<p>条件判断使用 v-if 指令：</p>\r\n\r\n<h2>v-if 指令</h2>\r\n\r\n<p>在元素 和 template 中使用 v-if 指令：</p>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt; &lt;template v-if=&quot;ok&quot;&gt; &lt;h1&gt;菜鸟教程&lt;/h1&gt; &lt;p&gt;学的不仅是技术，更是梦想！&lt;/p&gt; &lt;p&gt;哈哈哈，打字辛苦啊！！！&lt;/p&gt; &lt;/template&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { seen: true, ok: true } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-if\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素。</p>\r\n\r\n<p>在字符串模板中，如 Handlebars ，我们得像这样写一个条件块：</p>\r\n\r\n<pre>\r\n&lt;!-- Handlebars 模板 --&gt;\r\n{{#if ok}}\r\n  &lt;h1&gt;Yes&lt;/h1&gt;\r\n{{/if}}</pre>\r\n\r\n<h3>v-else</h3>\r\n\r\n<p>可以用 v-else 指令给 v-if 添加一个 &quot;else&quot; 块：</p>\r\n\r\n<h2>v-else 指令</h2>\r\n\r\n<p>随机生成一个数字，判断是否大于0.5，然后输出对应信息：</p>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;div v-if=&quot;Math.random() &gt; 0.5&quot;&gt; Sorry &lt;/div&gt; &lt;div v-else&gt; Not sorry &lt;/div&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39; }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-if-else\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<h3>v-else-if</h3>\r\n\r\n<p>v-else-if 在 2.1.0 新增，顾名思义，用作 v-if 的 else-if 块。可以链式的多次使用：</p>\r\n\r\n<h2>v-else 指令</h2>\r\n\r\n<p>判断 type 变量的值：</p>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;div v-if=&quot;type === &#39;A&#39;&quot;&gt; A &lt;/div&gt; &lt;div v-else-if=&quot;type === &#39;B&#39;&quot;&gt; B &lt;/div&gt; &lt;div v-else-if=&quot;type === &#39;C&#39;&quot;&gt; C &lt;/div&gt; &lt;div v-else&gt; Not A/B/C &lt;/div&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { type: &#39;C&#39; } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-else-if\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<blockquote>\r\n<p>v-else 、v-else-if 必须跟在 v-if 或者 v-else-if之后。</p>\r\n</blockquote>\r\n\r\n<h3>v-show</h3>\r\n\r\n<p>我们也可以使用 v-show 指令来根据条件展示元素：</p>\r\n\r\n<h2>v-show 指令</h2>\r\n\r\n<p>&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</p>\r\n', 0, 0, '2021-12-14 02:08:46.929236', '2021-12-14 02:08:46.933231', 8, 5);
INSERT INTO `tb_article` VALUES (51, 'article/20211214/vue_zl0OjER.png', 'Vue.js 循环语句', 'Vue.js 循环语句', 'Vue.js 循环语句', '<h2>Vue.js 循环语句</h2>\r\n\r\n<p>循环使用 v-for 指令。</p>\r\n\r\n<p>v-for 指令需要以&nbsp;<strong>site in sites</strong>&nbsp;形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。</p>\r\n\r\n<p>v-for 可以绑定数据到数组来渲染一个列表：</p>\r\n\r\n<h2>v-for 指令</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;ol&gt; &lt;li v-for=&quot;site in sites&quot;&gt; {{ site.name }} &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { sites: [ { name: &#39;Runoob&#39; }, { name: &#39;Google&#39; }, { name: &#39;Taobao&#39; } ] } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-for\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>模板中使用 v-for：</p>\r\n\r\n<h2>v-for</h2>\r\n\r\n<p>&lt;ul&gt; &lt;template v-for=&quot;site in sites&quot;&gt; &lt;li&gt;{{ site.name }}&lt;/li&gt; &lt;li&gt;--------------&lt;/li&gt; &lt;/template&gt; &lt;/ul&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-for2\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<h3>v-for 迭代对象</h3>\r\n\r\n<p>v-for 可以通过一个对象的属性来迭代数据：</p>\r\n\r\n<h2>v-for</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;ul&gt; &lt;li v-for=&quot;value in object&quot;&gt; {{ value }} &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { object: { name: &#39;菜鸟教程&#39;, url: &#39;http://www.runoob.com&#39;, slogan: &#39;学的不仅是技术，更是梦想！&#39; } } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-for-obj\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>你也可以提供第二个的参数为键名：</p>\r\n\r\n<h2>v-for</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;ul&gt; &lt;li v-for=&quot;(value, key) in object&quot;&gt; {{ key }} : {{ value }} &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-for-obj2\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>第三个参数为索引：</p>\r\n\r\n<h2>v-for</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;ul&gt; &lt;li v-for=&quot;(value, key, index) in object&quot;&gt; {{ index }}. {{ key }} : {{ value }} &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-for-obj3\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<h3>v-for 迭代整数</h3>\r\n\r\n<p>v-for 也可以循环整数</p>\r\n\r\n<h2>v-for</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;ul&gt; &lt;li v-for=&quot;n in 10&quot;&gt; {{ n }} &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;</p>\r\n', 0, 0, '2021-12-14 02:09:15.671199', '2021-12-14 02:09:15.677199', 8, 5);
INSERT INTO `tb_article` VALUES (52, 'article/20211214/vue_LZpVlyU.png', 'Vue.js 计算属性', 'Vue.js 计算属性', 'Vue.js 计算属性', '<h1>Vue.js 计算属性</h1>\r\n\r\n<p>计算属性关键词:&nbsp;computed。</p>\r\n\r\n<p>计算属性在处理一些复杂逻辑时是很有用的。</p>\r\n\r\n<p>可以看下以下反转字符串的例子：</p>\r\n\r\n<h2>实例 1</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; {{ message.split(&#39;&#39;).reverse().join(&#39;&#39;) }} &lt;/div&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-str-reverse1\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>实例 1 中模板变的很复杂起来，也不容易看懂理解。</p>\r\n\r\n<p>接下来我们看看使用了计算属性的实例：</p>\r\n\r\n<h2>实例 2</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;p&gt;原始字符串: {{ message }}&lt;/p&gt; &lt;p&gt;计算后反转字符串: {{ reversedMessage }}&lt;/p&gt; &lt;/div&gt; &lt;script&gt; var vm = new Vue({ el: &#39;#app&#39;, data: { message: &#39;Runoob!&#39; }, computed: { // 计算属性的 getter reversedMessage: function () { // `this` 指向 vm 实例 return this.message.split(&#39;&#39;).reverse().join(&#39;&#39;) } } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-str-reverse2\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>实例 2 中声明了一个计算属性 reversedMessage 。</p>\r\n\r\n<p>提供的函数将用作属性 vm.reversedMessage 的 getter 。</p>\r\n\r\n<p>vm.reversedMessage 依赖于 vm.message，在 vm.message 发生改变时，vm.reversedMessage 也会更新。</p>\r\n\r\n<hr />\r\n<h2>computed vs methods</h2>\r\n\r\n<p>我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。</p>\r\n\r\n<h2>实例 3</h2>\r\n\r\n<p>methods: { reversedMessage2: function () { return this.message.split(&#39;&#39;).reverse().join(&#39;&#39;) } }</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-str-reverse3\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>可以说使用 computed 性能会更好，但是如果你不希望缓存，你可以使用 methods 属性。</p>\r\n\r\n<hr />\r\n<h2>computed setter</h2>\r\n\r\n<p>computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：</p>\r\n\r\n<h2>实例 4</h2>\r\n\r\n<p>var vm = new Vue({ el: &#39;#app&#39;, data: { name: &#39;Google&#39;, url: &#39;http://www.google.com&#39; }, computed: { site: { // getter get: function () { return this.name + &#39; &#39; + this.url }, // setter set: function (newValue) { var names = newValue.split(&#39; &#39;) this.name = names[0] this.url = names[names.length - 1] } } } }) // 调用 setter， vm.name 和 vm.url 也会被对应更新 vm.site = &#39;菜鸟教程 http://www.runoob.com&#39;; document.write(&#39;name: &#39; + vm.name); document.write(&#39;&lt;br&gt;&#39;); document.write(&#39;url: &#39; + vm.url);</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-str-reverse4\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>从实例运行结果看在运行 vm.site = &#39;菜鸟教程 http://www.runoob.com&#39;; 时，setter 会被调用， vm.name 和 vm.url 也会被对应更新。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2017/01/D85D293B-FC10-45A6-90BA-F693ECBE8726.jpg\" /></p>\r\n', 0, 0, '2021-12-14 02:09:44.824306', '2021-12-14 02:09:44.828302', 8, 5);
INSERT INTO `tb_article` VALUES (53, 'article/20211214/vue_N2XaHPi.png', 'Vue.js 监听属性', 'Vue.js 监听属性', 'Vue.js 监听属性', '<h1>Vue.js 监听属性</h1>\r\n\r\n<p>本章节，我们将为大家介绍 Vue.js 监听属性 watch，我们可以通过 watch 来响应数据的变化。</p>\r\n\r\n<p>以下实例通过使用 watch 实现计数器：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;div id = &quot;app&quot;&gt; &lt;p style = &quot;font-size:25px;&quot;&gt;计数器: {{ counter }}&lt;/p&gt; &lt;button @click = &quot;counter++&quot; style = &quot;font-size:25px;&quot;&gt;点我&lt;/button&gt; &lt;/div&gt; &lt;script type = &quot;text/javascript&quot;&gt; var vm = new Vue({ el: &#39;#app&#39;, data: { counter: 1 } }); vm.$watch(&#39;counter&#39;, function(nval, oval) { alert(&#39;计数器值的变化 :&#39; + oval + &#39; 变为 &#39; + nval + &#39;!&#39;); }); &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-watch3\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>以下实例进行<strong>千米</strong>与<strong>米</strong>之间的换算：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;div id = &quot;computed_props&quot;&gt; 千米 : &lt;input type = &quot;text&quot; v-model = &quot;kilometers&quot;&gt; 米 : &lt;input type = &quot;text&quot; v-model = &quot;meters&quot;&gt; &lt;/div&gt; &lt;p id=&quot;info&quot;&gt;&lt;/p&gt; &lt;script type = &quot;text/javascript&quot;&gt; var vm = new Vue({ el: &#39;#computed_props&#39;, data: { kilometers : 0, meters:0 }, methods: { }, computed :{ }, watch : { kilometers:function(val) { this.kilometers = val; this.meters = this.kilometers * 1000 }, meters : function (val) { this.kilometers = val/ 1000; this.meters = val; } } }); // $watch 是一个实例方法 vm.$watch(&#39;kilometers&#39;, function (newValue, oldValue) { // 这个回调将在 vm.kilometers 改变后调用 document.getElementById (&quot;info&quot;).innerHTML = &quot;修改前值为: &quot; + oldValue + &quot;，修改后值为: &quot; + newValue; }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-watch\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>点击 &quot;尝试一下&quot; 按钮查看在线实例</p>\r\n\r\n<p>以上代码中我们创建了两个输入框，data 属性中， kilometers 和 meters 初始值都为 0。watch 对象创建了 data 对象的两个监控方法： kilometers 和 meters。</p>\r\n\r\n<p>当我们再输入框输入数据时，watch 会实时监听数据变化并改变自身的值。</p>\r\n\r\n<p>&nbsp;</p>\r\n', 1, 0, '2021-12-14 02:10:19.282422', '2021-12-14 06:58:28.264341', 8, 5);
INSERT INTO `tb_article` VALUES (54, 'article/20211214/vue_d5qsL9W.png', 'Vue.js 样式绑定', 'Vue.js 样式绑定', 'Vue.js 样式绑定', '<h1>Vue.js 样式绑定</h1>\r\n\r\n<h2>Vue.js class</h2>\r\n\r\n<p>class 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。</p>\r\n\r\n<p>Vue.js v-bind 在处理 class 和 style 时， 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。</p>\r\n\r\n<hr />\r\n<h2>class 属性绑定</h2>\r\n\r\n<p>我们可以为 v-bind:class 设置一个对象，从而动态的切换 class:</p>\r\n\r\n<h2>实例 1</h2>\r\n\r\n<p>实例中将 isActive 设置为 true 显示了一个绿色的 div 块，如果设置为 false 则不显示：</p>\r\n\r\n<p>&lt;div v-bind:class=&quot;{ &#39;active&#39;: isActive }&quot;&gt;&lt;/div&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-class1\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>以上实例 div class 为：</p>\r\n\r\n<pre>\r\n&lt;div class=&quot;active&quot;&gt;&lt;/div&gt;</pre>\r\n\r\n<p>我们也可以在对象中传入更多属性用来动态切换多个 class 。</p>\r\n\r\n<h2>实例 2</h2>\r\n\r\n<p>text-danger 类背景颜色覆盖了 active 类的背景色：</p>\r\n\r\n<p>&lt;div class=&quot;static&quot; v-bind:class=&quot;{ &#39;active&#39; : isActive, &#39;text-danger&#39; : hasError }&quot;&gt; &lt;/div&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-class2\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>以上实例 div class 为：</p>\r\n\r\n<pre>\r\n&lt;div class=&quot;static active text-danger&quot;&gt;&lt;/div&gt;</pre>\r\n\r\n<p>我们也可以直接绑定数据里的一个对象：</p>\r\n\r\n<h2>实例 3</h2>\r\n\r\n<p>text-danger 类背景颜色覆盖了 active 类的背景色：</p>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt; &lt;/div&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-class3\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>实例 3 与 实例 2 的渲染结果是一样的。</p>\r\n\r\n<p>此外，我们也可以在这里绑定返回对象的计算属性。这是一个常用且强大的模式：</p>\r\n\r\n<h2>实例 4</h2>\r\n\r\n<p>new Vue({ el: &#39;#app&#39;, data: { isActive: true, error: { value: true, type: &#39;fatal&#39; } }, computed: { classObject: function () { return { base: true, active: this.isActive &amp;&amp; !this.error.value, &#39;text-danger&#39;: this.error.value &amp;&amp; this.error.type === &#39;fatal&#39;, } } } })</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-class4\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<h3>数组语法</h3>\r\n\r\n<p>我们可以把一个数组传给&nbsp;<strong>v-bind:class</strong>&nbsp;，实例如下：</p>\r\n\r\n<h2>实例 5</h2>\r\n\r\n<p>&lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-class5\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>以上实例 div class 为：</p>\r\n\r\n<pre>\r\n&lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt;</pre>\r\n\r\n<p>我们还可以使用三元表达式来切换列表中的 class ：</p>\r\n\r\n<h2>实例 6</h2>\r\n\r\n<p>errorClass 是始终存在的，isActive 为 true 时添加 activeClass 类：</p>\r\n\r\n<p>&lt;div v-bind:class=&quot;[errorClass ,isActive ? activeClass : &#39;&#39;]&quot;&gt;&lt;/div&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-class6\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<hr />\r\n<h2>&nbsp;</h2>\r\n\r\n<h2>Vue.js style(内联样式)</h2>\r\n\r\n<p>我们可以在&nbsp;<strong>v-bind:style</strong>&nbsp;直接设置样式：</p>\r\n\r\n<h2>实例 7</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;div v-bind:style=&quot;{ color: activeColor, fontSize: fontSize + &#39;px&#39; }&quot;&gt;菜鸟教程&lt;/div&gt; &lt;/div&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-class7\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>以上实例 div style 为：</p>\r\n\r\n<pre>\r\n&lt;div style=&quot;color: green; font-size: 30px;&quot;&gt;菜鸟教程&lt;/div&gt;</pre>\r\n\r\n<p>也可以直接绑定到一个样式对象，让模板更清晰：</p>\r\n\r\n<h2>实例 8</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;div v-bind:style=&quot;styleObject&quot;&gt;菜鸟教程&lt;/div&gt; &lt;/div&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-class8\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>v-bind:style 可以使用数组将多个样式对象应用到一个元素上：</p>\r\n\r\n<h2>实例 9</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;菜鸟教程&lt;/div&gt; &lt;/div&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-class9\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<blockquote>\r\n<p>注意：当&nbsp;<strong>v-bind:style</strong>&nbsp;使用需要特定前缀的 CSS 属性时，如 transform ，Vue.js 会自动侦测并添加相应的前缀。</p>\r\n</blockquote>\r\n', 0, 0, '2021-12-14 02:10:51.708485', '2021-12-14 02:10:51.735474', 8, 5);
INSERT INTO `tb_article` VALUES (55, 'article/20211214/vue_C7zeozu.png', 'Vue.js 事件处理器', 'Vue.js 事件处理器', 'Vue.js 事件处理器', '<h1>Vue.js 事件处理器</h1>\r\n\r\n<p>事件监听可以使用 v-on 指令：</p>\r\n\r\n<h2>v-on</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;button v-on:click=&quot;counter += 1&quot;&gt;增加 1&lt;/button&gt; &lt;p&gt;这个按钮被点击了 {{ counter }} 次。&lt;/p&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { counter: 0 } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-on\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>通常情况下，我们需要使用一个方法来调用 JavaScript 方法。</p>\r\n\r\n<p>v-on 可以接收一个定义的方法来调用。</p>\r\n\r\n<h2>v-on</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;!-- `greet` 是在下面定义的方法名 --&gt; &lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt; &lt;/div&gt; &lt;script&gt; var app = new Vue({ el: &#39;#app&#39;, data: { name: &#39;Vue.js&#39; }, // 在 `methods` 对象中定义方法 methods: { greet: function (event) { // `this` 在方法里指当前 Vue 实例 alert(&#39;Hello &#39; + this.name + &#39;!&#39;) // `event` 是原生 DOM 事件 if (event) { alert(event.target.tagName) } } } }) // 也可以用 JavaScript 直接调用方法 app.greet() // -&gt; &#39;Hello Vue.js!&#39; &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-on2\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>除了直接绑定到一个方法，也可以用内联 JavaScript 语句：</p>\r\n\r\n<h2>v-on</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;button v-on:click=&quot;say(&#39;hi&#39;)&quot;&gt;Say hi&lt;/button&gt; &lt;button v-on:click=&quot;say(&#39;what&#39;)&quot;&gt;Say what&lt;/button&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, methods: { say: function (message) { alert(message) } } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-v-on3\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<h3>事件修饰符</h3>\r\n\r\n<p>Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。</p>\r\n\r\n<p>Vue.js 通过由点&nbsp;.&nbsp;表示的指令后缀来调用修饰符。</p>\r\n\r\n<ul>\r\n	<li><code>.stop</code>&nbsp;- 阻止冒泡</li>\r\n	<li><code>.prevent</code>&nbsp;- 阻止默认事件</li>\r\n	<li><code>.capture</code>&nbsp;- 阻止捕获</li>\r\n	<li><code>.self</code>&nbsp;- 只监听触发该元素的事件</li>\r\n	<li><code>.once</code>&nbsp;- 只触发一次</li>\r\n	<li><code>.left</code>&nbsp;- 左键事件</li>\r\n	<li><code>.right</code>&nbsp;- 右键事件</li>\r\n	<li><code>.middle</code>&nbsp;- 中间滚轮事件</li>\r\n</ul>\r\n\r\n<pre>\r\n&lt;!-- 阻止单击事件冒泡 --&gt;\r\n&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;\r\n&lt;!-- 提交事件不再重载页面 --&gt;\r\n&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;\r\n&lt;!-- 修饰符可以串联  --&gt;\r\n&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;\r\n&lt;!-- 只有修饰符 --&gt;\r\n&lt;form v-on:submit.prevent&gt;&lt;/form&gt;\r\n&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;\r\n&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;\r\n&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;\r\n&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;\r\n\r\n&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;\r\n&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</pre>\r\n\r\n<h3>按键修饰符</h3>\r\n\r\n<p>Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：</p>\r\n\r\n<pre>\r\n&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;\r\n&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</pre>\r\n\r\n<p>记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</p>\r\n\r\n<pre>\r\n&lt;!-- 同上 --&gt;\r\n&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;\r\n&lt;!-- 缩写语法 --&gt;\r\n&lt;input @keyup.enter=&quot;submit&quot;&gt;</pre>\r\n\r\n<p>全部的按键别名：</p>\r\n\r\n<ul>\r\n	<li><code>.enter</code></li>\r\n	<li><code>.tab</code></li>\r\n	<li><code>.delete</code>&nbsp;(捕获 &quot;删除&quot; 和 &quot;退格&quot; 键)</li>\r\n	<li><code>.esc</code></li>\r\n	<li><code>.space</code></li>\r\n	<li><code>.up</code></li>\r\n	<li><code>.down</code></li>\r\n	<li><code>.left</code></li>\r\n	<li><code>.right</code></li>\r\n	<li><code>.ctrl</code></li>\r\n	<li><code>.alt</code></li>\r\n	<li><code>.shift</code></li>\r\n	<li><code>.meta</code></li>\r\n</ul>\r\n\r\n<p>实例</p>\r\n\r\n<pre>\r\n&lt;p&gt;&lt;!-- Alt + C --&gt;\r\n&lt;input @keyup.alt.67=&quot;clear&quot;&gt;\r\n&lt;!-- Ctrl + Click --&gt;\r\n&lt;div @click.ctrl=&quot;doSomething&quot;&gt;Do something&lt;/div&gt;</pre>\r\n', 0, 0, '2021-12-14 02:11:32.103653', '2021-12-14 02:11:32.107664', 8, 5);
INSERT INTO `tb_article` VALUES (56, 'article/20211214/vue_tTkUlJl.png', 'Vue.js 表单', 'Vue.js 表单', 'Vue.js 表单', '<h1>Vue.js 表单</h1>\r\n\r\n<p>这节我们为大家介绍 Vue.js 表单上的应用。</p>\r\n\r\n<p>你可以用 v-model 指令在表单控件元素上创建双向数据绑定。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2017/01/20151109171527_549.png\" /></p>\r\n\r\n<p>v-model 会根据控件类型自动选取正确的方法来更新元素。</p>\r\n\r\n<h2>输入框</h2>\r\n\r\n<p>实例中演示了 input 和 textarea 元素中使用 v-model 实现双向数据绑定：</p>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;p&gt;input 元素：&lt;/p&gt; &lt;input v-model=&quot;message&quot; placeholder=&quot;编辑我&hellip;&hellip;&quot;&gt; &lt;p&gt;消息是: {{ message }}&lt;/p&gt; &lt;p&gt;textarea 元素：&lt;/p&gt; &lt;p style=&quot;white-space: pre&quot;&gt;{{ message2 }}&lt;/p&gt; &lt;textarea v-model=&quot;message2&quot; placeholder=&quot;多行文本输入&hellip;&hellip;&quot;&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { message: &#39;Runoob&#39;, message2: &#39;菜鸟教程\\r\\nhttp://www.runoob.com&#39; } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-form1\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<h3>复选框</h3>\r\n\r\n<p>复选框如果是一个为逻辑值，如果是多个则绑定到同一个数组：</p>\r\n\r\n<h2>复选框</h2>\r\n\r\n<p>以下实例中演示了复选框的双向数据绑定：</p>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;p&gt;单个复选框：&lt;/p&gt; &lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot;&gt; &lt;label for=&quot;checkbox&quot;&gt;{{ checked }}&lt;/label&gt; &lt;p&gt;多个复选框：&lt;/p&gt; &lt;input type=&quot;checkbox&quot; id=&quot;runoob&quot; value=&quot;Runoob&quot; v-model=&quot;checkedNames&quot;&gt; &lt;label for=&quot;runoob&quot;&gt;Runoob&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;google&quot; value=&quot;Google&quot; v-model=&quot;checkedNames&quot;&gt; &lt;label for=&quot;google&quot;&gt;Google&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;taobao&quot; value=&quot;Taobao&quot; v-model=&quot;checkedNames&quot;&gt; &lt;label for=&quot;taobao&quot;&gt;taobao&lt;/label&gt; &lt;br&gt; &lt;span&gt;选择的值为: {{ checkedNames }}&lt;/span&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { checked : false, checkedNames: [] } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-form2\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>实例中勾选复选框效果如下所示：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2017/01/F6855065-AA5E-4BD7-B1F6-2350D4B4B1BB.jpg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>单选按钮</h3>\r\n\r\n<p>以下实例中演示了单选按钮的双向数据绑定：</p>\r\n\r\n<h2>单选按钮</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;input type=&quot;radio&quot; id=&quot;runoob&quot; value=&quot;Runoob&quot; v-model=&quot;picked&quot;&gt; &lt;label for=&quot;runoob&quot;&gt;Runoob&lt;/label&gt; &lt;br&gt; &lt;input type=&quot;radio&quot; id=&quot;google&quot; value=&quot;Google&quot; v-model=&quot;picked&quot;&gt; &lt;label for=&quot;google&quot;&gt;Google&lt;/label&gt; &lt;br&gt; &lt;span&gt;选中值为: {{ picked }}&lt;/span&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { picked : &#39;Runoob&#39; } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-form3\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>选中后，效果如下图所示：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2017/01/F60DA836-0E62-4C78-AEE0-2CFD6A2AE498.jpg\" /></p>\r\n\r\n<h3>select 列表</h3>\r\n\r\n<p>以下实例中演示了下拉列表的双向数据绑定：</p>\r\n\r\n<h2>select</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;select v-model=&quot;selected&quot; name=&quot;fruit&quot;&gt; &lt;option value=&quot;&quot;&gt;选择一个网站&lt;/option&gt; &lt;option value=&quot;www.runoob.com&quot;&gt;Runoob&lt;/option&gt; &lt;option value=&quot;www.google.com&quot;&gt;Google&lt;/option&gt; &lt;/select&gt; &lt;div id=&quot;output&quot;&gt; 选择的网站是: {{selected}} &lt;/div&gt; &lt;/div&gt; &lt;script&gt; new Vue({ el: &#39;#app&#39;, data: { selected: &#39;&#39; } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-form4\" rel=\"noopener\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>选取 Runoob，输出效果如下所示：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2017/01/D9FC72B9-35C1-4189-830F-87FD0A6734F8-1.jpg\" /></p>\r\n\r\n<hr />\r\n<h2>修饰符</h2>\r\n\r\n<h3>.lazy</h3>\r\n\r\n<p>在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：</p>\r\n\r\n<pre>\r\n&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;\r\n&lt;input v-model.lazy=&quot;msg&quot; &gt;</pre>\r\n\r\n<h3>.number</h3>\r\n\r\n<p>如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：</p>\r\n\r\n<pre>\r\n&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</pre>\r\n\r\n<p>这通常很有用，因为在 type=&quot;number&quot; 时 HTML 中输入的值也总是会返回字符串类型。</p>\r\n\r\n<h3>.trim</h3>\r\n\r\n<p>如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：</p>\r\n\r\n<pre>\r\n&lt;input v-model.trim=&quot;msg&quot;&gt;</pre>\r\n', 2, 1, '2021-12-14 02:12:12.778969', '2021-12-14 04:38:35.584465', 8, 5);
INSERT INTO `tb_article` VALUES (57, 'article/20211214/vue_I4B0aKY.png', 'Vue.js 组件', 'Vue.js 组件', 'Vue.js 组件', '<h1>Vue.js 组件</h1>\r\n\r\n<p>组件（Component）是 Vue.js 最强大的功能之一。</p>\r\n\r\n<p>组件可以扩展 HTML 元素，封装可重用的代码。</p>\r\n\r\n<p>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2017/01/components.png\" /></p>\r\n\r\n<p>注册一个全局组件语法格式如下：</p>\r\n\r\n<pre>\r\nVue.component(tagName, options)</pre>\r\n\r\n<p>tagName 为组件名，options 为配置选项。注册后，我们可以使用以下方式来调用组件：</p>\r\n\r\n<pre>\r\n&lt;tagName&gt;&lt;/tagName&gt;</pre>\r\n\r\n<h3>全局组件</h3>\r\n\r\n<p>所有实例都能用全局组件。</p>\r\n\r\n<h2>全局组件实例</h2>\r\n\r\n<p>注册一个简单的全局组件 runoob，并使用它：</p>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;runoob&gt;&lt;/runoob&gt; &lt;/div&gt; &lt;script&gt; // 注册 Vue.component(&#39;runoob&#39;, { template: &#39;&lt;h1&gt;自定义组件!&lt;/h1&gt;&#39; }) // 创建根实例 new Vue({ el: &#39;#app&#39; }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-component1\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<h3>局部组件</h3>\r\n\r\n<p>我们也可以在实例选项中注册局部组件，这样组件只能在这个实例中使用：</p>\r\n\r\n<h2>局部组件实例</h2>\r\n\r\n<p>注册一个简单的局部组件 runoob，并使用它：</p>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;runoob&gt;&lt;/runoob&gt; &lt;/div&gt; &lt;script&gt; var Child = { template: &#39;&lt;h1&gt;自定义组件!&lt;/h1&gt;&#39; } // 创建根实例 new Vue({ el: &#39;#app&#39;, components: { // &lt;runoob&gt; 将只在父模板可用 &#39;runoob&#39;: Child } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-component2\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<hr />\r\n<h2>Prop</h2>\r\n\r\n<p>prop 是子组件用来接受父组件传递过来的数据的一个自定义属性。</p>\r\n\r\n<p>父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 &quot;prop&quot;：</p>\r\n\r\n<h2>Prop 实例</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;child message=&quot;hello!&quot;&gt;&lt;/child&gt; &lt;/div&gt; &lt;script&gt; // 注册 Vue.component(&#39;child&#39;, { // 声明 props props: [&#39;message&#39;], // 同样也可以在 vm 实例中像 &quot;this.message&quot; 这样使用 template: &#39;&lt;span&gt;{{ message }}&lt;/span&gt;&#39; }) // 创建根实例 new Vue({ el: &#39;#app&#39; }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-component3\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<h3>动态 Prop</h3>\r\n\r\n<p>类似于用 v-bind 绑定 HTML 特性到一个表达式，也可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件：</p>\r\n\r\n<h2>Prop 实例</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;div&gt; &lt;input v-model=&quot;parentMsg&quot;&gt; &lt;br&gt; &lt;child v-bind:message=&quot;parentMsg&quot;&gt;&lt;/child&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; // 注册 Vue.component(&#39;child&#39;, { // 声明 props props: [&#39;message&#39;], // 同样也可以在 vm 实例中像 &quot;this.message&quot; 这样使用 template: &#39;&lt;span&gt;{{ message }}&lt;/span&gt;&#39; }) // 创建根实例 new Vue({ el: &#39;#app&#39;, data: { parentMsg: &#39;父组件内容&#39; } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-component4\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>以下实例中使用 v-bind 指令将 todo 传到每一个重复的组件中：</p>\r\n\r\n<h2>Prop 实例</h2>\r\n\r\n<p>&lt;div id=&quot;app&quot;&gt; &lt;ol&gt; &lt;todo-item v-for=&quot;item in sites&quot; v-bind:todo=&quot;item&quot;&gt;&lt;/todo-item&gt; &lt;/ol&gt; &lt;/div&gt; &lt;script&gt; Vue.component(&#39;todo-item&#39;, { props: [&#39;todo&#39;], template: &#39;&lt;li&gt;{{ todo.text }}&lt;/li&gt;&#39; }) new Vue({ el: &#39;#app&#39;, data: { sites: [ { text: &#39;Runoob&#39; }, { text: &#39;Google&#39; }, { text: &#39;Taobao&#39; } ] } }) &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=vue2-component5\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。</p>\r\n\r\n<h3>Prop 验证</h3>\r\n\r\n<p>组件可以为 props 指定验证要求。</p>\r\n\r\n<p>为了定制 prop 的验证方式，你可以为 props 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如：</p>\r\n\r\n<pre>\r\nVue.component(&#39;my-component&#39;, {\r\n  props: {\r\n    // 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)\r\n    propA: Number,\r\n    // 多个可能的类型\r\n    propB: [String, Number],\r\n    // 必填的字符串\r\n    propC: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // 带有默认值的数字\r\n    propD: {\r\n      type: Number,\r\n      default: 100\r\n    },\r\n    // 带有默认值的对象\r\n    propE: {\r\n      type: Object,\r\n      // 对象或数组默认值必须从一个工厂函数获取\r\n      default: function () {\r\n        return { message: &#39;hello&#39; }\r\n      }\r\n    },\r\n    // 自定义验证函数\r\n    propF: {\r\n      validator: function (value) {\r\n        // 这个值必须匹配下列字符串中的一个\r\n        return [&#39;success&#39;, &#39;warning&#39;, &#39;danger&#39;].indexOf(value) !== -1\r\n      }\r\n    }\r\n  }\r\n})</pre>\r\n\r\n<p>当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。</p>\r\n\r\n<p>type 可以是下面原生构造器：</p>\r\n\r\n<ul>\r\n	<li><code>String</code></li>\r\n	<li><code>Number</code></li>\r\n	<li><code>Boolean</code></li>\r\n	<li><code>Array</code></li>\r\n	<li><code>Object</code></li>\r\n	<li><code>Date</code></li>\r\n	<li><code>Function</code></li>\r\n	<li><code>Symbol</code></li>\r\n</ul>\r\n\r\n<p>type 也可以是一个自定义构造器，使用 instanceof 检测。</p>\r\n', 2, 0, '2021-12-14 02:13:18.636922', '2021-12-21 08:47:20.014514', 8, 5);
INSERT INTO `tb_article` VALUES (58, 'article/20211214/java.jpg', 'Java 简介', 'Java 简介', 'Java 简介', '<h1>Java 简介</h1>\r\n\r\n<p>Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称。由 James Gosling和同事们共同研发，并在 1995 年正式推出。</p>\r\n\r\n<p>后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。</p>\r\n\r\n<p>Java分为三个体系：</p>\r\n\r\n<ul>\r\n	<li>JavaSE（J2SE）（Java2 Platform Standard Edition，java平台标准版）</li>\r\n	<li>JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)</li>\r\n	<li>JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)。</li>\r\n</ul>\r\n\r\n<p>2005 年 6 月，JavaOne 大会召开，SUN 公司公开 Java SE 6。此时，Java 的各种版本已经更名，以取消其中的数字 &quot;2&quot;：J2EE 更名为 Java EE，J2SE 更名为Java SE，J2ME 更名为 Java ME。</p>\r\n\r\n<hr />\r\n<h2>主要特性</h2>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Java 语言是简单的：</strong></p>\r\n\r\n	<p>Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Java 语言是面向对象的：</strong></p>\r\n\r\n	<p>Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Java语言是分布式的：</strong></p>\r\n\r\n	<p>Java 语言支持 Internet 应用的开发，在基本的 Java 应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括 URL、URLConnection、Socket、ServerSocket 等。Java 的 RMI（远程方法激活）机制也是开发分布式应用的重要手段。</p>\r\n	</li>\r\n	<li><strong>Java 语言是健壮的：</strong>\r\n	<p>Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证。对指针的丢弃是 Java 的明智选择。Java 的安全检查机制使得 Java 更具健壮性。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Java语言是安全的：</strong></p>\r\n\r\n	<p>Java通常被用在网络环境中，为此，Java 提供了一个安全机制以防恶意代码的攻击。除了Java 语言具有的许多安全特性以外，Java 对通过网络下载的类具有一个安全防范机制（类 ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类 SecurityManager）让 Java 应用设置安全哨兵。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Java 语言是体系结构中立的：</strong></p>\r\n\r\n	<p>Java 程序（后缀为 java 的文件）在 Java 平台上被编译为体系结构中立的字节码格式（后缀为 class 的文件），然后可以在实现这个 Java 平台的任何系统中运行。这种途径适合于异构的网络环境和软件的分发。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Java 语言是可移植的：</strong></p>\r\n\r\n	<p>这种可移植性来源于体系结构中立性，另外，Java 还严格规定了各个基本数据类型的长度。Java 系统本身也具有很强的可移植性，Java 编译器是用 Java 实现的，Java 的运行环境是用 ANSI C 实现的。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Java 语言是解释型的：</strong></p>\r\n\r\n	<p>如前所述，Java 程序在 Java 平台上被编译为字节码格式，然后可以在实现这个 Java 平台的任何系统中运行。在运行时，Java 平台中的 Java 解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Java 是高性能的：</strong></p>\r\n\r\n	<p>与那些解释型的高级脚本语言相比，Java 的确是高性能的。事实上，Java 的运行速度随着 JIT(Just-In-Time）编译器技术的发展越来越接近于 C++。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Java 语言是多线程的：</strong></p>\r\n\r\n	<p>在 Java 语言中，线程是一种特殊的对象，它必须由 Thread 类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为 Thread(Runnable) 的构造子类将一个实现了 Runnable 接口的对象包装成一个线程，其二，从 Thread 类派生出子类并重写 run 方法，使用该子类创建的对象即为线程。值得注意的是 Thread 类已经实现了 Runnable 接口，因此，任何一个线程均有它的 run 方法，而 run 方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。Java 语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为 synchronized）。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Java 语言是动态的：</strong></p>\r\n\r\n	<p>Java 语言的设计目标之一是适应于动态变化的环境。Java 程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。另外，Java 中的类有一个运行时刻的表示，能进行运行时刻的类型检查。</p>\r\n	</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>发展历史</h2>\r\n\r\n<ul>\r\n	<li>1995 年 5 月 23 日，Java 语言诞生</li>\r\n	<li>1996 年 1 月，第一个 JDK-JDK1.0 诞生</li>\r\n	<li>1996 年 4 月，10 个最主要的操作系统供应商申明将在其产品中嵌入 JAVA 技术</li>\r\n	<li>1996 年 9 月，约 8.3 万个网页应用了 JAVA 技术来制作</li>\r\n	<li>1997 年 2 月 18 日，JDK1.1 发布</li>\r\n	<li>1997 年 4 月 2 日，JavaOne 会议召开，参与者逾一万人，创当时全球同类会议规模之纪录</li>\r\n	<li>1997 年 9 月，JavaDeveloperConnection 社区成员超过十万</li>\r\n	<li>1998 年 2 月，JDK1.1 被下载超过 2,000,000次</li>\r\n	<li>1998 年 12 月 8 日，JAVA2 企业平台 J2EE 发布</li>\r\n	<li>1999 年 6月，SUN 公司发布 Java 的三个版本：标准版（JavaSE, 以前是 J2SE）、企业版（JavaEE 以前是 J2EE）和微型版（JavaME，以前是 J2ME）</li>\r\n	<li>2000 年 5 月 8 日，JDK1.3 发布</li>\r\n	<li>2000 年 5 月 29 日，JDK1.4 发布</li>\r\n	<li>2001 年 6 月 5 日，NOKIA 宣布，到 2003 年将出售 1 亿部支持 Java 的手机</li>\r\n	<li>2001 年 9 月 24 日，J2EE1.3 发布</li>\r\n	<li>2002 年 2 月 26 日，J2SE1.4 发布，自此 Java 的计算能力有了大幅提升</li>\r\n	<li>2004 年 9 月 30 日 18:00PM，J2SE1.5 发布，成为 Java 语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5 更名为 Java SE 5.0</li>\r\n	<li>2005 年 6 月，JavaOne 大会召开，SUN 公司公开 Java SE 6。此时，Java 的各种版本已经更名，以取消其中的数字 &quot;2&quot;：J2EE 更名为 Java EE，J2SE 更名为 Java SE，J2ME 更名为 Java ME</li>\r\n	<li>2006 年 12 月，SUN 公司发布 JRE6.0</li>\r\n	<li><strong>2009 年 04 月 20 日，甲骨文 74 亿美元收购 Sun，取得 Java 的版权。</strong></li>\r\n	<li>2010 年 11 月，由于甲骨文对于 Java 社区的不友善，因此 Apache 扬言将退出 JCP。</li>\r\n	<li>2011 年 7 月 28 日，甲骨文发布 Java7.0 的正式版。</li>\r\n	<li>2014 年 3 月 18 日，Oracle 公司发表 Java SE 8。</li>\r\n	<li>2017 年 9 月 21 日，Oracle 公司发表 Java SE 9</li>\r\n	<li>2018 年 3 月 21 日，Oracle 公司发表 Java SE 10</li>\r\n	<li>2018 年 9 月 25 日，Java SE 11 发布</li>\r\n	<li>2019 年 3 月 20 日，Java SE 12 发布</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>Java 开发工具</h2>\r\n\r\n<p>Java 语言尽量保证系统内存在 1G 以上，其他工具如下所示：</p>\r\n\r\n<ul>\r\n	<li>Linux 系统、Mac OS 系统、Windows 95/98/2000/XP，WIN 7/8系统。</li>\r\n	<li><a href=\"http://www.oracle.com/technetwork/cn/java/javase/downloads/index.html\" rel=\"noopener noreferrer\" target=\"_blank\">Java JDK 7、8&hellip;&hellip;</a></li>\r\n	<li><a href=\"https://code.visualstudio.com/\" rel=\"noopener noreferrer\" target=\"_blank\">vscode</a>&nbsp;编辑器或者其他编辑器。</li>\r\n	<li>IDE：<a href=\"http://www.eclipse.org/downloads/\" rel=\"noopener noreferrer\" target=\"_blank\">Eclipse</a>、&nbsp;<a href=\"https://www.jetbrains.com/idea/\" rel=\"noopener noreferrer\" target=\"_blank\">IntelliJ IDEA</a>、<a href=\"https://netbeans.org/\" rel=\"noopener noreferrer\" target=\"_blank\">NetBeans</a>&nbsp;等。</li>\r\n</ul>\r\n\r\n<p>安装好以上的工具后，我们就可以输出Java的第一个程序 &quot;Hello World！&quot;</p>\r\n\r\n<p>public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World&quot;); } }</p>\r\n\r\n<p>在下一章节我们将介绍如何配置java开发环境。</p>\r\n', 1, 0, '2021-12-14 02:15:25.759365', '2021-12-14 02:15:34.943983', 8, 6);
INSERT INTO `tb_article` VALUES (59, 'article/20211214/java.png', 'Java 开发环境配置', 'Java 开发环境配置', 'Java 开发环境配置', '<h1>Java 开发环境配置</h1>\r\n\r\n<p>在本章节中我们将为大家介绍如何搭建Java开发环境。</p>\r\n\r\n<ul>\r\n	<li><a href=\"https://www.runoob.com/java/java-environment-setup.html#win-install\">Windows 上安装开发环境</a></li>\r\n	<li><a href=\"https://www.runoob.com/java/java-environment-setup.html#linux-install\">Linux 上安装开发环境</a></li>\r\n	<li><a href=\"https://www.runoob.com/java/java-environment-setup.html#eclipse-install\">安装 Eclipse 运行 Java</a></li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>window系统安装java</h2>\r\n\r\n<h3>下载JDK</h3>\r\n\r\n<p>首先我们需要下载java开发工具包JDK，下载地址：<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" rel=\"noopener noreferrer\" target=\"_blank\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a>，点击如下下载按钮：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/java-download.jpg\" /></p>\r\n\r\n<p>在下载页面中你需要选择接受许可，并根据自己的系统选择对应的版本，本文以 Window 64位系统为例：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/java-download-1.jpg\" /></p>\r\n\r\n<p>下载后JDK的安装根据提示进行，还有安装JDK的时候也会安装JRE，一并安装就可以了。</p>\r\n\r\n<p>安装JDK，安装过程中可以自定义安装目录等信息，例如我们选择安装目录为&nbsp;<strong>C:\\Program Files (x86)\\Java\\jdk1.8.0_91</strong>。</p>\r\n\r\n<h3>配置环境变量</h3>\r\n\r\n<p>1.安装完成后，右击&quot;我的电脑&quot;，点击&quot;属性&quot;，选择&quot;高级系统设置&quot;；</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/win-java1.png\" /></p>\r\n\r\n<p>2.选择&quot;高级&quot;选项卡，点击&quot;环境变量&quot;；</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/java-win2.png\" /></p>\r\n\r\n<p>然后就会出现如下图所示的画面：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/java-win3.png\" /></p>\r\n\r\n<p>在 &quot;系统变量&quot; 中设置 3 项属性，JAVA_HOME、PATH、CLASSPATH(大小写无所谓),若已存在则点击&quot;编辑&quot;，不存在则点击&quot;新建&quot;。</p>\r\n\r\n<blockquote>\r\n<p><strong>注意：</strong>如果使用 1.5 以上版本的 JDK，不用设置 CLASSPATH 环境变量，也可以正常编译和运行 Java 程序。</p>\r\n</blockquote>\r\n\r\n<p>变量设置参数如下：</p>\r\n\r\n<ul>\r\n	<li>变量名：<strong>JAVA_HOME</strong></li>\r\n	<li>变量值：<strong>C:\\Program Files (x86)\\Java\\jdk1.8.0_91</strong>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;// 要根据自己的实际路径配置</li>\r\n</ul>\r\n\r\n<ul>\r\n	<li>变量名：<strong>CLASSPATH</strong></li>\r\n	<li>变量值：<strong>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</strong>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; //记得前面有个&quot;.&quot;</li>\r\n</ul>\r\n\r\n<ul>\r\n	<li>\r\n	<p>变量名：<strong>Path</strong></p>\r\n	</li>\r\n	<li>\r\n	<p>变量值：<strong>%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</strong></p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>JAVA_HOME 设置</h3>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/java-win4.png\" /></p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/java-win5.png\" /></p>\r\n\r\n<h3>PATH设置</h3>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/java-win6.png\" /></p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/java-win7.png\" /></p>\r\n\r\n<blockquote>\r\n<p><strong>注意：</strong>在 Windows10 中，Path 变量里是分条显示的，我们需要将&nbsp;<strong>%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</strong>&nbsp;分开添加，否则无法识别：</p>\r\n\r\n<pre>\r\n%JAVA_HOME%\\bin;\r\n%JAVA_HOME%\\jre\\bin;</pre>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/44A70696-B2E6-4055-B88F-7FC0222DCCA4.png\" /></p>\r\n\r\n<p>更多内容可参考：<a href=\"https://www.runoob.com/w3cnote/windows10-java-setup.html\" rel=\"noopener noreferrer\" target=\"_blank\">Windows 10 配置Java 环境变量</a></p>\r\n</blockquote>\r\n\r\n<h3>CLASSPATH 设置</h3>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/java-win8.png\" /></p>\r\n\r\n<p>这是 Java 的环境配置，配置完成后，你可以启动 Eclipse 来编写代码，它会自动完成java环境的配置。</p>\r\n\r\n<h3>测试JDK是否安装成功</h3>\r\n\r\n<p>1、&quot;开始&quot;-&gt;&quot;运行&quot;，键入&quot;cmd&quot;；</p>\r\n\r\n<p>2、键入命令:&nbsp;<strong>java -version</strong>、<strong>java</strong>、<strong>javac</strong>&nbsp;几个命令，出现以下信息，说明环境变量配置成功；</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/java-win9.png\" /></p>\r\n\r\n<hr />\r\n<h2>Linux，UNIX，Solaris，FreeBSD环境变量设置</h2>\r\n\r\n<p>环境变量PATH应该设定为指向Java二进制文件安装的位置。如果设置遇到困难，请参考shell文档。</p>\r\n\r\n<p>例如，假设你使用bash作为shell，你可以把下面的内容添加到你的 .bashrc文件结尾: export PATH=/path/to/java:$PATH</p>\r\n\r\n<hr />\r\n<h2>流行JAVA开发工具</h2>\r\n\r\n<p>正所谓工欲善其事必先利其器，我们在开发java语言过程中同样需要一款不错的开发工具，目前市场上的IDE很多，本文为大家推荐以下下几款java开发工具：</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Eclipse（推荐）:</strong>另一个免费开源的java IDE，下载地址：&nbsp;<a href=\"http://www.eclipse.org/downloads/packages/\" rel=\"noopener noreferrer\" target=\"_blank\">http://www.eclipse.org/downloads/packages/</a></p>\r\n\r\n	<p>选择&nbsp;<strong>Eclipse IDE for Java Developers</strong>：<br />\r\n	<img src=\"https://www.runoob.com/wp-content/uploads/2013/12/5A92DEAE-EFB9-493D-AC4D-808E529B533C.jpg\" /></p>\r\n	</li>\r\n	<li><strong>JetBrains</strong>&nbsp;的 IDEA， 现在很多人开始使用了，功能很强大，下载地址：<a href=\"https://www.jetbrains.com/idea/download/\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.jetbrains.com/idea/download/</a></li>\r\n	<li><strong>Notepad++ :&nbsp;</strong>Notepad++ 是在微软视窗环境之下的一个免费的代码编辑器，下载地址：<a href=\"http://notepad-plus-plus.org/\" rel=\"noopener noreferrer\" target=\"_blank\">&nbsp;http://notepad-plus-plus.org/</a></li>\r\n	<li><strong>Netbeans:</strong>开源免费的java IDE，下载地址：&nbsp;<a href=\"http://www.netbeans.org/index.html\" rel=\"noopener noreferrer\" target=\"_blank\">http://www.netbeans.org/index.html</a></li>\r\n</ul>\r\n\r\n<h3>使用 Eclipse 运行第一个 Java 程序</h3>\r\n\r\n<p>视频演示如下所示：</p>\r\n\r\n<p>HelloWorld.java 文件代码：</p>\r\n\r\n<p>public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World&quot;); } }</p>\r\n', 1, 0, '2021-12-14 02:18:49.985728', '2021-12-14 02:30:09.274633', 8, 6);
INSERT INTO `tb_article` VALUES (60, 'article/20211214/java_em9Elsp.png', 'Java 基础语法', 'Java 基础语法', 'Java 基础语法', '<h1>Java 基础语法</h1>\r\n\r\n<p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</p>\r\n\r\n<ul>\r\n	<li><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li>\r\n	<li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li>\r\n	<li><strong>方法</strong>：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</li>\r\n	<li><strong>实例变量</strong>：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>第一个Java程序</h2>\r\n\r\n<p>下面看一个简单的 Java 程序，它将输出字符串&nbsp;<em>Hello World</em></p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public class HelloWorld { /* 第一个Java程序 * 它将输出字符串 Hello World */ public static void main(String[] args) { System.out.println(&quot;Hello World&quot;); // 输出 Hello World } }</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/runcode.php?filename=HelloWorld2&amp;type=java\" rel=\"noopener noreferrer\" target=\"_blank\">运行实例 &raquo;</a></p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/662E827A-FA32-4464-B0BD-40087F429E98.jpg\" /></p>\r\n\r\n<p>下面将逐步介绍如何保存、编译以及运行这个程序：</p>\r\n\r\n<ul>\r\n	<li>打开代码编辑器，把上面的代码添加进去；</li>\r\n	<li>把文件名保存为：HelloWorld.java；</li>\r\n	<li>打开 cmd 命令窗口，进入目标文件所在的位置，假设是 C:\\</li>\r\n	<li>在命令行窗口输入&nbsp;javac HelloWorld.java&nbsp;按下回车键编译代码。如果代码没有错误，cmd 命令提示符会进入下一行（假设环境变量都设置好了）。</li>\r\n	<li>再键输入&nbsp;java HelloWorld&nbsp;按下回车键就可以运行程序了</li>\r\n</ul>\r\n\r\n<p>你将会在窗口看到 Hello World</p>\r\n\r\n<pre>\r\n$ javac HelloWorld.java\r\n$ java HelloWorld \r\nHello World</pre>\r\n\r\n<p>如果遇到编码问题，我们可以使用&nbsp;-encoding&nbsp;选项设置&nbsp;<strong>utf-8</strong>&nbsp;来编译：</p>\r\n\r\n<pre>\r\njavac -encoding UTF-8 HelloWorld.java \r\njava HelloWorld </pre>\r\n\r\n<p>Gif 图演示：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/java-HelloWorld.gif\" /></p>\r\n\r\n<hr />\r\n<h2>基本语法</h2>\r\n\r\n<p>编写 Java 程序时，应注意以下几点：</p>\r\n\r\n<ul>\r\n	<li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li>\r\n	<li><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如&nbsp;<strong>MyFirstJavaClass</strong>&nbsp;。</li>\r\n	<li><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li>\r\n	<li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为&nbsp;<strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li>\r\n	<li><strong>主方法入口</strong>：所有的 Java 程序由&nbsp;<strong>public static void main(String[] args)</strong>&nbsp;方法开始执行。</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>Java 标识符</h2>\r\n\r\n<p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p>\r\n\r\n<p>关于 Java 标识符，有以下几点需要注意：</p>\r\n\r\n<ul>\r\n	<li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</li>\r\n	<li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li>\r\n	<li>关键字不能用作标识符</li>\r\n	<li>标识符是大小写敏感的</li>\r\n	<li>合法标识符举例：age、$salary、_value、__1_value</li>\r\n	<li>非法标识符举例：123abc、-salary</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>Java修饰符</h2>\r\n\r\n<p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p>\r\n\r\n<ul>\r\n	<li>访问控制修饰符 : default, public , protected, private</li>\r\n	<li>非访问控制修饰符 : final, abstract, static, synchronized</li>\r\n</ul>\r\n\r\n<p>在后面的章节中我们会深入讨论 Java 修饰符。</p>\r\n\r\n<hr />\r\n<h2>Java 变量</h2>\r\n\r\n<p>Java 中主要有如下几种类型的变量</p>\r\n\r\n<ul>\r\n	<li>局部变量</li>\r\n	<li>类变量（静态变量）</li>\r\n	<li>成员变量（非静态变量）</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>Java 数组</h2>\r\n\r\n<p>数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。</p>\r\n\r\n<hr />\r\n<h2>Java 枚举</h2>\r\n\r\n<p>Java 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。</p>\r\n\r\n<p>例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。</p>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>class FreshJuice { enum FreshJuiceSize{ SMALL, MEDIUM , LARGE } FreshJuiceSize size; } public class FreshJuiceTest { public static void main(String[] args){ FreshJuice juice = new FreshJuice(); juice.size = FreshJuice.FreshJuiceSize.MEDIUM ; } }</p>\r\n\r\n<p><strong>注意：</strong>枚举可以单独声明或者声明在类里面。方法、变量、构造函数也可以在枚举中定义。</p>\r\n\r\n<hr />\r\n<h2>Java 关键字</h2>\r\n\r\n<p>下面列出了 Java 关键字。这些保留字不能用于常量、变量、和任何标识符的名称。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>类别</th>\r\n			<th>关键字</th>\r\n			<th>说明</th>\r\n		</tr>\r\n		<tr>\r\n			<td rowspan=\"4\">访问控制</td>\r\n			<td>private</td>\r\n			<td>私有的</td>\r\n		</tr>\r\n		<tr>\r\n			<td>protected</td>\r\n			<td>受保护的</td>\r\n		</tr>\r\n		<tr>\r\n			<td>public</td>\r\n			<td>公共的</td>\r\n		</tr>\r\n		<tr>\r\n			<td>default</td>\r\n			<td>默认</td>\r\n		</tr>\r\n		<tr>\r\n			<td rowspan=\"13\">类、方法和变量修饰符</td>\r\n			<td>abstract</td>\r\n			<td>声明抽象</td>\r\n		</tr>\r\n		<tr>\r\n			<td>class</td>\r\n			<td>类</td>\r\n		</tr>\r\n		<tr>\r\n			<td>extends</td>\r\n			<td>扩充,继承</td>\r\n		</tr>\r\n		<tr>\r\n			<td>final</td>\r\n			<td>最终值,不可改变的</td>\r\n		</tr>\r\n		<tr>\r\n			<td>implements</td>\r\n			<td>实现（接口）</td>\r\n		</tr>\r\n		<tr>\r\n			<td>interface</td>\r\n			<td>接口</td>\r\n		</tr>\r\n		<tr>\r\n			<td>native</td>\r\n			<td>本地，原生方法（非 Java 实现）</td>\r\n		</tr>\r\n		<tr>\r\n			<td>new</td>\r\n			<td>新,创建</td>\r\n		</tr>\r\n		<tr>\r\n			<td>static</td>\r\n			<td>静态</td>\r\n		</tr>\r\n		<tr>\r\n			<td>strictfp</td>\r\n			<td>严格,精准</td>\r\n		</tr>\r\n		<tr>\r\n			<td>synchronized</td>\r\n			<td>线程,同步</td>\r\n		</tr>\r\n		<tr>\r\n			<td>transient</td>\r\n			<td>短暂</td>\r\n		</tr>\r\n		<tr>\r\n			<td>volatile</td>\r\n			<td>易失</td>\r\n		</tr>\r\n		<tr>\r\n			<td rowspan=\"12\">程序控制语句</td>\r\n			<td>break</td>\r\n			<td>跳出循环</td>\r\n		</tr>\r\n		<tr>\r\n			<td>case</td>\r\n			<td>定义一个值以供 switch 选择</td>\r\n		</tr>\r\n		<tr>\r\n			<td>continue</td>\r\n			<td>继续</td>\r\n		</tr>\r\n		<tr>\r\n			<td>default</td>\r\n			<td>默认</td>\r\n		</tr>\r\n		<tr>\r\n			<td>do</td>\r\n			<td>运行</td>\r\n		</tr>\r\n		<tr>\r\n			<td>else</td>\r\n			<td>否则</td>\r\n		</tr>\r\n		<tr>\r\n			<td>for</td>\r\n			<td>循环</td>\r\n		</tr>\r\n		<tr>\r\n			<td>if</td>\r\n			<td>如果</td>\r\n		</tr>\r\n		<tr>\r\n			<td>instanceof</td>\r\n			<td>实例</td>\r\n		</tr>\r\n		<tr>\r\n			<td>return</td>\r\n			<td>返回</td>\r\n		</tr>\r\n		<tr>\r\n			<td>switch</td>\r\n			<td>根据值选择执行</td>\r\n		</tr>\r\n		<tr>\r\n			<td>while</td>\r\n			<td>循环</td>\r\n		</tr>\r\n		<tr>\r\n			<td rowspan=\"6\">错误处理</td>\r\n			<td>assert</td>\r\n			<td>断言表达式是否为真</td>\r\n		</tr>\r\n		<tr>\r\n			<td>catch</td>\r\n			<td>捕捉异常</td>\r\n		</tr>\r\n		<tr>\r\n			<td>finally</td>\r\n			<td>有没有异常都执行</td>\r\n		</tr>\r\n		<tr>\r\n			<td>throw</td>\r\n			<td>抛出一个异常对象</td>\r\n		</tr>\r\n		<tr>\r\n			<td>throws</td>\r\n			<td>声明一个异常可能被抛出</td>\r\n		</tr>\r\n		<tr>\r\n			<td>try</td>\r\n			<td>捕获异常</td>\r\n		</tr>\r\n		<tr>\r\n			<td rowspan=\"2\">包相关</td>\r\n			<td>import</td>\r\n			<td>引入</td>\r\n		</tr>\r\n		<tr>\r\n			<td>package</td>\r\n			<td>包</td>\r\n		</tr>\r\n		<tr>\r\n			<td rowspan=\"8\">基本类型</td>\r\n			<td>boolean</td>\r\n			<td>布尔型</td>\r\n		</tr>\r\n		<tr>\r\n			<td>byte</td>\r\n			<td>字节型</td>\r\n		</tr>\r\n		<tr>\r\n			<td>char</td>\r\n			<td>字符型</td>\r\n		</tr>\r\n		<tr>\r\n			<td>double</td>\r\n			<td>双精度浮点</td>\r\n		</tr>\r\n		<tr>\r\n			<td>float</td>\r\n			<td>单精度浮点</td>\r\n		</tr>\r\n		<tr>\r\n			<td>int</td>\r\n			<td>整型</td>\r\n		</tr>\r\n		<tr>\r\n			<td>long</td>\r\n			<td>长整型</td>\r\n		</tr>\r\n		<tr>\r\n			<td>short</td>\r\n			<td>短整型</td>\r\n		</tr>\r\n		<tr>\r\n			<td rowspan=\"3\">变量引用</td>\r\n			<td>super</td>\r\n			<td>父类,超类</td>\r\n		</tr>\r\n		<tr>\r\n			<td>this</td>\r\n			<td>本类</td>\r\n		</tr>\r\n		<tr>\r\n			<td>void</td>\r\n			<td>无返回值</td>\r\n		</tr>\r\n		<tr>\r\n			<td rowspan=\"3\">保留关键字</td>\r\n			<td>goto</td>\r\n			<td>是关键字，但不能使用</td>\r\n		</tr>\r\n		<tr>\r\n			<td>const</td>\r\n			<td>是关键字，但不能使用</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>注意：</strong>Java 的 null 不是关键字，类似于 true 和 false，它是一个字面常量，不允许作为标识符使用。</p>\r\n\r\n<hr />\r\n<h2>Java注释</h2>\r\n\r\n<p>类似于 C/C++、Java 也支持单行以及多行注释。注释中的字符将被 Java 编译器忽略。</p>\r\n\r\n<p>public class HelloWorld { /* 这是第一个Java程序 * 它将输出 Hello World * 这是一个多行注释的示例 */ public static void main(String[] args){ // 这是单行注释的示例 /* 这个也是单行注释的示例 */ System.out.println(&quot;Hello World&quot;); } }</p>\r\n\r\n<hr />\r\n<h2>Java 空行</h2>\r\n\r\n<p>空白行或者有注释的行，Java 编译器都会忽略掉。</p>\r\n\r\n<hr />\r\n<h2>继承</h2>\r\n\r\n<p>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p>\r\n\r\n<p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。</p>\r\n\r\n<hr />\r\n<h2>接口</h2>\r\n\r\n<p>在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。</p>\r\n\r\n<p>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。</p>\r\n\r\n<hr />\r\n<h2>Java 源程序与编译型运行区别</h2>\r\n\r\n<p>如下图所示：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/ZSSDMld.png\" /></p>\r\n\r\n<p>下一节介绍 Java 编程中的类和对象。之后你将会对 Java 中的类和对象有更清楚的认识。</p>\r\n', 0, 0, '2021-12-14 02:31:12.802816', '2021-12-14 02:31:12.808836', 8, 6);
INSERT INTO `tb_article` VALUES (61, 'article/20211214/java_mzHh0P2.png', 'Java 对象和类', 'Java 对象和类', 'Java 对象和类', '<h1>Java 对象和类</h1>\r\n\r\n<p>Java作为一种面向对象语言。支持以下基本概念：</p>\r\n\r\n<ul>\r\n	<li>多态</li>\r\n	<li>继承</li>\r\n	<li>封装</li>\r\n	<li>抽象</li>\r\n	<li>类</li>\r\n	<li>对象</li>\r\n	<li>实例</li>\r\n	<li>方法</li>\r\n	<li>重载</li>\r\n</ul>\r\n\r\n<p>本节我们重点研究对象和类的概念。</p>\r\n\r\n<ul>\r\n	<li><strong>对象</strong>：对象是类的一个实例（<strong>对象不是找个女朋友</strong>），有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li>\r\n	<li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li>\r\n</ul>\r\n\r\n<p>下图中<strong>男孩（boy）</strong>、<strong>女孩（girl）</strong>为<strong>类（class）</strong>，而具体的每个人为该类的<strong>对象（object）</strong>：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/object-class.jpg\" /></p>\r\n\r\n<p>下图中<strong>汽车</strong>为<strong>类（class）</strong>，而具体的每辆车为该<strong>汽车</strong>类的<strong>对象（object）</strong>，对象包含了汽车的颜色、品牌、名称等。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/class-object2020-10-27.png\" style=\"width:70%\" /></p>\r\n\r\n<hr />\r\n<h2>Java中的对象</h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。</p>\r\n\r\n<p>拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。</p>\r\n\r\n<p>对比现实对象和软件对象，它们之间十分相似。</p>\r\n\r\n<p>软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。</p>\r\n\r\n<p>在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。</p>\r\n\r\n<h2>Java 中的类</h2>\r\n\r\n<p>类可以看成是创建 Java 对象的模板。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/20210105-java-object-1.png\" /></p>\r\n\r\n<p>通过上图创建一个简单的类来理解下 Java 中类的定义：</p>\r\n\r\n<p>public class Dog { String breed; int size; String colour; int age; void eat() { } void run() { } void sleep(){ } void name(){ } }</p>\r\n\r\n<p>一个类可以包含以下类型变量：</p>\r\n\r\n<ul>\r\n	<li><strong>局部变量</strong>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li>\r\n	<li><strong>成员变量</strong>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li>\r\n	<li><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为 static 类型。</li>\r\n</ul>\r\n\r\n<p>一个类可以拥有多个方法，在上面的例子中：eat()、run()、sleep() 和 name() 都是 Dog 类的方法。</p>\r\n\r\n<hr />\r\n<h2>构造方法</h2>\r\n\r\n<p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java 编译器将会为该类提供一个默认构造方法。</p>\r\n\r\n<p>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</p>\r\n\r\n<p>下面是一个构造方法示例：</p>\r\n\r\n<p>public class Puppy{ public Puppy(){ } public Puppy(String name){ // 这个构造器仅有一个参数：name } }</p>\r\n\r\n<hr />\r\n<h2>创建对象</h2>\r\n\r\n<p>对象是根据类创建的。在Java中，使用关键字 new 来创建一个新的对象。创建对象需要以下三步：</p>\r\n\r\n<ul>\r\n	<li><strong>声明</strong>：声明一个对象，包括对象名称和对象类型。</li>\r\n	<li><strong>实例化</strong>：使用关键字 new 来创建一个对象。</li>\r\n	<li><strong>初始化</strong>：使用 new 创建对象时，会调用构造方法初始化对象。</li>\r\n</ul>\r\n\r\n<p>下面是一个创建对象的例子：</p>\r\n\r\n<p>public class Puppy{ public Puppy(String name){ //这个构造器仅有一个参数：name System.out.println(&quot;小狗的名字是 : &quot; + name ); } public static void main(String[] args){ // 下面的语句将创建一个Puppy对象 Puppy myPuppy = new Puppy( &quot;tommy&quot; ); } }</p>\r\n\r\n<p>编译并运行上面的程序，会打印出下面的结果：</p>\r\n\r\n<pre>\r\n小狗的名字是 : tommy</pre>\r\n\r\n<hr />\r\n<h2>访问实例变量和方法</h2>\r\n\r\n<p>通过已创建的对象来访问成员变量和成员方法，如下所示：</p>\r\n\r\n<p>/* 实例化对象 */ Object referenceVariable = new Constructor(); /* 访问类中的变量 */ referenceVariable.variableName; /* 访问类中的方法 */ referenceVariable.methodName();</p>\r\n\r\n<hr />\r\n<h2>实例</h2>\r\n\r\n<p>下面的例子展示如何访问实例变量和调用成员方法：</p>\r\n\r\n<p>public class Puppy{ int puppyAge; public Puppy(String name){ // 这个构造器仅有一个参数：name System.out.println(&quot;小狗的名字是 : &quot; + name ); } public void setAge( int age ){ puppyAge = age; } public int getAge( ){ System.out.println(&quot;小狗的年龄为 : &quot; + puppyAge ); return puppyAge; } public static void main(String[] args){ /* 创建对象 */ Puppy myPuppy = new Puppy( &quot;tommy&quot; ); /* 通过方法来设定age */ myPuppy.setAge( 2 ); /* 调用另一个方法获取age */ myPuppy.getAge( ); /*你也可以像下面这样访问成员变量 */ System.out.println(&quot;变量值 : &quot; + myPuppy.puppyAge ); } }</p>\r\n\r\n<p>编译并运行上面的程序，产生如下结果：</p>\r\n\r\n<pre>\r\n小狗的名字是 : tommy\r\n小狗的年龄为 : 2\r\n变量值 : 2</pre>\r\n\r\n<hr />\r\n<h2>源文件声明规则</h2>\r\n\r\n<p>在本节的最后部分，我们将学习源文件的声明规则。当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。</p>\r\n\r\n<ul>\r\n	<li>一个源文件中只能有一个 public 类</li>\r\n	<li>一个源文件可以有多个非 public 类</li>\r\n	<li>源文件的名称应该和 public 类的类名保持一致。例如：源文件中 public 类的类名是 Employee，那么源文件应该命名为Employee.java。</li>\r\n	<li>如果一个类定义在某个包中，那么 package 语句应该在源文件的首行。</li>\r\n	<li>如果源文件包含 import 语句，那么应该放在 package 语句和类定义之间。如果没有 package 语句，那么 import 语句应该在源文件中最前面。</li>\r\n	<li>import 语句和 package 语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li>\r\n</ul>\r\n\r\n<p>类有若干种访问级别，并且类也分不同的类型：抽象类和 final 类等。这些将在访问控制章节介绍。</p>\r\n\r\n<p>除了上面提到的几种类型，Java 还有一些特殊的类，如：<a href=\"https://www.runoob.com/java/java-inner-class.html\" rel=\"noopener noreferrer\" target=\"_blank\">内部类</a>、<a href=\"https://www.runoob.com/java/java-anonymous-class.html\" rel=\"noopener noreferrer\" target=\"_blank\">匿名类</a>。</p>\r\n\r\n<hr />\r\n<h2>Java 包</h2>\r\n\r\n<p>包主要用来对类和接口进行分类。当开发 Java 程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。</p>\r\n\r\n<h2>import 语句</h2>\r\n\r\n<p>在 Java 中，如果给出一个完整的限定名，包括包名、类名，那么 Java 编译器就可以很容易地定位到源代码或者类。import 语句就是用来提供一个合理的路径，使得编译器可以找到某个类。</p>\r\n\r\n<p>例如，下面的命令行将会命令编译器载入 java_installation/java/io 路径下的所有类</p>\r\n\r\n<pre>\r\nimport java.io.*;</pre>\r\n\r\n<hr />\r\n<h2>一个简单的例子</h2>\r\n\r\n<p>在该例子中，我们创建两个类：<strong>Employee</strong>&nbsp;和&nbsp;<strong>EmployeeTest</strong>。</p>\r\n\r\n<p>首先打开文本编辑器，把下面的代码粘贴进去。注意将文件保存为 Employee.java。</p>\r\n\r\n<p>Employee 类有四个成员变量：name、age、designation 和 salary。该类显式声明了一个构造方法，该方法只有一个参数。</p>\r\n\r\n<h2>Employee.java 文件代码：</h2>\r\n\r\n<p>import java.io.*; public class Employee{ String name; int age; String designation; double salary; // Employee 类的构造器 public Employee(String name){ this.name = name; } // 设置age的值 public void empAge(int empAge){ age = empAge; } /* 设置designation的值*/ public void empDesignation(String empDesig){ designation = empDesig; } /* 设置salary的值*/ public void empSalary(double empSalary){ salary = empSalary; } /* 打印信息 */ public void printEmployee(){ System.out.println(&quot;名字:&quot;+ name ); System.out.println(&quot;年龄:&quot; + age ); System.out.println(&quot;职位:&quot; + designation ); System.out.println(&quot;薪水:&quot; + salary); } }</p>\r\n\r\n<p>程序都是从main方法开始执行。为了能运行这个程序，必须包含main方法并且创建一个实例对象。</p>\r\n\r\n<p>下面给出EmployeeTest类，该类实例化2个 Employee 类的实例，并调用方法设置变量的值。</p>\r\n\r\n<p>将下面的代码保存在 EmployeeTest.java文件中。</p>\r\n\r\n<h2>EmployeeTest.java 文件代码：</h2>\r\n\r\n<p>import java.io.*; public class EmployeeTest{ public static void main(String[] args){ /* 使用构造器创建两个对象 */ Employee empOne = new Employee(&quot;RUNOOB1&quot;); Employee empTwo = new Employee(&quot;RUNOOB2&quot;); // 调用这两个对象的成员方法 empOne.empAge(26); empOne.empDesignation(&quot;高级程序员&quot;); empOne.empSalary(1000); empOne.printEmployee(); empTwo.empAge(21); empTwo.empDesignation(&quot;菜鸟程序员&quot;); empTwo.empSalary(500); empTwo.printEmployee(); } }</p>\r\n\r\n<p>编译这两个文件并且运行 EmployeeTest 类，可以看到如下结果：</p>\r\n\r\n<pre>\r\n$ javac EmployeeTest.java\r\n$ java EmployeeTest \r\n名字:RUNOOB1\r\n年龄:26\r\n职位:高级程序员\r\n薪水:1000.0\r\n名字:RUNOOB2\r\n年龄:21\r\n职位:菜鸟程序员\r\n薪水:500.0</pre>\r\n', 0, 0, '2021-12-14 02:32:04.488206', '2021-12-14 02:32:04.494212', 8, 6);
INSERT INTO `tb_article` VALUES (62, 'article/20211214/java_cxUL2kp.png', 'Java 基本数据类型', 'Java 基本数据类型', 'Java 基本数据类型', '<h1>Java 基本数据类型</h1>\r\n\r\n<p>变量就是申请内存来存储值。也就是说，当创建变量的时候，需要在内存中申请空间。</p>\r\n\r\n<p>内存管理系统根据变量的类型为变量分配存储空间，分配的空间只能用来储存该类型数据。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/2020-10-27-code-mem.png\" /></p>\r\n\r\n<p>因此，通过定义不同类型的变量，可以在内存中储存整数、小数或者字符。</p>\r\n\r\n<p>Java 的两大数据类型:</p>\r\n\r\n<ul>\r\n	<li>内置数据类型</li>\r\n	<li>引用数据类型</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>内置数据类型</h2>\r\n\r\n<p>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p>\r\n\r\n<p><strong>byte：</strong></p>\r\n\r\n<ul>\r\n	<li>byte 数据类型是8位、有符号的，以二进制补码表示的整数；</li>\r\n	<li>最小值是&nbsp;-128（-2^7）；</li>\r\n	<li>最大值是&nbsp;127（2^7-1）；</li>\r\n	<li>默认值是&nbsp;0；</li>\r\n	<li>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；</li>\r\n	<li>例子：byte a = 100，byte b = -50。</li>\r\n</ul>\r\n\r\n<p><strong>short：</strong></p>\r\n\r\n<ul>\r\n	<li>short 数据类型是 16 位、有符号的以二进制补码表示的整数</li>\r\n	<li>最小值是&nbsp;-32768（-2^15）；</li>\r\n	<li>最大值是&nbsp;32767（2^15 - 1）；</li>\r\n	<li>Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；</li>\r\n	<li>默认值是&nbsp;0；</li>\r\n	<li>例子：short s = 1000，short r = -20000。</li>\r\n</ul>\r\n\r\n<p><strong>int：</strong></p>\r\n\r\n<ul>\r\n	<li>int 数据类型是32位、有符号的以二进制补码表示的整数；</li>\r\n	<li>最小值是&nbsp;-2,147,483,648（-2^31）；</li>\r\n	<li>最大值是&nbsp;2,147,483,647（2^31 - 1）；</li>\r\n	<li>一般地整型变量默认为 int 类型；</li>\r\n	<li>默认值是&nbsp;0&nbsp;；</li>\r\n	<li>例子：int a = 100000, int b = -200000。</li>\r\n</ul>\r\n\r\n<p><strong>long：</strong></p>\r\n\r\n<ul>\r\n	<li>long 数据类型是 64 位、有符号的以二进制补码表示的整数；</li>\r\n	<li>最小值是&nbsp;-9,223,372,036,854,775,808（-2^63）；</li>\r\n	<li>最大值是&nbsp;9,223,372,036,854,775,807（2^63 -1）；</li>\r\n	<li>这种类型主要使用在需要比较大整数的系统上；</li>\r\n	<li>默认值是&nbsp;0L；</li>\r\n	<li>例子： long a = 100000L，Long b = -200000L。<br />\r\n	&quot;L&quot;理论上不分大小写，但是若写成&quot;l&quot;容易与数字&quot;1&quot;混淆，不容易分辩。所以最好大写。</li>\r\n</ul>\r\n\r\n<p><strong>float：</strong></p>\r\n\r\n<ul>\r\n	<li>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；</li>\r\n	<li>float 在储存大型浮点数组的时候可节省内存空间；</li>\r\n	<li>默认值是&nbsp;0.0f；</li>\r\n	<li>浮点数不能用来表示精确的值，如货币；</li>\r\n	<li>例子：float f1 = 234.5f。</li>\r\n</ul>\r\n\r\n<p><strong>double：</strong></p>\r\n\r\n<ul>\r\n	<li>double 数据类型是双精度、64 位、符合 IEEE 754 标准的浮点数；</li>\r\n	<li>浮点数的默认类型为 double 类型；</li>\r\n	<li>double类型同样不能表示精确的值，如货币；</li>\r\n	<li>默认值是&nbsp;0.0d；</li>\r\n	<li>\r\n	<p>例子：</p>\r\n\r\n	<pre>\r\ndouble   d1  = 7D ;\r\ndouble   d2  = 7.; \r\ndouble   d3  =  8.0; \r\ndouble   d4  =  8.D; \r\ndouble   d5  =  12.9867; </pre>\r\n\r\n	<p>7 是一个 int 字面量，而 7D，7. 和 8.0 是 double 字面量。</p>\r\n	</li>\r\n</ul>\r\n\r\n<p><strong>boolean：</strong></p>\r\n\r\n<ul>\r\n	<li>boolean数据类型表示一位的信息；</li>\r\n	<li>只有两个取值：true 和 false；</li>\r\n	<li>这种类型只作为一种标志来记录 true/false 情况；</li>\r\n	<li>默认值是&nbsp;false；</li>\r\n	<li>例子：boolean one = true。</li>\r\n</ul>\r\n\r\n<p><strong>char：</strong></p>\r\n\r\n<ul>\r\n	<li>char 类型是一个单一的 16 位 Unicode 字符；</li>\r\n	<li>最小值是&nbsp;\\u0000（十进制等效值为 0）；</li>\r\n	<li>最大值是&nbsp;\\uffff（即为 65535）；</li>\r\n	<li>char 数据类型可以储存任何字符；</li>\r\n	<li>例子：char letter = &#39;A&#39;;。</li>\r\n</ul>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。请看下面的例子：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public class PrimitiveTypeTest { public static void main(String[] args) { // byte System.out.println(&quot;基本类型：byte 二进制位数：&quot; + Byte.SIZE); System.out.println(&quot;包装类：java.lang.Byte&quot;); System.out.println(&quot;最小值：Byte.MIN_VALUE=&quot; + Byte.MIN_VALUE); System.out.println(&quot;最大值：Byte.MAX_VALUE=&quot; + Byte.MAX_VALUE); System.out.println(); // short System.out.println(&quot;基本类型：short 二进制位数：&quot; + Short.SIZE); System.out.println(&quot;包装类：java.lang.Short&quot;); System.out.println(&quot;最小值：Short.MIN_VALUE=&quot; + Short.MIN_VALUE); System.out.println(&quot;最大值：Short.MAX_VALUE=&quot; + Short.MAX_VALUE); System.out.println(); // int System.out.println(&quot;基本类型：int 二进制位数：&quot; + Integer.SIZE); System.out.println(&quot;包装类：java.lang.Integer&quot;); System.out.println(&quot;最小值：Integer.MIN_VALUE=&quot; + Integer.MIN_VALUE); System.out.println(&quot;最大值：Integer.MAX_VALUE=&quot; + Integer.MAX_VALUE); System.out.println(); // long System.out.println(&quot;基本类型：long 二进制位数：&quot; + Long.SIZE); System.out.println(&quot;包装类：java.lang.Long&quot;); System.out.println(&quot;最小值：Long.MIN_VALUE=&quot; + Long.MIN_VALUE); System.out.println(&quot;最大值：Long.MAX_VALUE=&quot; + Long.MAX_VALUE); System.out.println(); // float System.out.println(&quot;基本类型：float 二进制位数：&quot; + Float.SIZE); System.out.println(&quot;包装类：java.lang.Float&quot;); System.out.println(&quot;最小值：Float.MIN_VALUE=&quot; + Float.MIN_VALUE); System.out.println(&quot;最大值：Float.MAX_VALUE=&quot; + Float.MAX_VALUE); System.out.println(); // double System.out.println(&quot;基本类型：double 二进制位数：&quot; + Double.SIZE); System.out.println(&quot;包装类：java.lang.Double&quot;); System.out.println(&quot;最小值：Double.MIN_VALUE=&quot; + Double.MIN_VALUE); System.out.println(&quot;最大值：Double.MAX_VALUE=&quot; + Double.MAX_VALUE); System.out.println(); // char System.out.println(&quot;基本类型：char 二进制位数：&quot; + Character.SIZE); System.out.println(&quot;包装类：java.lang.Character&quot;); // 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台 System.out.println(&quot;最小值：Character.MIN_VALUE=&quot; + (int) Character.MIN_VALUE); // 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台 System.out.println(&quot;最大值：Character.MAX_VALUE=&quot; + (int) Character.MAX_VALUE); } }</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/showjava.php?filename=PrimitiveTypeTest\" rel=\"noopener noreferrer\" target=\"_blank\">运行实例 &raquo;</a></p>\r\n\r\n<p>编译以上代码输出结果如下所示：</p>\r\n\r\n<pre>\r\n基本类型：byte 二进制位数：8\r\n包装类：java.lang.Byte\r\n最小值：Byte.MIN_VALUE=-128\r\n最大值：Byte.MAX_VALUE=127\r\n\r\n基本类型：short 二进制位数：16\r\n包装类：java.lang.Short\r\n最小值：Short.MIN_VALUE=-32768\r\n最大值：Short.MAX_VALUE=32767\r\n\r\n基本类型：int 二进制位数：32\r\n包装类：java.lang.Integer\r\n最小值：Integer.MIN_VALUE=-2147483648\r\n最大值：Integer.MAX_VALUE=2147483647\r\n\r\n基本类型：long 二进制位数：64\r\n包装类：java.lang.Long\r\n最小值：Long.MIN_VALUE=-9223372036854775808\r\n最大值：Long.MAX_VALUE=9223372036854775807\r\n\r\n基本类型：float 二进制位数：32\r\n包装类：java.lang.Float\r\n最小值：Float.MIN_VALUE=1.4E-45\r\n最大值：Float.MAX_VALUE=3.4028235E38\r\n\r\n基本类型：double 二进制位数：64\r\n包装类：java.lang.Double\r\n最小值：Double.MIN_VALUE=4.9E-324\r\n最大值：Double.MAX_VALUE=1.7976931348623157E308\r\n\r\n基本类型：char 二进制位数：16\r\n包装类：java.lang.Character\r\n最小值：Character.MIN_VALUE=0\r\n最大值：Character.MAX_VALUE=65535</pre>\r\n\r\n<p>Float和Double的最小值和最大值都是以科学记数法的形式输出的，结尾的&quot;E+数字&quot;表示E之前的数字要乘以10的多少次方。比如3.14E3就是3.14 &times; 10<sup>3</sup>&nbsp;=3140，3.14E-3 就是 3.14 x 10<sup>-3</sup>&nbsp;=0.00314。</p>\r\n\r\n<p>实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。</p>\r\n\r\n<h3>类型默认值</h3>\r\n\r\n<p>下表列出了 Java 各个类型的默认值：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><strong>数据类型</strong></th>\r\n			<th><strong>默认值</strong></th>\r\n		</tr>\r\n		<tr>\r\n			<td>byte</td>\r\n			<td>0</td>\r\n		</tr>\r\n		<tr>\r\n			<td>short</td>\r\n			<td>0</td>\r\n		</tr>\r\n		<tr>\r\n			<td>int</td>\r\n			<td>0</td>\r\n		</tr>\r\n		<tr>\r\n			<td>long</td>\r\n			<td>0L</td>\r\n		</tr>\r\n		<tr>\r\n			<td>float</td>\r\n			<td>0.0f</td>\r\n		</tr>\r\n		<tr>\r\n			<td>double</td>\r\n			<td>0.0d</td>\r\n		</tr>\r\n		<tr>\r\n			<td>char</td>\r\n			<td>&#39;u0000&#39;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>String (or any object)</td>\r\n			<td>null</td>\r\n		</tr>\r\n		<tr>\r\n			<td>boolean</td>\r\n			<td>false</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public class Test { static boolean bool; static byte by; static char ch; static double d; static float f; static int i; static long l; static short sh; static String str; public static void main(String[] args) { System.out.println(&quot;Bool :&quot; + bool); System.out.println(&quot;Byte :&quot; + by); System.out.println(&quot;Character:&quot; + ch); System.out.println(&quot;Double :&quot; + d); System.out.println(&quot;Float :&quot; + f); System.out.println(&quot;Integer :&quot; + i); System.out.println(&quot;Long :&quot; + l); System.out.println(&quot;Short :&quot; + sh); System.out.println(&quot;String :&quot; + str); } }</p>\r\n\r\n<p>实例输出结果为：</p>\r\n\r\n<pre>\r\nBool     :false\r\nByte     :0\r\nCharacter:\r\nDouble   :0.0\r\nFloat    :0.0\r\nInteger  :0\r\nLong     :0\r\nShort    :0\r\nString   :null</pre>\r\n\r\n<hr />\r\n<h2>引用类型</h2>\r\n\r\n<ul>\r\n	<li>在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。</li>\r\n	<li>对象、数组都是引用数据类型。</li>\r\n	<li>所有引用类型的默认值都是null。</li>\r\n	<li>一个引用变量可以用来引用任何与之兼容的类型。</li>\r\n	<li>例子：Site site = new Site(&quot;Runoob&quot;)。</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>Java 常量</h2>\r\n\r\n<p>常量在程序运行时是不能被修改的。</p>\r\n\r\n<p>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：</p>\r\n\r\n<pre>\r\nfinal double PI = 3.1415927;</pre>\r\n\r\n<p>虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。</p>\r\n\r\n<p>字面量可以赋给任何内置类型的变量。例如：</p>\r\n\r\n<pre>\r\nbyte a = 68;\r\nchar a = &#39;A&#39;</pre>\r\n\r\n<p>byte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示。</p>\r\n\r\n<p>当使用字面量的时候，前缀&nbsp;0&nbsp;表示 8 进制，而前缀&nbsp;0x&nbsp;代表 16 进制, 例如：</p>\r\n\r\n<pre>\r\nint decimal = 100;\r\nint octal = 0144;\r\nint hexa =  0x64;</pre>\r\n\r\n<p>和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：</p>\r\n\r\n<pre>\r\n&quot;Hello World&quot;\r\n&quot;two\\nlines&quot;\r\n&quot;\\&quot;This is in quotes\\&quot;&quot;</pre>\r\n\r\n<p>字符串常量和字符常量都可以包含任何Unicode字符。例如：</p>\r\n\r\n<pre>\r\nchar a = &#39;\\u0001&#39;;\r\nString a = &quot;\\u0001&quot;;</pre>\r\n\r\n<p>Java语言支持一些特殊的转义字符序列。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>符号</th>\r\n			<th>字符含义</th>\r\n		</tr>\r\n		<tr>\r\n			<td>\\n</td>\r\n			<td>换行 (0x0a)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\r</td>\r\n			<td>回车 (0x0d)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\f</td>\r\n			<td>换页符(0x0c)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\b</td>\r\n			<td>退格 (0x08)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\0</td>\r\n			<td>空字符 (0x0)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\s</td>\r\n			<td>空格 (0x20)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\t</td>\r\n			<td>制表符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\&quot;</td>\r\n			<td>双引号</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\&#39;</td>\r\n			<td>单引号</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\\\</td>\r\n			<td>反斜杠</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\ddd</td>\r\n			<td>八进制字符 (ddd)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\uxxxx</td>\r\n			<td>16进制Unicode字符 (xxxx)</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<hr />\r\n<h2>自动类型转换</h2>\r\n\r\n<p><strong>整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。</strong></p>\r\n\r\n<p>转换从低级到高级。</p>\r\n\r\n<pre>\r\n低  ------------------------------------&gt;  高\r\n\r\nbyte,short,char&mdash;&gt; int &mdash;&gt; long&mdash;&gt; float &mdash;&gt; double </pre>\r\n\r\n<p>数据类型转换必须满足如下规则：</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>1. 不能对boolean类型进行类型转换。</p>\r\n	</li>\r\n	<li>\r\n	<p>2. 不能把对象类型转换成不相关类的对象。</p>\r\n	</li>\r\n	<li>\r\n	<p>3. 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</p>\r\n	</li>\r\n	<li>\r\n	<p>4. 转换过程中可能导致溢出或损失精度，例如：</p>\r\n\r\n	<pre>\r\nint i =128;   \r\nbyte b = (byte)i;</pre>\r\n\r\n	<p>因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。</p>\r\n	</li>\r\n	<li>\r\n	<p>5. 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：</p>\r\n\r\n	<pre>\r\n(int)23.7 == 23;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n(int)-45.89f == -45</pre>\r\n	</li>\r\n</ul>\r\n\r\n<h3>自动类型转换</h3>\r\n\r\n<p>必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public class ZiDongLeiZhuan{ public static void main(String[] args){ char c1=&#39;a&#39;;//定义一个char类型 int i1 = c1;//char自动类型转换为int System.out.println(&quot;char自动类型转换为int后的值等于&quot;+i1); char c2 = &#39;A&#39;;//定义一个char类型 int i2 = c2+1;//char 类型和 int 类型计算 System.out.println(&quot;char类型和int计算后的值等于&quot;+i2); } }</p>\r\n\r\n<p>运行结果为:</p>\r\n\r\n<pre>\r\nchar自动类型转换为int后的值等于97\r\nchar类型和int计算后的值等于66</pre>\r\n\r\n<p><strong>解析：</strong>c1 的值为字符&nbsp;<strong>a</strong>&nbsp;,查 ASCII 码表可知对应的 int 类型值为 97， A 对应值为 65，所以&nbsp;i2=65+1=66。</p>\r\n\r\n<h3>强制类型转换</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>1. 条件是转换的数据类型必须是兼容的。</p>\r\n	</li>\r\n	<li>\r\n	<p>2. 格式：(type)value type是要强制类型转换后的数据类型 实例：</p>\r\n\r\n	<h2>实例</h2>\r\n\r\n	<p>public class QiangZhiZhuanHuan{ public static void main(String[] args){ int i1 = 123; byte b = (byte)i1;//强制类型转换为byte System.out.println(&quot;int强制类型转换为byte后的值等于&quot;+b); } }</p>\r\n\r\n	<p>运行结果：</p>\r\n\r\n	<pre>\r\nint强制类型转换为byte后的值等于123</pre>\r\n	</li>\r\n</ul>\r\n\r\n<h3>隐含强制类型转换</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>1、 整数的默认类型是 int。</p>\r\n	</li>\r\n	<li>\r\n	<p>2. 小数默认是 double 类型浮点型，在定义 float 类型时必须在数字后面跟上 F 或者 f。</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>这一节讲解了 Java 的基本数据类型。下一节将探讨不同的变量类型以及它们的用法。</p>\r\n', 0, 0, '2021-12-14 02:33:26.822076', '2021-12-14 02:33:26.826082', 8, 6);
INSERT INTO `tb_article` VALUES (63, 'article/20211214/java_lcfsSmO.png', 'Java 变量类型', 'Java 变量类型', 'Java 变量类型', '<h1>Java 变量类型</h1>\r\n\r\n<p>在Java语言中，所有的变量在使用前必须声明。声明变量的基本格式如下：</p>\r\n\r\n<p>type identifier [ = value][, identifier [= value] ...] ;</p>\r\n\r\n<p>格式说明：type为Java数据类型。identifier是变量名。可以使用逗号隔开来声明多个同类型变量。</p>\r\n\r\n<p>以下列出了一些变量的声明实例。注意有些包含了初始化过程。</p>\r\n\r\n<p>int a, b, c;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 声明三个int型整数：a、 b、c int d = 3, e = 4, f = 5; // 声明三个整数并赋予初值 byte z = 22;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 声明并初始化 z String s = &quot;runoob&quot;; // 声明并初始化字符串 s double pi = 3.14159; // 声明了双精度浮点型变量 pi char x = &#39;x&#39;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 声明变量 x 的值是字符 &#39;x&#39;。</p>\r\n\r\n<p>Java语言支持的变量类型有：</p>\r\n\r\n<ul>\r\n	<li>类变量：独立于方法之外的变量，用 static 修饰。</li>\r\n	<li>实例变量：独立于方法之外的变量，不过没有 static 修饰。</li>\r\n	<li>局部变量：类的方法中的变量。</li>\r\n</ul>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public class Variable{ static int allClicks=0; // 类变量 String str=&quot;hello world&quot;; // 实例变量 public void method(){ int i =0; // 局部变量 } }</p>\r\n\r\n<hr />\r\n<h2>Java 局部变量</h2>\r\n\r\n<ul>\r\n	<li>局部变量声明在方法、构造方法或者语句块中；</li>\r\n	<li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li>\r\n	<li>访问修饰符不能用于局部变量；</li>\r\n	<li>局部变量只在声明它的方法、构造方法或者语句块中可见；</li>\r\n	<li>局部变量是在栈上分配的。</li>\r\n	<li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li>\r\n</ul>\r\n\r\n<h3>实例 1</h3>\r\n\r\n<p>在以下实例中age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中。</p>\r\n\r\n<p>package com.runoob.test; public class Test{ public void pupAge(){ int age = 0; age = age + 7; System.out.println(&quot;小狗的年龄是: &quot; + age); } public static void main(String[] args){ Test test = new Test(); test.pupAge(); } }</p>\r\n\r\n<p>以上实例编译运行结果如下:</p>\r\n\r\n<pre>\r\n小狗的年龄是: 7</pre>\r\n\r\n<h3>实例 2</h3>\r\n\r\n<p>在下面的例子中 age 变量没有初始化，所以在编译时会出错：</p>\r\n\r\n<p>package com.runoob.test; public class Test{ public void pupAge(){ int age; age = age + 7; System.out.println(&quot;小狗的年龄是 : &quot; + age); } public static void main(String[] args){ Test test = new Test(); test.pupAge(); } }</p>\r\n\r\n<p>以上实例编译运行结果如下:</p>\r\n\r\n<pre>\r\nTest.java:4:variable number might not have been initialized\r\nage = age + 7;\r\n         ^\r\n1 error</pre>\r\n\r\n<hr />\r\n<h2>实例变量</h2>\r\n\r\n<ul>\r\n	<li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li>\r\n	<li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li>\r\n	<li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</li>\r\n	<li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li>\r\n	<li>实例变量可以声明在使用前或者使用后；</li>\r\n	<li>访问修饰符可以修饰实例变量；</li>\r\n	<li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</li>\r\n	<li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li>\r\n	<li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</li>\r\n</ul>\r\n\r\n<h3>实例</h3>\r\n\r\n<h2>Employee.java 文件代码：</h2>\r\n\r\n<p>import java.io.*; public class Employee{ // 这个实例变量对子类可见 public String name; // 私有变量，仅在该类可见 private double salary; //在构造器中对name赋值 public Employee (String empName){ name = empName; } //设定salary的值 public void setSalary(double empSal){ salary = empSal; } // 打印信息 public void printEmp(){ System.out.println(&quot;名字 : &quot; + name ); System.out.println(&quot;薪水 : &quot; + salary); } public static void main(String[] args){ Employee empOne = new Employee(&quot;RUNOOB&quot;); empOne.setSalary(1000.0); empOne.printEmp(); } }</p>\r\n\r\n<p>以上实例编译运行结果如下:</p>\r\n\r\n<pre>\r\n$ javac Employee.java \r\n$ java Employee\r\n名字 : RUNOOB\r\n薪水 : 1000.0</pre>\r\n\r\n<hr />\r\n<h2>类变量（静态变量）</h2>\r\n\r\n<ul>\r\n	<li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li>\r\n	<li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li>\r\n	<li>静态变量除了被声明为常量外很少使用，静态变量是指声明为 public/private，final 和 static 类型的变量。静态变量初始化后不可改变。</li>\r\n	<li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。</li>\r\n	<li>静态变量在第一次被访问时创建，在程序结束时销毁。</li>\r\n	<li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。</li>\r\n	<li>默认值和实例变量相似。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li>\r\n	<li>静态变量可以通过：<em>ClassName.VariableName</em>的方式访问。</li>\r\n	<li>类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。</li>\r\n</ul>\r\n\r\n<p>实例：</p>\r\n\r\n<h2>Employee.java 文件代码：</h2>\r\n\r\n<p>import java.io.*; public class Employee { //salary是静态的私有变量 private static double salary; // DEPARTMENT是一个常量 public static final String DEPARTMENT = &quot;开发人员&quot;; public static void main(String[] args){ salary = 10000; System.out.println(DEPARTMENT+&quot;平均工资:&quot;+salary); } }</p>\r\n\r\n<p>以上实例编译运行结果如下:</p>\r\n\r\n<pre>\r\n开发人员平均工资:10000.0</pre>\r\n\r\n<p><strong>注意：</strong>如果其他类想要访问该变量，可以这样访问：<strong>Employee.DEPARTMENT</strong>。</p>\r\n\r\n<p>本章节中我们学习了Java的变量类型，下一章节中我们将介绍Java修饰符的使用。</p>\r\n', 0, 0, '2021-12-14 02:33:48.102153', '2021-12-14 02:33:48.106146', 8, 6);
INSERT INTO `tb_article` VALUES (64, 'article/20211214/java_wclNtX2.png', 'Java 修饰符', 'Java 修饰符', 'Java 修饰符', '<h1>Java 修饰符</h1>\r\n\r\n<p>Java语言提供了很多修饰符，主要分为以下两类：</p>\r\n\r\n<ul>\r\n	<li>访问修饰符</li>\r\n	<li>非访问修饰符</li>\r\n</ul>\r\n\r\n<p>修饰符用来定义类、方法或者变量，通常放在语句的最前端。我们通过下面的例子来说明：</p>\r\n\r\n<p>public class ClassName { // ... } private boolean myFlag; static final double weeks = 9.5; protected static final int BOXWIDTH = 42; public static void main(String[] arguments) { // 方法体 }</p>\r\n\r\n<hr />\r\n<h2>访问控制修饰符</h2>\r\n\r\n<p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>default</strong>&nbsp;(即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>private</strong>&nbsp;: 在同一类内可见。使用对象：变量、方法。&nbsp;<strong>注意：不能修饰类（外部类）</strong></p>\r\n	</li>\r\n	<li>\r\n	<p><strong>public</strong>&nbsp;: 对所有类可见。使用对象：类、接口、变量、方法</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>protected</strong>&nbsp;: 对同一包内的类和所有子类可见。使用对象：变量、方法。&nbsp;<strong>注意：不能修饰类（外部类）</strong>。</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>我们可以通过以下表来说明访问权限：</p>\r\n\r\n<table>\r\n	<caption>访问控制</caption>\r\n	<tbody>\r\n		<tr>\r\n			<th>修饰符</th>\r\n			<th>当前类</th>\r\n			<th>同一包内</th>\r\n			<th>子孙类(同一包)</th>\r\n			<th>子孙类(不同包)</th>\r\n			<th>其他包</th>\r\n		</tr>\r\n		<tr>\r\n			<td><code>public</code></td>\r\n			<td>Y</td>\r\n			<td>Y</td>\r\n			<td>Y</td>\r\n			<td>Y</td>\r\n			<td>Y</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code>protected</code></td>\r\n			<td>Y</td>\r\n			<td>Y</td>\r\n			<td>Y</td>\r\n			<td>Y/N（<a href=\"https://www.runoob.com/java/java-modifier-types.html#protected-desc\">说明</a>）</td>\r\n			<td>N</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code>default</code></td>\r\n			<td>Y</td>\r\n			<td>Y</td>\r\n			<td>Y</td>\r\n			<td>N</td>\r\n			<td>N</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code>private</code></td>\r\n			<td>Y</td>\r\n			<td>N</td>\r\n			<td>N</td>\r\n			<td>N</td>\r\n			<td>N</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>默认访问修饰符-不使用任何关键字</h3>\r\n\r\n<p>使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为&nbsp;public static final,而接口里的方法默认情况下访问权限为&nbsp;public。</p>\r\n\r\n<p>如下例所示，变量和方法的声明可以不使用任何修饰符。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>String version = &quot;1.5.1&quot;; boolean processOrder() { return true; }</p>\r\n\r\n<h3>私有访问修饰符-private</h3>\r\n\r\n<p>私有访问修饰符是最严格的访问级别，所以被声明为&nbsp;<strong>private</strong>&nbsp;的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为&nbsp;<strong>private</strong>。</p>\r\n\r\n<p>声明为私有访问类型的变量只能通过类中公共的 getter 方法被外部类访问。</p>\r\n\r\n<p>Private 访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。</p>\r\n\r\n<p>下面的类使用了私有访问修饰符：</p>\r\n\r\n<p>public class Logger { private String format; public String getFormat() { return this.format; } public void setFormat(String format) { this.format = format; } }</p>\r\n\r\n<p>实例中，Logger 类中的 format 变量为私有变量，所以其他类不能直接得到和设置该变量的值。为了使其他类能够操作该变量，定义了两个 public 方法：getFormat() （返回 format的值）和 setFormat(String)（设置 format 的值）</p>\r\n\r\n<h3>公有访问修饰符-public</h3>\r\n\r\n<p>被声明为 public 的类、方法、构造方法和接口能够被任何其他类访问。</p>\r\n\r\n<p>如果几个相互访问的 public 类分布在不同的包中，则需要导入相应 public 类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。</p>\r\n\r\n<p>以下函数使用了公有访问控制：</p>\r\n\r\n<p>public static void main(String[] arguments) { // ... }</p>\r\n\r\n<p>Java 程序的 main() 方法必须设置成公有的，否则，Java 解释器将不能运行该类。</p>\r\n\r\n<h3>受保护的访问修饰符-protected</h3>\r\n\r\n<p>protected 需要从以下两个点来分析说明：</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>子类与基类在同一包中</strong>：被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问；</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>子类与基类不在同一包中</strong>：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的protected方法。</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>protected 可以修饰数据成员，构造方法，方法成员，<strong>不能修饰类（内部类除外）</strong>。</p>\r\n\r\n<p>接口及接口的成员变量和成员方法不能声明为 protected。 可以看看下图演示：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/12/java-protected.gif\" /></p>\r\n\r\n<p>子类能访问 protected 修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。</p>\r\n\r\n<p>下面的父类使用了 protected 访问修饰符，子类重写了父类的 openSpeaker() 方法。</p>\r\n\r\n<p>class AudioPlayer { protected boolean openSpeaker(Speaker sp) { // 实现细节 } } class StreamingAudioPlayer extends AudioPlayer { protected boolean openSpeaker(Speaker sp) { // 实现细节 } }</p>\r\n\r\n<p>如果把 openSpeaker() 方法声明为 private，那么除了 AudioPlayer 之外的类将不能访问该方法。</p>\r\n\r\n<p>如果把 openSpeaker() 声明为 public，那么所有的类都能够访问该方法。</p>\r\n\r\n<p>如果我们只想让该方法对其所在类的子类可见，则将该方法声明为 protected。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<blockquote>\r\n<p>protected 是最难理解的一种 Java 类成员访问权限修饰词，更多详细内容请查看&nbsp;<a href=\"https://www.runoob.com/w3cnote/java-protected-keyword-detailed-explanation.html\" rel=\"noopener noreferrer\" target=\"_blank\">Java protected 关键字详解</a>。</p>\r\n</blockquote>\r\n\r\n<h3>访问控制和继承</h3>\r\n\r\n<p>请注意以下方法继承的规则：</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>父类中声明为 public 的方法在子类中也必须为 public。</p>\r\n	</li>\r\n	<li>\r\n	<p>父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。</p>\r\n	</li>\r\n	<li>\r\n	<p>父类中声明为 private 的方法，不能够被子类继承。</p>\r\n	</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>非访问修饰符</h2>\r\n\r\n<p>为了实现一些其他的功能，Java 也提供了许多非访问修饰符。</p>\r\n\r\n<p>static 修饰符，用来修饰类方法和类变量。</p>\r\n\r\n<p>final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p>\r\n\r\n<p>abstract 修饰符，用来创建抽象类和抽象方法。</p>\r\n\r\n<p>synchronized 和 volatile 修饰符，主要用于线程的编程。</p>\r\n\r\n<h3>static 修饰符</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>静态变量：</strong></p>\r\n\r\n	<p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>静态方法：</strong></p>\r\n\r\n	<p>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>对类变量和方法的访问可以直接使用&nbsp;<strong>classname.variablename</strong>&nbsp;和&nbsp;<strong>classname.methodname</strong>&nbsp;的方式访问。</p>\r\n\r\n<p>如下例所示，static修饰符用来创建类方法和类变量。</p>\r\n\r\n<p>public class InstanceCounter { private static int numInstances = 0; protected static int getCount() { return numInstances; } private static void addInstance() { numInstances++; } InstanceCounter() { InstanceCounter.addInstance(); } public static void main(String[] arguments) { System.out.println(&quot;Starting with &quot; + InstanceCounter.getCount() + &quot; instances&quot;); for (int i = 0; i &lt; 500; ++i){ new InstanceCounter(); } System.out.println(&quot;Created &quot; + InstanceCounter.getCount() + &quot; instances&quot;); } }</p>\r\n\r\n<p>以上实例运行编辑结果如下:</p>\r\n\r\n<pre>\r\nStarting with 0 instances\r\nCreated 500 instances</pre>\r\n\r\n<h3>final 修饰符</h3>\r\n\r\n<p><strong>final 变量：</strong></p>\r\n\r\n<p>final 表示&quot;最后的、最终的&quot;含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。</p>\r\n\r\n<p>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public class Test{ final int value = 10; // 下面是声明常量的实例 public static final int BOXWIDTH = 6; static final String TITLE = &quot;Manager&quot;; public void changeValue(){ value = 12; //将输出一个错误 } }</p>\r\n\r\n<p><strong>final 方法</strong></p>\r\n\r\n<p>父类中的 final 方法可以被子类继承，但是不能被子类重写。</p>\r\n\r\n<p>声明 final 方法的主要目的是防止该方法的内容被修改。</p>\r\n\r\n<p>如下所示，使用 final 修饰符声明方法。</p>\r\n\r\n<p>public class Test{ public final void changeName(){ // 方法体 } }</p>\r\n\r\n<p><strong>final 类</strong></p>\r\n\r\n<p>final 类不能被继承，没有类能够继承 final 类的任何特性。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public final class Test { // 类体 }</p>\r\n\r\n<h3>abstract 修饰符</h3>\r\n\r\n<p><strong>抽象类：</strong></p>\r\n\r\n<p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</p>\r\n\r\n<p>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</p>\r\n\r\n<p>抽象类可以包含抽象方法和非抽象方法。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>abstract class Caravan{ private double price; private String model; private String year; public abstract void goFast(); //抽象方法 public abstract void changeColor(); }</p>\r\n\r\n<p><strong>抽象方法</strong></p>\r\n\r\n<p>抽象方法是一种没有任何实现的方法，该方法的具体实现由子类提供。</p>\r\n\r\n<p>抽象方法不能被声明成 final 和 static。</p>\r\n\r\n<p>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。</p>\r\n\r\n<p>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。</p>\r\n\r\n<p>抽象方法的声明以分号结尾，例如：<strong>public abstract sample();</strong>。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public abstract class SuperClass{ abstract void m(); //抽象方法 } class SubClass extends SuperClass{ //实现抽象方法 void m(){ ......... } }</p>\r\n\r\n<h3>synchronized 修饰符</h3>\r\n\r\n<p>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public synchronized void showDetails(){ ....... }</p>\r\n\r\n<h3>transient 修饰符</h3>\r\n\r\n<p>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。</p>\r\n\r\n<p>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public transient int limit = 55; // 不会持久化 public int b; // 持久化</p>\r\n\r\n<h3>volatile 修饰符</h3>\r\n\r\n<p>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</p>\r\n\r\n<p>一个 volatile 对象引用可能是 null。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public class MyRunnable implements Runnable { private volatile boolean active; public void run() { active = true; while (active) // 第一行 { // 代码 } } public void stop() { active = false; // 第二行 } }</p>\r\n\r\n<p>通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果&nbsp;<strong><em>第一行</em></strong>&nbsp;中缓冲区的 active 值被使用，那么在&nbsp;<strong><em>第二行</em></strong>&nbsp;的 active 值为 false 时循环不会停止。</p>\r\n\r\n<p>但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。</p>\r\n', 0, 0, '2021-12-14 02:34:17.897249', '2021-12-14 02:34:17.901249', 8, 6);
INSERT INTO `tb_article` VALUES (65, 'article/20211214/java_KR7snps.png', 'Java 运算符', 'Java 运算符', 'Java 运算符', '<h1>Java 运算符</h1>\r\n\r\n<p>计算机的最基本用途之一就是执行数学运算，作为一门计算机语言，Java也提供了一套丰富的运算符来操纵变量。我们可以把运算符分成以下几组：</p>\r\n\r\n<ul>\r\n	<li>算术运算符</li>\r\n	<li>关系运算符</li>\r\n	<li>位运算符</li>\r\n	<li>逻辑运算符</li>\r\n	<li>赋值运算符</li>\r\n	<li>其他运算符</li>\r\n</ul>\r\n\r\n<h2>算术运算符</h2>\r\n\r\n<p>算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。</p>\r\n\r\n<p>表格中的实例假设整数变量A的值为10，变量B的值为20：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>操作符</th>\r\n			<th>描述</th>\r\n			<th>例子</th>\r\n		</tr>\r\n		<tr>\r\n			<td>+</td>\r\n			<td>加法 - 相加运算符两侧的值</td>\r\n			<td>A + B 等于 30</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-</td>\r\n			<td>减法 - 左操作数减去右操作数</td>\r\n			<td>A &ndash; B 等于 -10</td>\r\n		</tr>\r\n		<tr>\r\n			<td>*</td>\r\n			<td>乘法 - 相乘操作符两侧的值</td>\r\n			<td>A * B等于200</td>\r\n		</tr>\r\n		<tr>\r\n			<td>/</td>\r\n			<td>除法 - 左操作数除以右操作数</td>\r\n			<td>B / A等于2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>％</td>\r\n			<td>取余 - 左操作数除以右操作数的余数</td>\r\n			<td>B%A等于0</td>\r\n		</tr>\r\n		<tr>\r\n			<td>++</td>\r\n			<td>自增: 操作数的值增加1</td>\r\n			<td>B++ 或 ++B 等于 21（区别详见下文）</td>\r\n		</tr>\r\n		<tr>\r\n			<td>--</td>\r\n			<td>自减: 操作数的值减少1</td>\r\n			<td>B-- 或 --B 等于 19（区别详见下文）</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>下面的简单示例程序演示了算术运算符。复制并粘贴下面的 Java 程序并保存为 Test.java 文件，然后编译并运行这个程序：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public class Test { public static void main(String[] args) { int a = 10; int b = 20; int c = 25; int d = 25; System.out.println(&quot;a + b = &quot; + (a + b) ); System.out.println(&quot;a - b = &quot; + (a - b) ); System.out.println(&quot;a * b = &quot; + (a * b) ); System.out.println(&quot;b / a = &quot; + (b / a) ); System.out.println(&quot;b % a = &quot; + (b % a) ); System.out.println(&quot;c % a = &quot; + (c % a) ); System.out.println(&quot;a++ = &quot; + (a++) ); System.out.println(&quot;a-- = &quot; + (a--) ); // 查看 d++ 与 ++d 的不同 System.out.println(&quot;d++ = &quot; + (d++) ); System.out.println(&quot;++d = &quot; + (++d) ); } }</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/showjava.php?filename=test_operator\" rel=\"noopener noreferrer\" target=\"_blank\">运行实例 &raquo;</a></p>\r\n\r\n<p>以上实例编译运行结果如下：</p>\r\n\r\n<pre>\r\na + b = 30\r\na - b = -10\r\na * b = 200\r\nb / a = 2\r\nb % a = 0\r\nc % a = 5\r\na++   = 10\r\na--   = 11\r\nd++   = 25\r\n++d   = 27</pre>\r\n\r\n<h3>自增自减运算符</h3>\r\n\r\n<p><strong>1、自增（++）自减（--）运算符</strong>是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public class selfAddMinus{ public static void main(String[] args){ int a = 3;//定义一个变量； int b = ++a;//自增运算 int c = 3; int d = --c;//自减运算 System.out.println(&quot;进行自增运算后的值等于&quot;+b); System.out.println(&quot;进行自减运算后的值等于&quot;+d); } }</p>\r\n\r\n<p>运行结果为：</p>\r\n\r\n<pre>\r\n进行自增运算后的值等于4\r\n进行自减运算后的值等于2</pre>\r\n\r\n<p>解析：</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>int b = ++a; 拆分运算过程为: a=a+1=4; b=a=4, 最后结果为b=4,a=4</p>\r\n	</li>\r\n	<li>\r\n	<p>int d = --c; 拆分运算过程为: c=c-1=2; d=c=2, 最后结果为d=2,c=2</p>\r\n	</li>\r\n</ul>\r\n\r\n<p><strong>2、前缀自增自减法(++a,--a):&nbsp;</strong>先进行自增或者自减运算，再进行表达式运算。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>3、后缀自增自减法(a++,a--):&nbsp;</strong>先进行表达式运算，再进行自增或者自减运算 实例：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public class selfAddMinus{ public static void main(String[] args){ int a = 5;//定义一个变量； int b = 5; int x = 2*++a; int y = 2*b++; System.out.println(&quot;自增运算符前缀运算后a=&quot;+a+&quot;,x=&quot;+x); System.out.println(&quot;自增运算符后缀运算后b=&quot;+b+&quot;,y=&quot;+y); } }</p>\r\n\r\n<p>运行结果为：</p>\r\n\r\n<pre>\r\n自增运算符前缀运算后a=6，x=12\r\n自增运算符后缀运算后b=6，y=10</pre>\r\n\r\n<hr />\r\n<h2>关系运算符</h2>\r\n\r\n<p>下表为Java支持的关系运算符</p>\r\n\r\n<p>表格中的实例整数变量A的值为10，变量B的值为20：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>例子</th>\r\n		</tr>\r\n		<tr>\r\n			<td>==</td>\r\n			<td>检查如果两个操作数的值是否相等，如果相等则条件为真。</td>\r\n			<td>（A == B）为假。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>!=</td>\r\n			<td>检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>\r\n			<td>(A != B) 为真。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&nbsp;</td>\r\n			<td>检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>\r\n			<td>（A&gt; B）为假。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;&nbsp;</td>\r\n			<td>检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>\r\n			<td>（A &lt;B）为真。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;=</td>\r\n			<td>检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>\r\n			<td>（A&gt; = B）为假。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;=</td>\r\n			<td>检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>\r\n			<td>（A &lt;= B）为真。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>下面的简单示例程序演示了关系运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String[] args) { int a = 10; int b = 20; System.out.println(&quot;a == b = &quot; + (a == b) ); System.out.println(&quot;a != b = &quot; + (a != b) ); System.out.println(&quot;a &gt; b = &quot; + (a &gt; b) ); System.out.println(&quot;a &lt; b = &quot; + (a &lt; b) ); System.out.println(&quot;b &gt;= a = &quot; + (b &gt;= a) ); System.out.println(&quot;b &lt;= a = &quot; + (b &lt;= a) ); } }</p>\r\n\r\n<p>以上实例编译运行结果如下：</p>\r\n\r\n<pre>\r\na == b = false\r\na != b = true\r\na &gt; b = false\r\na &lt; b = true\r\nb &gt;= a = true\r\nb &lt;= a = false</pre>\r\n\r\n<hr />\r\n<h2>位运算符</h2>\r\n\r\n<p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。</p>\r\n\r\n<p>位运算符作用在所有的位上，并且按位运算。假设a = 60，b = 13;它们的二进制格式表示将如下：</p>\r\n\r\n<pre>\r\nA = 0011 1100\r\nB = 0000 1101\r\n-----------------\r\nA&amp;B = 0000 1100\r\nA | B = 0011 1101\r\nA ^ B = 0011 0001\r\n~A= 1100 0011</pre>\r\n\r\n<p>下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>操作符</th>\r\n			<th>描述</th>\r\n			<th>例子</th>\r\n		</tr>\r\n		<tr>\r\n			<td>＆</td>\r\n			<td>如果相对应位都是1，则结果为1，否则为0</td>\r\n			<td>（A＆B），得到12，即0000 1100</td>\r\n		</tr>\r\n		<tr>\r\n			<td>|</td>\r\n			<td>如果相对应位都是 0，则结果为 0，否则为 1</td>\r\n			<td>（A | B）得到61，即 0011 1101</td>\r\n		</tr>\r\n		<tr>\r\n			<td>^</td>\r\n			<td>如果相对应位值相同，则结果为0，否则为1</td>\r\n			<td>（A ^ B）得到49，即 0011 0001</td>\r\n		</tr>\r\n		<tr>\r\n			<td>〜</td>\r\n			<td>按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td>\r\n			<td>（〜A）得到-61，即1100 0011</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;&lt;&nbsp;</td>\r\n			<td>按位左移运算符。左操作数按位左移右操作数指定的位数。</td>\r\n			<td>A &lt;&lt; 2得到240，即 1111 0000</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt;&nbsp;</td>\r\n			<td>按位右移运算符。左操作数按位右移右操作数指定的位数。</td>\r\n			<td>A &gt;&gt; 2得到15即 1111</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt;&gt;&nbsp;</td>\r\n			<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>\r\n			<td>A&gt;&gt;&gt;2得到15即0000 1111</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>下面的简单示例程序演示了位运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { &nbsp; public static void main(String[] args) { &nbsp;&nbsp;&nbsp; int a = 60; /* 60 = 0011 1100 */&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; int b = 13; /* 13 = 0000 1101 */ &nbsp;&nbsp;&nbsp;&nbsp; int c = 0; &nbsp;&nbsp;&nbsp;&nbsp; c = a &amp; b;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* 12 = 0000 1100 */ &nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;a &amp; b = &quot; + c ); &nbsp;&nbsp;&nbsp;&nbsp; c = a | b;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* 61 = 0011 1101 */ &nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;a | b = &quot; + c ); &nbsp;&nbsp;&nbsp;&nbsp; c = a ^ b;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* 49 = 0011 0001 */ &nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;a ^ b = &quot; + c ); &nbsp;&nbsp;&nbsp;&nbsp; c = ~a;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*-61 = 1100 0011 */ &nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;~a = &quot; + c ); &nbsp;&nbsp;&nbsp;&nbsp; c = a &lt;&lt; 2;&nbsp;&nbsp;&nbsp;&nbsp; /* 240 = 1111 0000 */ &nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;a &lt;&lt; 2 = &quot; + c ); &nbsp;&nbsp;&nbsp;&nbsp; c = a &gt;&gt; 2;&nbsp;&nbsp;&nbsp;&nbsp; /* 15 = 1111 */ &nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;a &gt;&gt; 2&nbsp; = &quot; + c ); &nbsp;&nbsp; &nbsp;&nbsp; c = a &gt;&gt;&gt; 2;&nbsp;&nbsp;&nbsp;&nbsp; /* 15 = 0000 1111 */ &nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;a &gt;&gt;&gt; 2 = &quot; + c ); &nbsp; } }&nbsp;</p>\r\n\r\n<p>以上实例编译运行结果如下：</p>\r\n\r\n<pre>\r\na &amp; b = 12\r\na | b = 61\r\na ^ b = 49\r\n~a = -61\r\na &lt;&lt; 2 = 240\r\na &gt;&gt; 2  = 15\r\na &gt;&gt;&gt; 2 = 15</pre>\r\n\r\n<hr />\r\n<h2>逻辑运算符</h2>\r\n\r\n<p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>操作符</th>\r\n			<th>描述</th>\r\n			<th>例子</th>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp;&amp;</td>\r\n			<td>称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td>\r\n			<td>（A &amp;&amp; B）为假。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>| |</td>\r\n			<td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td>\r\n			<td>（A | | B）为真。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>！</td>\r\n			<td>称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td>\r\n			<td>！（A &amp;&amp; B）为真。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>下面的简单示例程序演示了逻辑运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public class Test { public static void main(String[] args) { boolean a = true; boolean b = false; System.out.println(&quot;a &amp;&amp; b = &quot; + (a&amp;&amp;b)); System.out.println(&quot;a || b = &quot; + (a||b) ); System.out.println(&quot;!(a &amp;&amp; b) = &quot; + !(a &amp;&amp; b)); } }</p>\r\n\r\n<p>以上实例编译运行结果如下：</p>\r\n\r\n<pre>\r\na &amp;&amp; b = false\r\na || b = true\r\n!(a &amp;&amp; b) = true</pre>\r\n\r\n<h3>短路逻辑运算符</h3>\r\n\r\n<p>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>public class LuoJi{ public static void main(String[] args){ int a = 5;//定义一个变量； boolean b = (a&lt;4)&amp;&amp;(a++&lt;10); System.out.println(&quot;使用短路逻辑运算符的结果为&quot;+b); System.out.println(&quot;a的结果为&quot;+a); } }</p>\r\n\r\n<p>运行结果为：</p>\r\n\r\n<pre>\r\n使用短路逻辑运算符的结果为false\r\na的结果为5</pre>\r\n\r\n<blockquote>\r\n<p><strong>解析：&nbsp;</strong>该程序使用到了短路逻辑运算符(&amp;&amp;)，首先判断 a&lt;4 的结果为 false，则 b 的结果必定是 false，所以不再执行第二个操作 a++&lt;10 的判断，所以 a 的值为 5。</p>\r\n</blockquote>\r\n\r\n<hr />\r\n<h2>赋值运算符</h2>\r\n\r\n<p>下面是Java语言支持的赋值运算符：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>操作符</th>\r\n			<th>描述</th>\r\n			<th>例子</th>\r\n		</tr>\r\n		<tr>\r\n			<td>=</td>\r\n			<td>简单的赋值运算符，将右操作数的值赋给左侧操作数</td>\r\n			<td>C = A + B将把A + B得到的值赋给C</td>\r\n		</tr>\r\n		<tr>\r\n			<td>+ =</td>\r\n			<td>加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>\r\n			<td>C + = A等价于C = C + A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>- =</td>\r\n			<td>减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>\r\n			<td>C - = A等价于C = C - A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>* =</td>\r\n			<td>乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>\r\n			<td>C * = A等价于C = C * A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>/ =</td>\r\n			<td>除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>\r\n			<td>C / = A，C 与 A 同类型时等价于 C = C / A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>（％）=</td>\r\n			<td>取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>\r\n			<td>C％= A等价于C = C％A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;&lt; =</td>\r\n			<td>左移位赋值运算符</td>\r\n			<td>C &lt;&lt; = 2等价于C = C &lt;&lt; 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt; =</td>\r\n			<td>右移位赋值运算符</td>\r\n			<td>C &gt;&gt; = 2等价于C = C &gt;&gt; 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>＆=</td>\r\n			<td>按位与赋值运算符</td>\r\n			<td>C＆= 2等价于C = C＆2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>^ =</td>\r\n			<td>按位异或赋值操作符</td>\r\n			<td>C ^ = 2等价于C = C ^ 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>| =</td>\r\n			<td>按位或赋值操作符</td>\r\n			<td>C | = 2等价于C = C | 2</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>下面的简单示例程序演示了赋值运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String[] args) { int a = 10; int b = 20; int c = 0; c = a + b; System.out.println(&quot;c = a + b = &quot; + c ); c += a ; System.out.println(&quot;c += a&nbsp; = &quot; + c ); c -= a ; System.out.println(&quot;c -= a = &quot; + c ); c *= a ; System.out.println(&quot;c *= a = &quot; + c ); a = 10; c = 15; c /= a ; System.out.println(&quot;c /= a = &quot; + c ); a = 10; c = 15; c %= a ; System.out.println(&quot;c %= a&nbsp; = &quot; + c ); c &lt;&lt;= 2 ; System.out.println(&quot;c &lt;&lt;= 2 = &quot; + c ); c &gt;&gt;= 2 ; System.out.println(&quot;c &gt;&gt;= 2 = &quot; + c ); c &gt;&gt;= 2 ; System.out.println(&quot;c &gt;&gt;= 2 = &quot; + c ); c &amp;= a ; System.out.println(&quot;c &amp;= a&nbsp; = &quot; + c ); c ^= a ; System.out.println(&quot;c ^= a&nbsp;&nbsp; = &quot; + c ); c |= a ; System.out.println(&quot;c |= a&nbsp;&nbsp; = &quot; + c ); } }</p>\r\n\r\n<p>以上实例编译运行结果如下：</p>\r\n\r\n<pre>\r\nc = a + b = 30\r\nc += a&nbsp; = 40\r\nc -= a = 30\r\nc *= a = 300\r\nc /= a = 1\r\nc %= a&nbsp; = 5\r\nc &lt;&lt;= 2 = 20\r\nc &gt;&gt;= 2 = 5\r\nc &gt;&gt;= 2 = 1\r\nc &amp;= a&nbsp; = 0\r\nc ^= a&nbsp;&nbsp; = 10\r\nc |= a&nbsp;&nbsp; = 10</pre>\r\n\r\n<hr />\r\n<h2>条件运算符（?:）</h2>\r\n\r\n<p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p>\r\n\r\n<pre>\r\nvariable x = (expression) ? value if true : value if false</pre>\r\n\r\n<h3>实例</h3>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String[] args){ int a , b; a = 10; // 如果 a 等于 1 成立，则设置 b 为 20，否则为 30 b = (a == 1) ? 20 : 30; System.out.println( &quot;Value of b is : &quot; + b ); // 如果 a 等于 10 成立，则设置 b 为 20，否则为 30 b = (a == 10) ? 20 : 30; System.out.println( &quot;Value of b is : &quot; + b ); } }</p>\r\n\r\n<p>以上实例编译运行结果如下：</p>\r\n\r\n<pre>\r\nValue of b is : 30\r\nValue of b is : 20</pre>\r\n\r\n<hr />\r\n<h2>instanceof 运算符</h2>\r\n\r\n<p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p>\r\n\r\n<p>instanceof运算符使用格式如下：</p>\r\n\r\n<pre>\r\n( Object reference variable ) instanceof  (class/interface type)</pre>\r\n\r\n<p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。</p>\r\n\r\n<p>下面是一个例子：</p>\r\n\r\n<pre>\r\nString name = &quot;James&quot;;\r\nboolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真</pre>\r\n\r\n<p>如果被比较的对象兼容于右侧类型,该运算符仍然返回true。</p>\r\n\r\n<p>看下面的例子：</p>\r\n\r\n<p>class Vehicle {} public class Car extends Vehicle { public static void main(String[] args){ Vehicle a = new Car(); boolean result = a instanceof Car; System.out.println( result); } }</p>\r\n\r\n<p>以上实例编译运行结果如下：</p>\r\n\r\n<pre>\r\ntrue</pre>\r\n\r\n<hr />\r\n<h2>Java运算符优先级</h2>\r\n\r\n<p>当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。</p>\r\n\r\n<p>例如，（1+3）＋（3+2）*2，这个表达式如果按加号最优先计算，答案就是 18，如果按照乘号最优先，答案则是 14。</p>\r\n\r\n<p>再如，x = 7 + 3 * 2;这里x得到13，而不是20，因为乘法运算符比加法运算符有较高的优先级，所以先计算3 * 2得到6，然后再加7。</p>\r\n\r\n<p>下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>类别</th>\r\n			<th>操作符</th>\r\n			<th>关联性</th>\r\n		</tr>\r\n		<tr>\r\n			<td>后缀</td>\r\n			<td>() [] . (点操作符)</td>\r\n			<td>左到右</td>\r\n		</tr>\r\n		<tr>\r\n			<td>一元</td>\r\n			<td>expr++ expr--</td>\r\n			<td>从左到右</td>\r\n		</tr>\r\n		<tr>\r\n			<td>一元</td>\r\n			<td>++expr --expr + - ～ ！</td>\r\n			<td>从右到左</td>\r\n		</tr>\r\n		<tr>\r\n			<td>乘性&nbsp;</td>\r\n			<td>* /％</td>\r\n			<td>左到右</td>\r\n		</tr>\r\n		<tr>\r\n			<td>加性&nbsp;</td>\r\n			<td>+ -</td>\r\n			<td>左到右</td>\r\n		</tr>\r\n		<tr>\r\n			<td>移位&nbsp;</td>\r\n			<td>&gt;&gt; &gt;&gt;&gt; &nbsp;&lt;&lt;&nbsp;</td>\r\n			<td>左到右</td>\r\n		</tr>\r\n		<tr>\r\n			<td>关系&nbsp;</td>\r\n			<td>&gt; &gt;= &lt; &lt;=&nbsp;</td>\r\n			<td>左到右</td>\r\n		</tr>\r\n		<tr>\r\n			<td>相等&nbsp;</td>\r\n			<td>==&nbsp; !=</td>\r\n			<td>左到右</td>\r\n		</tr>\r\n		<tr>\r\n			<td>按位与</td>\r\n			<td>＆</td>\r\n			<td>左到右</td>\r\n		</tr>\r\n		<tr>\r\n			<td>按位异或</td>\r\n			<td>^</td>\r\n			<td>左到右</td>\r\n		</tr>\r\n		<tr>\r\n			<td>按位或</td>\r\n			<td>|</td>\r\n			<td>左到右</td>\r\n		</tr>\r\n		<tr>\r\n			<td>逻辑与</td>\r\n			<td>&amp;&amp;</td>\r\n			<td>左到右</td>\r\n		</tr>\r\n		<tr>\r\n			<td>逻辑或</td>\r\n			<td>| |</td>\r\n			<td>左到右</td>\r\n		</tr>\r\n		<tr>\r\n			<td>条件</td>\r\n			<td>？：</td>\r\n			<td>从右到左</td>\r\n		</tr>\r\n		<tr>\r\n			<td>赋值</td>\r\n			<td>= + = - = * = / =％= &gt;&gt; = &lt;&lt; =＆= ^ = | =</td>\r\n			<td>从右到左</td>\r\n		</tr>\r\n		<tr>\r\n			<td>逗号</td>\r\n			<td>，</td>\r\n			<td>左到右</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 0, '2021-12-14 02:34:49.699800', '2021-12-14 02:34:49.703815', 8, 6);
INSERT INTO `tb_article` VALUES (66, 'article/20211214/java_sMgaq0P.png', 'Java 循环结构', 'Java 循环结构 - for, while 及 do...while', 'Java 循环结构 - for, while 及 do...while', '<h1>Java 循环结构 - for, while 及 do...while</h1>\r\n\r\n<p>顺序结构的程序语句只能被执行一次。</p>\r\n\r\n<p>如果您想要同样的操作执行多次，就需要使用循环结构。</p>\r\n\r\n<p>Java中有三种主要的循环结构：</p>\r\n\r\n<ul>\r\n	<li><strong>while</strong>&nbsp;循环</li>\r\n	<li><strong>do&hellip;while</strong>&nbsp;循环</li>\r\n	<li><strong>for</strong>&nbsp;循环</li>\r\n</ul>\r\n\r\n<p>在Java5中引入了一种主要用于数组的增强型for循环。</p>\r\n\r\n<hr />\r\n<h2>while 循环</h2>\r\n\r\n<p>while是最基本的循环，它的结构为：</p>\r\n\r\n<p>while( 布尔表达式 ) { //循环内容 }</p>\r\n\r\n<p>只要布尔表达式为 true，循环就会一直执行下去。</p>\r\n\r\n<h3>实例</h3>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String args[]) { int x = 10; while( x &lt; 20 ) { System.out.print(&quot;value of x : &quot; + x ); x++; System.out.print(&quot;\\n&quot;); } } }</p>\r\n\r\n<p>以上实例编译运行结果如下：</p>\r\n\r\n<pre>\r\nvalue of x : 10\r\nvalue of x : 11\r\nvalue of x : 12\r\nvalue of x : 13\r\nvalue of x : 14\r\nvalue of x : 15\r\nvalue of x : 16\r\nvalue of x : 17\r\nvalue of x : 18\r\nvalue of x : 19</pre>\r\n\r\n<hr />\r\n<h2>do&hellip;while 循环</h2>\r\n\r\n<p>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</p>\r\n\r\n<p>do&hellip;while 循环和 while 循环相似，不同的是，do&hellip;while 循环至少会执行一次。</p>\r\n\r\n<pre>\r\ndo {\r\n       //代码语句\r\n}while(布尔表达式);</pre>\r\n\r\n<p><strong>注意：</strong>布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。</p>\r\n\r\n<h3>实例</h3>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String args[]){ int x = 10; do{ System.out.print(&quot;value of x : &quot; + x ); x++; System.out.print(&quot;\\n&quot;); }while( x &lt; 20 ); } }</p>\r\n\r\n<p>以上实例编译运行结果如下：</p>\r\n\r\n<pre>\r\nvalue of x : 10\r\nvalue of x : 11\r\nvalue of x : 12\r\nvalue of x : 13\r\nvalue of x : 14\r\nvalue of x : 15\r\nvalue of x : 16\r\nvalue of x : 17\r\nvalue of x : 18\r\nvalue of x : 19</pre>\r\n\r\n<hr />\r\n<h2>for循环</h2>\r\n\r\n<p>虽然所有循环结构都可以用 while 或者 do...while表示，但 Java 提供了另一种语句 &mdash;&mdash; for 循环，使一些循环结构变得更加简单。</p>\r\n\r\n<p>for循环执行的次数是在执行前就确定的。语法格式如下：</p>\r\n\r\n<p>for(初始化; 布尔表达式; 更新) { //代码语句 }</p>\r\n\r\n<p>关于 for 循环有以下几点说明：</p>\r\n\r\n<ul>\r\n	<li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li>\r\n	<li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li>\r\n	<li>执行一次循环后，更新循环控制变量。</li>\r\n	<li>再次检测布尔表达式。循环执行上面的过程。</li>\r\n</ul>\r\n\r\n<h3>实例</h3>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String args[]) { for(int x = 10; x &lt; 20; x = x+1) { System.out.print(&quot;value of x : &quot; + x ); System.out.print(&quot;\\n&quot;); } } }</p>\r\n\r\n<p>以上实例编译运行结果如下：</p>\r\n\r\n<pre>\r\nvalue of x : 10\r\nvalue of x : 11\r\nvalue of x : 12\r\nvalue of x : 13\r\nvalue of x : 14\r\nvalue of x : 15\r\nvalue of x : 16\r\nvalue of x : 17\r\nvalue of x : 18\r\nvalue of x : 19</pre>\r\n\r\n<hr />\r\n<h2>Java 增强 for 循环</h2>\r\n\r\n<p>Java5 引入了一种主要用于数组的增强型 for 循环。</p>\r\n\r\n<p>Java 增强 for 循环语法格式如下:</p>\r\n\r\n<p>for(声明语句 : 表达式) { //代码句子 }</p>\r\n\r\n<p><strong>声明语句：</strong>声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p>\r\n\r\n<p><strong>表达式：</strong>表达式是要访问的数组名，或者是返回值为数组的方法。</p>\r\n\r\n<h3>实例</h3>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String args[]){ int [] numbers = {10, 20, 30, 40, 50}; for(int x : numbers ){ System.out.print( x ); System.out.print(&quot;,&quot;); } System.out.print(&quot;\\n&quot;); String [] names ={&quot;James&quot;, &quot;Larry&quot;, &quot;Tom&quot;, &quot;Lacy&quot;}; for( String name : names ) { System.out.print( name ); System.out.print(&quot;,&quot;); } } }</p>\r\n\r\n<p>以上实例编译运行结果如下：</p>\r\n\r\n<pre>\r\n10,20,30,40,50,\r\nJames,Larry,Tom,Lacy,</pre>\r\n\r\n<hr />\r\n<h2>break 关键字</h2>\r\n\r\n<p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</p>\r\n\r\n<p>break 跳出最里层的循环，并且继续执行该循环下面的语句。</p>\r\n\r\n<h3>语法</h3>\r\n\r\n<p>break 的用法很简单，就是循环结构中的一条语句：</p>\r\n\r\n<pre>\r\nbreak;</pre>\r\n\r\n<h3>实例</h3>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String args[]) { int [] numbers = {10, 20, 30, 40, 50}; for(int x : numbers ) { // x 等于 30 时跳出循环 if( x == 30 ) { break; } System.out.print( x ); System.out.print(&quot;\\n&quot;); } } }</p>\r\n\r\n<p>以上实例编译运行结果如下：</p>\r\n\r\n<pre>\r\n10\r\n20</pre>\r\n\r\n<hr />\r\n<h2>continue 关键字</h2>\r\n\r\n<p>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p>\r\n\r\n<p>在 for 循环中，continue 语句使程序立即跳转到更新语句。</p>\r\n\r\n<p>在 while 或者 do&hellip;while 循环中，程序立即跳转到布尔表达式的判断语句。</p>\r\n\r\n<h3>语法</h3>\r\n\r\n<p>continue 就是循环体中一条简单的语句：</p>\r\n\r\n<pre>\r\ncontinue;</pre>\r\n\r\n<h3>实例</h3>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String args[]) { int [] numbers = {10, 20, 30, 40, 50}; for(int x : numbers ) { if( x == 30 ) { continue; } System.out.print( x ); System.out.print(&quot;\\n&quot;); } } }</p>\r\n\r\n<p>以上实例编译运行结果如下：</p>\r\n\r\n<pre>\r\n10\r\n20\r\n40\r\n50</pre>\r\n', 0, 0, '2021-12-14 02:35:27.554909', '2021-12-14 02:35:27.558914', 8, 6);
INSERT INTO `tb_article` VALUES (67, 'article/20211214/java_LglRvJl.png', 'Java 条件语句', 'Java 条件语句 - if...else', 'Java 条件语句 - if...else', '<h1>Java 条件语句 - if...else</h1>\r\n\r\n<p>一个 if 语句包含一个布尔表达式和一条或多条语句。</p>\r\n\r\n<h3>语法</h3>\r\n\r\n<p>if 语句的语法如下：</p>\r\n\r\n<p>if(布尔表达式) { //如果布尔表达式为true将执行的语句 }</p>\r\n\r\n<p>如果布尔表达式的值为 true，则执行 if 语句中的代码块，否则执行 if 语句块后面的代码。</p>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String args[]){ int x = 10; if( x &lt; 20 ){ System.out.print(&quot;这是 if 语句&quot;); } } }</p>\r\n\r\n<p>以上代码编译运行结果如下：</p>\r\n\r\n<pre>\r\n这是 if 语句</pre>\r\n\r\n<hr />\r\n<h2>if...else语句</h2>\r\n\r\n<p>if 语句后面可以跟 else 语句，当 if 语句的布尔表达式值为 false 时，else 语句块会被执行。</p>\r\n\r\n<h3>语法</h3>\r\n\r\n<p>if&hellip;else 的用法如下：</p>\r\n\r\n<p>if(布尔表达式){ //如果布尔表达式的值为true }else{ //如果布尔表达式的值为false }</p>\r\n\r\n<h3>实例</h3>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String args[]){ int x = 30; if( x &lt; 20 ){ System.out.print(&quot;这是 if 语句&quot;); }else{ System.out.print(&quot;这是 else 语句&quot;); } } }</p>\r\n\r\n<p>以上代码编译运行结果如下：</p>\r\n\r\n<pre>\r\n这是 else 语句</pre>\r\n\r\n<hr />\r\n<h2>if...else if...else 语句</h2>\r\n\r\n<p>if 语句后面可以跟 else if&hellip;else 语句，这种语句可以检测到多种可能的情况。</p>\r\n\r\n<p>使用 if，else if，else 语句的时候，需要注意下面几点：</p>\r\n\r\n<ul>\r\n	<li>if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。</li>\r\n	<li>if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。</li>\r\n	<li>一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。</li>\r\n</ul>\r\n\r\n<h3>语法</h3>\r\n\r\n<p>if...else 语法格式如下:</p>\r\n\r\n<p>if(布尔表达式 1){ //如果布尔表达式 1的值为true执行代码 }else if(布尔表达式 2){ //如果布尔表达式 2的值为true执行代码 }else if(布尔表达式 3){ //如果布尔表达式 3的值为true执行代码 }else { //如果以上布尔表达式都不为true执行代码 }</p>\r\n\r\n<h3>实例</h3>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String args[]){ int x = 30; if( x == 10 ){ System.out.print(&quot;Value of X is 10&quot;); }else if( x == 20 ){ System.out.print(&quot;Value of X is 20&quot;); }else if( x == 30 ){ System.out.print(&quot;Value of X is 30&quot;); }else{ System.out.print(&quot;这是 else 语句&quot;); } } }</p>\r\n\r\n<p>以上代码编译运行结果如下：</p>\r\n\r\n<pre>\r\nValue of X is 30</pre>\r\n\r\n<hr />\r\n<h2>嵌套的 if&hellip;else 语句</h2>\r\n\r\n<p>使用嵌套的 if&hellip;else 语句是合法的。也就是说你可以在另一个 if 或者 else if 语句中使用 if 或者 else if 语句。</p>\r\n\r\n<h3>语法</h3>\r\n\r\n<p>嵌套的 if&hellip;else 语法格式如下：</p>\r\n\r\n<p>if(布尔表达式 1){ ////如果布尔表达式 1的值为true执行代码 if(布尔表达式 2){ ////如果布尔表达式 2的值为true执行代码 } }</p>\r\n\r\n<p>你可以像 if 语句一样嵌套 else if...else。</p>\r\n\r\n<h3>实例</h3>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String args[]){ int x = 30; int y = 10; if( x == 30 ){ if( y == 10 ){ System.out.print(&quot;X = 30 and Y = 10&quot;); } } } }</p>\r\n\r\n<p>以上代码编译运行结果如下：</p>\r\n\r\n<pre>\r\nX = 30 and Y = 10</pre>\r\n', 0, 0, '2021-12-14 02:36:05.810544', '2021-12-14 02:36:05.817569', 8, 6);
INSERT INTO `tb_article` VALUES (68, 'article/20211214/java_mNPiUKp.png', 'Java switch', 'Java switch case 语句', 'Java switch case 语句', '<h1>Java switch case 语句</h1>\r\n\r\n<p>switch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</p>\r\n\r\n<h3>语法</h3>\r\n\r\n<p>switch case 语句语法格式如下：</p>\r\n\r\n<p>switch(expression){ case value : //语句 break; //可选 case value : //语句 break; //可选 //你可以有任意数量的case语句 default : //可选 //语句 }</p>\r\n\r\n<p>switch case 语句有如下规则：</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</p>\r\n	</li>\r\n	<li>\r\n	<p>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。</p>\r\n	</li>\r\n	<li>\r\n	<p>case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。</p>\r\n	</li>\r\n	<li>\r\n	<p>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</p>\r\n	</li>\r\n	<li>\r\n	<p>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</p>\r\n	</li>\r\n	<li>\r\n	<p>switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。</p>\r\n	</li>\r\n</ul>\r\n\r\n<p><strong>switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。</strong></p>\r\n\r\n<h3>实例</h3>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String args[]){ //char grade = args[0].charAt(0); char grade = &#39;C&#39;; switch(grade) { case &#39;A&#39; : System.out.println(&quot;优秀&quot;); break; case &#39;B&#39; : case &#39;C&#39; : System.out.println(&quot;良好&quot;); break; case &#39;D&#39; : System.out.println(&quot;及格&quot;); break; case &#39;F&#39; : System.out.println(&quot;你需要再努力努力&quot;); break; default : System.out.println(&quot;未知等级&quot;); } System.out.println(&quot;你的等级是 &quot; + grade); } }</p>\r\n\r\n<p>以上代码编译运行结果如下：</p>\r\n\r\n<pre>\r\n良好\r\n你的等级是 C</pre>\r\n\r\n<p>如果 case 语句块中没有 break 语句时，JVM 并不会顺序输出每一个 case 对应的返回值，而是继续匹配，匹配不成功则返回默认 case。</p>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String args[]){ int i = 5; switch(i){ case 0: System.out.println(&quot;0&quot;); case 1: System.out.println(&quot;1&quot;); case 2: System.out.println(&quot;2&quot;); default: System.out.println(&quot;default&quot;); } } }</p>\r\n\r\n<p>以上代码编译运行结果如下：</p>\r\n\r\n<pre>\r\ndefault</pre>\r\n\r\n<p>如果 case 语句块中没有 break 语句时，匹配成功后，从当前 case 开始，后续所有 case 的值都会输出。</p>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String args[]){ int i = 1; switch(i){ case 0: System.out.println(&quot;0&quot;); case 1: System.out.println(&quot;1&quot;); case 2: System.out.println(&quot;2&quot;); default: System.out.println(&quot;default&quot;); } } }</p>\r\n\r\n<p>以上代码编译运行结果如下：</p>\r\n\r\n<pre>\r\n1\r\n2\r\ndefault</pre>\r\n\r\n<p>如果当前匹配成功的 case 语句块没有 break 语句，则从当前 case 开始，后续所有 case 的值都会输出，如果后续的 case 语句块有 break 语句则会跳出判断。</p>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main(String args[]){ int i = 1; switch(i){ case 0: System.out.println(&quot;0&quot;); case 1: System.out.println(&quot;1&quot;); case 2: System.out.println(&quot;2&quot;); case 3: System.out.println(&quot;3&quot;); break; default: System.out.println(&quot;default&quot;); } } }</p>\r\n\r\n<p>以上代码编译运行结果如下：</p>\r\n\r\n<pre>\r\n1\r\n2\r\n3</pre>\r\n', 0, 0, '2021-12-14 02:36:36.637587', '2021-12-14 02:36:36.643620', 8, 6);
INSERT INTO `tb_article` VALUES (69, 'article/20211214/java_q2QZcYc.png', 'Java Number', 'Java Number & Math 类', 'Java Number & Math 类', '<h1>Java Number &amp; Math 类</h1>\r\n\r\n<p>一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：<strong>byte、int、long、double</strong>&nbsp;等。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>int a = 5000; float b = 13.65f; byte c = 0x4a;</p>\r\n\r\n<p>然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。</p>\r\n\r\n<p>所有的包装类<strong>（Integer、Long、Byte、Double、Float、Short）</strong>都是抽象类 Number 的子类。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>包装类</th>\r\n			<th>基本数据类型</th>\r\n		</tr>\r\n		<tr>\r\n			<td>Boolean</td>\r\n			<td>boolean</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Byte</td>\r\n			<td>byte</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Short</td>\r\n			<td>short</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Integer</td>\r\n			<td>int</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Long</td>\r\n			<td>long</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Character</td>\r\n			<td>char</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Float</td>\r\n			<td>float</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Double</td>\r\n			<td>double</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><img alt=\"Java Number类\" src=\"https://www.runoob.com/wp-content/uploads/2013/12/OOP_WrapperClass.png\" /></p>\r\n\r\n<p>这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。</p>\r\n\r\n<p>下面是一个使用 Integer 对象的实例：</p>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test{ public static void main(String[] args){ Integer x = 5; x = x + 10; System.out.println(x); } }</p>\r\n\r\n<p>以上实例编译运行结果如下：</p>\r\n\r\n<pre>\r\n15</pre>\r\n\r\n<p>当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。</p>\r\n\r\n<hr />\r\n<h2>Java Math 类</h2>\r\n\r\n<p>Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。</p>\r\n\r\n<p>Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。</p>\r\n\r\n<h2>Test.java 文件代码：</h2>\r\n\r\n<p>public class Test { public static void main (String []args) { System.out.println(&quot;90 度的正弦值：&quot; + Math.sin(Math.PI/2)); System.out.println(&quot;0度的余弦值：&quot; + Math.cos(0)); System.out.println(&quot;60度的正切值：&quot; + Math.tan(Math.PI/3)); System.out.println(&quot;1的反正切值： &quot; + Math.atan(1)); System.out.println(&quot;&pi;/2的角度值：&quot; + Math.toDegrees(Math.PI/2)); System.out.println(Math.PI); } }</p>\r\n\r\n<p>以上实例编译运行结果如下：</p>\r\n\r\n<pre>\r\n90 度的正弦值：1.0\r\n0度的余弦值：1.0\r\n60度的正切值：1.7320508075688767\r\n1的反正切值： 0.7853981633974483\r\n&pi;/2的角度值：90.0\r\n3.141592653589793</pre>\r\n\r\n<hr />\r\n<h2>Number &amp; Math 类方法</h2>\r\n\r\n<p>下面的表中列出的是 Number &amp; Math 类常用的一些方法：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>序号</th>\r\n			<th>方法与描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-xxxvalue.html\" rel=\"noopener noreferrer\" target=\"_blank\">xxxValue()</a><br />\r\n			将 Number 对象转换为xxx数据类型的值并返回。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-compareto.html\" rel=\"noopener noreferrer\" target=\"_blank\">compareTo()</a><br />\r\n			将number对象与参数比较。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-equals.html\" rel=\"noopener noreferrer\" target=\"_blank\">equals()</a><br />\r\n			判断number对象是否与参数相等。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-valueof.html\" rel=\"noopener noreferrer\" target=\"_blank\">valueOf()</a><br />\r\n			返回一个 Number 对象指定的内置数据类型</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-tostring.html\" rel=\"noopener noreferrer\" target=\"_blank\">toString()</a><br />\r\n			以字符串形式返回值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>6</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-parseInt.html\" rel=\"noopener noreferrer\" target=\"_blank\">parseInt()</a><br />\r\n			将字符串解析为int类型。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>7</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-abs.html\" rel=\"noopener noreferrer\" target=\"_blank\">abs()</a><br />\r\n			返回参数的绝对值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>8</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-ceil.html\" rel=\"noopener noreferrer\" target=\"_blank\">ceil()</a><br />\r\n			返回大于等于( &gt;= )给定参数的的最小整数，类型为双精度浮点型。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>9</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-floor.html\" rel=\"noopener noreferrer\" target=\"_blank\">floor()</a><br />\r\n			返回小于等于（&lt;=）给定参数的最大整数 。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>10</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-rint.html\" rel=\"noopener noreferrer\" target=\"_blank\">rint()</a><br />\r\n			返回与参数最接近的整数。返回类型为double。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>11</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-round.html\" rel=\"noopener noreferrer\" target=\"_blank\">round()</a><br />\r\n			它表示<strong>四舍五入</strong>，算法为&nbsp;Math.floor(x+0.5)，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>12</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-min.html\" rel=\"noopener noreferrer\" target=\"_blank\">min()</a><br />\r\n			返回两个参数中的最小值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>13</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-max.html\" rel=\"noopener noreferrer\" target=\"_blank\">max()</a><br />\r\n			返回两个参数中的最大值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>14</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-exp.html\" rel=\"noopener noreferrer\" target=\"_blank\">exp()</a><br />\r\n			返回自然数底数e的参数次方。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>15</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-log.html\" rel=\"noopener noreferrer\" target=\"_blank\">log()</a><br />\r\n			返回参数的自然数底数的对数值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>16</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-pow.html\" rel=\"noopener noreferrer\" target=\"_blank\">pow()</a><br />\r\n			返回第一个参数的第二个参数次方。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>17</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-sqrt.html\" rel=\"noopener noreferrer\" target=\"_blank\">sqrt()</a><br />\r\n			求参数的算术平方根。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>18</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-sin.html\" rel=\"noopener noreferrer\" target=\"_blank\">sin()</a><br />\r\n			求指定double类型参数的正弦值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>19</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-cos.html\" rel=\"noopener noreferrer\" target=\"_blank\">cos()</a><br />\r\n			求指定double类型参数的余弦值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>20</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-tan.html\" rel=\"noopener noreferrer\" target=\"_blank\">tan()</a><br />\r\n			求指定double类型参数的正切值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>21</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-asin.html\" rel=\"noopener noreferrer\" target=\"_blank\">asin()</a><br />\r\n			求指定double类型参数的反正弦值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>22</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-acos.html\" rel=\"noopener noreferrer\" target=\"_blank\">acos()</a><br />\r\n			求指定double类型参数的反余弦值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>23</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-atan.html\" rel=\"noopener noreferrer\" target=\"_blank\">atan()</a><br />\r\n			求指定double类型参数的反正切值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>24</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-atan2.html\" rel=\"noopener noreferrer\" target=\"_blank\">atan2()</a><br />\r\n			将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>25</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-todegrees.html\" rel=\"noopener noreferrer\" target=\"_blank\">toDegrees()</a><br />\r\n			将参数转化为角度。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>26</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-toradians.html\" rel=\"noopener noreferrer\" target=\"_blank\">toRadians()</a><br />\r\n			将角度转换为弧度。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>27</td>\r\n			<td><a href=\"https://www.runoob.com/java/number-random.html\" rel=\"noopener noreferrer\" target=\"_blank\">random()</a><br />\r\n			返回一个随机数。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<hr />\r\n<h2>Math 的 floor,round 和 ceil 方法实例比较</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>参数</th>\r\n			<th>Math.floor</th>\r\n			<th>Math.round</th>\r\n			<th>Math.ceil</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1.4</td>\r\n			<td>1</td>\r\n			<td>1</td>\r\n			<td>2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>1.5</td>\r\n			<td>1</td>\r\n			<td>2</td>\r\n			<td>2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>1.6</td>\r\n			<td>1</td>\r\n			<td>2</td>\r\n			<td>2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-1.4</td>\r\n			<td>-2</td>\r\n			<td>-1</td>\r\n			<td>-1</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-1.5</td>\r\n			<td>-2</td>\r\n			<td>-1</td>\r\n			<td>-1</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-1.6</td>\r\n			<td>-2</td>\r\n			<td>-2</td>\r\n			<td>-1</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>floor,round 和 ceil 实例：</h2>\r\n\r\n<p>public class Main { public static void main(String[] args) { double[] nums = { 1.4, 1.5, 1.6, -1.4, -1.5, -1.6 }; for (double num : nums) { test(num); } } private static void test(double num) { System.out.println(&quot;Math.floor(&quot; + num + &quot;)=&quot; + Math.floor(num)); System.out.println(&quot;Math.round(&quot; + num + &quot;)=&quot; + Math.round(num)); System.out.println(&quot;Math.ceil(&quot; + num + &quot;)=&quot; + Math.ceil(num)); } }</p>\r\n\r\n<p>以上实例执行输出结果为：</p>\r\n\r\n<pre>\r\nMath.floor(1.4)=1.0\r\nMath.round(1.4)=1\r\nMath.ceil(1.4)=2.0\r\nMath.floor(1.5)=1.0\r\nMath.round(1.5)=2\r\nMath.ceil(1.5)=2.0\r\nMath.floor(1.6)=1.0\r\nMath.round(1.6)=2\r\nMath.ceil(1.6)=2.0\r\nMath.floor(-1.4)=-2.0\r\nMath.round(-1.4)=-1\r\nMath.ceil(-1.4)=-1.0\r\nMath.floor(-1.5)=-2.0\r\nMath.round(-1.5)=-1\r\nMath.ceil(-1.5)=-1.0\r\nMath.floor(-1.6)=-2.0\r\nMath.round(-1.6)=-2\r\nMath.ceil(-1.6)=-1.0</pre>\r\n', 2, 0, '2021-12-14 02:37:04.038567', '2021-12-16 02:04:52.118421', 8, 6);
INSERT INTO `tb_article` VALUES (70, 'article/20211214/JavaScript.jpg', 'JavaScript 简介', 'JavaScript 简介', 'JavaScript 简介', '<h1>JavaScript&nbsp;简介</h1>\r\n\r\n<hr />\r\n<p>JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 是脚本语言</h2>\r\n\r\n<p>JavaScript 是一种轻量级的编程语言。</p>\r\n\r\n<p>JavaScript 是可插入 HTML 页面的编程代码。</p>\r\n\r\n<p>JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。</p>\r\n\r\n<p>JavaScript 很容易学习。</p>\r\n\r\n<hr />\r\n<h2>您将学到什么</h2>\r\n\r\n<p>下面是您将在本教程中学到的主要内容。</p>\r\n\r\n<hr />\r\n<h2>JavaScript：直接写入 HTML 输出流</h2>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>document.write(&quot;&lt;h1&gt;这是一个标题&lt;/h1&gt;&quot;); document.write(&quot;&lt;p&gt;这是一个段落。&lt;/p&gt;&quot;);</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_intro_document_write\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"lamp\" src=\"https://www.runoob.com/images/lamp.jpg\" style=\"height:32px; width:32px\" /></th>\r\n			<td>您只能在 HTML 输出中使用 document.write。如果您在文档加载后使用该方法，会覆盖整个文档。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript：对事件的反应</h2>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;button type=&quot;button&quot; onclick=&quot;alert(&#39;欢迎!&#39;)&quot;&gt;点我!&lt;/button&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_intro_alert\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>alert() 函数在 JavaScript 中并不常用，但它对于代码测试非常方便。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>onclick 事件只是您即将在本教程中学到的众多事件之一。</p>\r\n\r\n<hr />\r\n<h2>JavaScript：改变 HTML 内容</h2>\r\n\r\n<p>使用 JavaScript 来处理 HTML 内容是非常强大的功能。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>x=document.getElementById(&quot;demo&quot;); //查找元素 x.innerHTML=&quot;Hello JavaScript&quot;; //改变内容</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_intro_inner_html\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>您会经常看到&nbsp;<strong>document.getElementById(&quot;</strong><em><strong>some id</strong></em><strong>&quot;)</strong>。这个方法是 HTML DOM 中定义的。</p>\r\n\r\n<p>DOM (<strong>D</strong>ocument&nbsp;<strong>O</strong>bject&nbsp;<strong>M</strong>odel)（文档对象模型）是用于访问 HTML 元素的正式 W3C 标准。</p>\r\n\r\n<p>您将在本教程的多个章节中学到有关 HTML DOM 的知识。</p>\r\n\r\n<hr />\r\n<h2>JavaScript：改变 HTML 图像</h2>\r\n\r\n<p>本例会动态地改变 HTML &lt;image&gt; 的来源（src）：</p>\r\n\r\n<h2>点亮灯泡</h2>\r\n\r\n<p>&lt;script&gt; function changeImage() { element=document.getElementById(&#39;myimage&#39;) if (element.src.match(&quot;bulbon&quot;)) { element.src=&quot;/images/pic_bulboff.gif&quot;; } else { element.src=&quot;/images/pic_bulbon.gif&quot;; } } &lt;/script&gt; &lt;img loading=&quot;lazy&quot; id=&quot;myimage&quot; onclick=&quot;changeImage()&quot; src=&quot;/images/pic_bulboff.gif&quot; width=&quot;100&quot; height=&quot;180&quot;&gt;</p>\r\n\r\n<p>点击以下灯泡查看效果：</p>\r\n\r\n<p><img id=\"myimage\" src=\"https://www.runoob.com/images/pic_bulboff.gif\" style=\"height:180px; width:100px\" /></p>\r\n\r\n<p>点击灯泡就可以打开或关闭这盏灯</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_lightbulb\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<blockquote>\r\n<p>以上实例中代码&nbsp;<strong>element.src.match(&quot;bulbon&quot;)</strong>&nbsp;的作用意思是：检索&nbsp;<strong>&lt;img id=&quot;myimage&quot; onclick=&quot;changeImage()&quot; src=&quot;/images/pic_bulboff.gif&quot; width=&quot;100&quot; height=&quot;180&quot;&gt;</strong>&nbsp;里面 src 属性的值有没有包含&nbsp;bulbon&nbsp;这个字符串，如果存在字符串&nbsp;<strong>bulbon</strong>，图片&nbsp;<strong>src</strong>&nbsp;更新为&nbsp;<strong>bulboff.gif</strong>，若匹配不到&nbsp;<strong>bulbon</strong>&nbsp;字符串，<strong>src</strong>&nbsp;则更新为&nbsp;<strong>bulbon.gif</strong></p>\r\n</blockquote>\r\n\r\n<p>JavaScript 能够改变任意 HTML 元素的大多数属性，而不仅仅是图片。</p>\r\n\r\n<hr />\r\n<h2>JavaScript：改变 HTML 样式</h2>\r\n\r\n<p>改变 HTML 元素的样式，属于改变 HTML 属性的变种。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>x=document.getElementById(&quot;demo&quot;) //找到元素 x.style.color=&quot;#ff0000&quot;; //改变样式</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_intro_style\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript：验证输入</h2>\r\n\r\n<p>JavaScript 常用于验证用户的输入。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>if isNaN(x) { alert(&quot;不是数字&quot;); }</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_intro_validate\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>以上实例只是普通的验证，如果要在生产环境中使用，需要严格判断，如果输入的空格，或者连续空格 isNaN 是判别不出来的。可以添加正则来判断（后续章节会说明）：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>if(isNaN(x)||x.replace(/(^\\s*)|(\\s*$)/g,&quot;&quot;)==&quot;&quot;){ alert(&quot;不是数字&quot;); }</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_intro_validate2\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>您知道吗？</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"lamp\" src=\"https://www.runoob.com/images/lamp.jpg\" style=\"height:32px; width:32px\" /></th>\r\n			<td>JavaScript 与 Java 是两种完全不同的语言，无论在概念上还是设计上。<br />\r\n			Java（由 Sun 发明）是更复杂的编程语言。<br />\r\n			<br />\r\n			ECMA-262 是 JavaScript 标准的官方名称。<br />\r\n			<br />\r\n			JavaScript 由 Brendan Eich 发明。它于 1995 年出现在 Netscape 中（该浏览器已停止更新），并于 1997 年被 ECMA（一个标准协会）采纳。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<hr />\r\n<h2>ECMAScript 版本</h2>\r\n\r\n<p>JavaScript 已经由 ECMA（欧洲电脑制造商协会）通过 ECMAScript 实现语言的标准化。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>年份</th>\r\n			<th>名称</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1997</td>\r\n			<td>ECMAScript 1</td>\r\n			<td>第一个版本</td>\r\n		</tr>\r\n		<tr>\r\n			<td>1998</td>\r\n			<td>ECMAScript 2</td>\r\n			<td>版本变更</td>\r\n		</tr>\r\n		<tr>\r\n			<td>1999</td>\r\n			<td>ECMAScript 3</td>\r\n			<td>添加正则表达式<br />\r\n			添加 try/catch</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&nbsp;</td>\r\n			<td>ECMAScript 4</td>\r\n			<td>没有发布</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2009</td>\r\n			<td>ECMAScript 5</td>\r\n			<td>添加 &quot;strict mode&quot;，严格模式<br />\r\n			添加 JSON 支持</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2011</td>\r\n			<td>ECMAScript 5.1</td>\r\n			<td>版本变更</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2015</td>\r\n			<td>ECMAScript 6</td>\r\n			<td>添加类和模块</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2016</td>\r\n			<td>ECMAScript 7</td>\r\n			<td>增加指数运算符 (**)<br />\r\n			增加 Array.prototype.includes</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<blockquote>\r\n<p>ECMAScript 6 也称为 ECMAScript 2015。</p>\r\n\r\n<p>ECMAScript 7 也称为 ECMAScript 2016。</p>\r\n</blockquote>\r\n', 0, 0, '2021-12-14 02:38:41.089986', '2021-12-14 02:38:41.092989', 8, 7);
INSERT INTO `tb_article` VALUES (71, 'article/20211214/JavaScript_tpkmiR4.jpg', 'JavaScript 用法', 'JavaScript 用法', 'JavaScript 用法', '<h1>JavaScript&nbsp;用法</h1>\r\n\r\n<hr />\r\n<p>HTML 中的脚本必须位于 &lt;script&gt; 与 &lt;/script&gt; 标签之间。</p>\r\n\r\n<p>脚本可被放置在 HTML 页面的 &lt;body&gt; 和 &lt;head&gt; 部分中。</p>\r\n\r\n<hr />\r\n<h2>&lt;script&gt; 标签</h2>\r\n\r\n<p>如需在 HTML 页面中插入 JavaScript，请使用 &lt;script&gt; 标签。</p>\r\n\r\n<p>&lt;script&gt; 和 &lt;/script&gt; 会告诉 JavaScript 在何处开始和结束。</p>\r\n\r\n<p>&lt;script&gt; 和 &lt;/script&gt; 之间的代码行包含了 JavaScript:</p>\r\n\r\n<p>&lt;script&gt; alert(&quot;我的第一个 JavaScript&quot;); &lt;/script&gt;</p>\r\n\r\n<p>您无需理解上面的代码。只需明白，浏览器会解释并执行位于 &lt;script&gt; 和 &lt;/script&gt;之间的 JavaScript 代码&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"lamp\" src=\"https://www.runoob.com/images/lamp.jpg\" style=\"height:32px; width:32px\" /></th>\r\n			<td>那些老旧的实例可能会在 &lt;script&gt; 标签中使用 type=&quot;text/javascript&quot;。现在已经不必这样做了。JavaScript 是所有现代浏览器以及 HTML5 中的默认脚本语言。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>&lt;body&gt; 中的 JavaScript</h2>\r\n\r\n<p>在本例中，JavaScript 会在页面加载时向 HTML 的 &lt;body&gt; 写文本：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; . . &lt;script&gt; document.write(&quot;&lt;h1&gt;这是一个标题&lt;/h1&gt;&quot;); document.write(&quot;&lt;p&gt;这是一个段落&lt;/p&gt;&quot;); &lt;/script&gt; . . &lt;/body&gt; &lt;/html&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_intro_document_write\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript 函数和事件</h2>\r\n\r\n<p>上面例子中的 JavaScript 语句，会在页面加载时执行。</p>\r\n\r\n<p>通常，我们需要在某个事件发生时执行代码，比如当用户点击按钮时。</p>\r\n\r\n<p>如果我们把 JavaScript 代码放入函数中，就可以在事件发生时调用该函数。</p>\r\n\r\n<p>您将在稍后的章节学到更多有关 JavaScript 函数和事件的知识。</p>\r\n\r\n<hr />\r\n<h2>在 &lt;head&gt; 或者 &lt;body&gt; 的JavaScript</h2>\r\n\r\n<p>您可以在 HTML 文档中放入不限数量的脚本。</p>\r\n\r\n<p>脚本可位于 HTML 的 &lt;body&gt; 或 &lt;head&gt; 部分中，或者同时存在于两个部分中。</p>\r\n\r\n<p>通常的做法是把函数放入 &lt;head&gt; 部分中，或者放在页面底部。这样就可以把它们安置到同一处位置，不会干扰页面的内容。</p>\r\n\r\n<hr />\r\n<h2>&lt;head&gt; 中的 JavaScript 函数</h2>\r\n\r\n<p>在本例中，我们把一个 JavaScript 函数放置到 HTML 页面的 &lt;head&gt; 部分。</p>\r\n\r\n<p>该函数会在点击按钮时被调用：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;script&gt; function myFunction() { document.getElementById(&quot;demo&quot;).innerHTML=&quot;我的第一个 JavaScript 函数&quot;; } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;我的 Web 页面&lt;/h1&gt; &lt;p id=&quot;demo&quot;&gt;一个段落&lt;/p&gt; &lt;button type=&quot;button&quot; onclick=&quot;myFunction()&quot;&gt;尝试一下&lt;/button&gt; &lt;/body&gt; &lt;/html&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_whereto_head\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>&lt;body&gt; 中的 JavaScript 函数</h2>\r\n\r\n<p>在本例中，我们把一个 JavaScript 函数放置到 HTML 页面的 &lt;body&gt; 部分。</p>\r\n\r\n<p>该函数会在点击按钮时被调用：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;h1&gt;我的 Web 页面&lt;/h1&gt; &lt;p id=&quot;demo&quot;&gt;一个段落&lt;/p&gt; &lt;button type=&quot;button&quot; onclick=&quot;myFunction()&quot;&gt;尝试一下&lt;/button&gt; &lt;script&gt; function myFunction() { document.getElementById(&quot;demo&quot;).innerHTML=&quot;我的第一个 JavaScript 函数&quot;; } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_whereto_body\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>外部的 JavaScript</h2>\r\n\r\n<p>也可以把脚本保存到外部文件中。外部文件通常包含被多个网页使用的代码。</p>\r\n\r\n<p>外部 JavaScript 文件的文件扩展名是 .js。</p>\r\n\r\n<p>如需使用外部文件，请在 &lt;script&gt; 标签的 &quot;src&quot; 属性中设置该 .js 文件：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;script src=&quot;myScript.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_externalexample\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>你可以将脚本放置于 &lt;head&gt; 或者 &lt;body&gt;中，放在 &lt;script&gt; 标签中的脚本与外部引用的脚本运行效果完全一致。</p>\r\n\r\n<p>myScript.js 文件代码如下：</p>\r\n\r\n<p>function myFunction() { document.getElementById(&quot;demo&quot;).innerHTML=&quot;我的第一个 JavaScript 函数&quot;; }</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"lamp\" src=\"https://www.runoob.com/images/lamp.jpg\" style=\"height:32px; width:32px\" /></th>\r\n			<td>外部脚本不能包含 &lt;script&gt; 标签。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 1, 0, '2021-12-14 02:39:27.552117', '2021-12-14 02:43:34.040233', 8, 7);
INSERT INTO `tb_article` VALUES (72, 'article/20211214/JavaScript_9C6Akqh.jpg', 'Chrome', 'Chrome 浏览器中执行 JavaScript', 'Chrome 浏览器中执行 JavaScript', '<h1>Chrome 浏览器中执行 JavaScript</h1>\r\n\r\n<p>本章节为大家介绍如何在 Chrome 浏览器上进行 JavaScript 代码的运行与调试。</p>\r\n\r\n<p>Chrome 是由 Google 开发的免费网页浏览器，对于前端开发来说（尤其是调试代码）非常方便。</p>\r\n\r\n<p>Chrome 官网地址：<a href=\"https://www.google.com/intl/zh-CN/chrome/\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.google.com/intl/zh-CN/chrome/</a>。</p>\r\n\r\n<p>我们在 Chrome 浏览器中可以通过按下&nbsp;F12&nbsp;按钮或者右击页面，选择<strong>&quot;检查&quot;</strong>来开启开发者工具。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/11/2FC7724A-4281-41C0-94F5-0DAE2D9D7C14.jpg\" /></p>\r\n\r\n<p>也可以在右上角菜单栏选择&nbsp;<strong>&quot;更多工具&quot;=》&quot;开发者工具&quot;</strong>&nbsp;来开启：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/11/62B70027-DD24-4F04-8040-2DB58D1EDCFC.jpg\" /></p>\r\n\r\n<h2>1、Console 窗口调试 JavaScript 代码</h2>\r\n\r\n<p>打开开发者工具后，我们可以在 Console 窗口调试 JavaScript代码，如下图：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/11/93B1E50A-D2D9-4FB4-B458-D50045FDE599.jpg\" /></p>\r\n\r\n<p>上图中我们在&nbsp;&gt;&nbsp;符号后输入我们要执行的代码&nbsp;console.log(&quot;runoob&quot;)，按回车后执行。</p>\r\n\r\n<p>我们也可以在其他地方复制一段代码过来执行，比如复制以下代码到 Console 窗口，按回车执行：</p>\r\n\r\n<pre>\r\nconsole.log(&quot;runoob-1&quot;)\r\nconsole.log(&quot;runoob-2&quot;)</pre>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/11/3F6D97EB-2E51-47AA-919D-79EE62DC14DA.jpg\" /></p>\r\n\r\n<p>清空 Console 窗口到内容可以按以下按钮：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/11/C1A3FF50-1C1C-463E-B12C-D7D8735F6844.jpg\" /></p>\r\n\r\n<hr />\r\n<h2>2、Chrome snippets 小脚本</h2>\r\n\r\n<p>我们也可以在 Chrome 浏览器中创建一个脚本来执行，在开发者工具中点击 Sources 面板，选择 Snippets 选项卡，在导航器中右击鼠标，然后选择 Create new snippet 来新建一个脚本文件：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/11/8C18C75F-6C15-4B7F-8C66-122D1D23C14E.jpg\" style=\"width:70%\" /></p>\r\n\r\n<p>如果你没看到 Snippets ，可以点下面板上到&nbsp;&gt;&gt;&nbsp;就能看到了。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/11/9F5F8D84-9C0D-4F6B-98AF-8B9349118297.jpg\" style=\"width:70%\" /></p>\r\n\r\n<p>点击 Create new snippet 后，会自动创建一个文件，你只需在右侧窗口输入以下代码，然后按 Command+S（Mac）或 Ctrl+S（Windows 和 Linux）保存更改即可。</p>\r\n\r\n<pre>\r\nconsole.log(&quot;runoob-1&quot;)\r\nconsole.log(&quot;runoob-2&quot;)</pre>\r\n\r\n<p>保存后，右击文件名，选择 &quot;Run&quot; 执行代码：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2020/11/0DBBF606-1F97-4861-B690-1DBED83A0E5E.jpg\" /></p>\r\n', 0, 0, '2021-12-14 02:39:58.587951', '2021-12-14 02:39:58.593927', 8, 7);
INSERT INTO `tb_article` VALUES (73, 'article/20211214/JavaScript_4qV1EsW.jpg', 'JavaScript 输出', 'JavaScript 输出', 'JavaScript 输出', '<h1>JavaScript&nbsp;输出</h1>\r\n\r\n<hr />\r\n<p>JavaScript 没有任何打印或者输出的函数。</p>\r\n\r\n<h2>JavaScript 显示数据</h2>\r\n\r\n<p>JavaScript 可以通过不同的方式来输出数据：</p>\r\n\r\n<ul>\r\n	<li>使用&nbsp;<strong>window.alert()</strong>&nbsp;弹出警告框。</li>\r\n	<li>使用&nbsp;<strong>document.write()</strong>&nbsp;方法将内容写到 HTML 文档中。</li>\r\n	<li>使用&nbsp;<strong>innerHTML</strong>&nbsp;写入到 HTML 元素。</li>\r\n	<li>使用&nbsp;<strong>console.log()</strong>&nbsp;写入到浏览器的控制台。</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>使用 window.alert()</h2>\r\n\r\n<p>你可以弹出警告框来显示数据：</p>\r\n\r\n<h3>实例</h3>\r\n\r\n<p>&lt;!DOCTYPE&nbsp;html&gt;<br />\r\n&lt;html&gt;<br />\r\n&lt;body&gt;<br />\r\n<br />\r\n&lt;h1&gt;我的第一个页面&lt;/h1&gt;<br />\r\n&lt;p&gt;我的第一个段落。&lt;/p&gt;<br />\r\n<br />\r\n&lt;script&gt;<br />\r\nwindow.alert(5 + 6);<br />\r\n&lt;/script&gt;<br />\r\n<br />\r\n&lt;/body&gt;<br />\r\n&lt;/html&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_output_alert\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<hr />\r\n<h2>操作 HTML 元素</h2>\r\n\r\n<p>如需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById(<em>id</em>) 方法。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>请使用 &quot;id&quot; 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;!DOCTYPE&nbsp;html&gt;<br />\r\n&lt;html&gt;<br />\r\n&lt;body&gt;<br />\r\n<br />\r\n&lt;h1&gt;我的第一个 Web 页面&lt;/h1&gt;<br />\r\n<br />\r\n&lt;p&nbsp;id=&quot;demo&quot;&gt;我的第一个段落&lt;/p&gt;<br />\r\n<br />\r\n&lt;script&gt;<br />\r\ndocument.getElementById(&quot;demo&quot;).innerHTML = &quot;段落已修改。&quot;;<br />\r\n&lt;/script&gt;<br />\r\n<br />\r\n&lt;/body&gt;<br />\r\n&lt;/html&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_dom\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>以上 JavaScript 语句（在 &lt;script&gt; 标签中）可以在 web 浏览器中执行：</p>\r\n\r\n<p><strong>document.getElementById(&quot;demo&quot;)</strong>&nbsp;是使用 id 属性来查找 HTML 元素的 JavaScript 代码 。</p>\r\n\r\n<p><strong>innerHTML = &quot;段落已修改。&quot;</strong>&nbsp;是用于修改元素的 HTML 内容(innerHTML)的 JavaScript 代码。</p>\r\n\r\n<hr />\r\n<h2>在本教程中</h2>\r\n\r\n<p>在大多数情况下，在本教程中，我们将使用上面描述的方法来输出：</p>\r\n\r\n<p>上面的例子直接把 id=&quot;demo&quot; 的 &lt;p&gt; 元素写到 HTML 文档输出中：</p>\r\n\r\n<hr />\r\n<h2>写到 HTML 文档</h2>\r\n\r\n<p>出于测试目的，您可以将JavaScript直接写在HTML 文档中：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;!DOCTYPE&nbsp;html&gt;<br />\r\n&lt;html&gt;<br />\r\n&lt;body&gt;<br />\r\n<br />\r\n&lt;h1&gt;我的第一个 Web 页面&lt;/h1&gt;<br />\r\n<br />\r\n&lt;p&gt;我的第一个段落。&lt;/p&gt;<br />\r\n<br />\r\n&lt;script&gt;<br />\r\ndocument.write(Date());<br />\r\n&lt;/script&gt;<br />\r\n<br />\r\n&lt;/body&gt;<br />\r\n&lt;/html&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_write\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"Note\" src=\"https://www.runoob.com/images/lamp.jpg\" /></th>\r\n			<td>\r\n			<p>请使用 document.write() 仅仅向文档输出写内容。</p>\r\n\r\n			<p>如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;!DOCTYPE&nbsp;html&gt;<br />\r\n&lt;html&gt;<br />\r\n&lt;body&gt;<br />\r\n<br />\r\n&lt;h1&gt;我的第一个 Web 页面&lt;/h1&gt;<br />\r\n<br />\r\n&lt;p&gt;我的第一个段落。&lt;/p&gt;<br />\r\n<br />\r\n&lt;button&nbsp;onclick=&quot;myFunction()&quot;&gt;点我&lt;/button&gt;<br />\r\n<br />\r\n&lt;script&gt;<br />\r\nfunction myFunction() {<br />\r\n&nbsp;&nbsp;&nbsp; document.write(Date());<br />\r\n}<br />\r\n&lt;/script&gt;<br />\r\n<br />\r\n&lt;/body&gt;<br />\r\n&lt;/html&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_write_over\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>写到控制台</h2>\r\n\r\n<p>如果您的浏览器支持调试，你可以使用&nbsp;<strong>console.log()</strong>&nbsp;方法在浏览器中显示 JavaScript 值。</p>\r\n\r\n<p>浏览器中使用 F12 来启用调试模式， 在调试窗口中点击 &quot;Console&quot; 菜单。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;!DOCTYPE&nbsp;html&gt;<br />\r\n&lt;html&gt;<br />\r\n&lt;body&gt;<br />\r\n<br />\r\n&lt;h1&gt;我的第一个 Web 页面&lt;/h1&gt;<br />\r\n<br />\r\n&lt;script&gt;<br />\r\na = 5;<br />\r\nb = 6;<br />\r\nc = a + b;<br />\r\nconsole.log(c);<br />\r\n&lt;/script&gt;<br />\r\n<br />\r\n&lt;/body&gt;<br />\r\n&lt;/html&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_console\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>实例 console 截图：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/08/console-log.jpg\" /></p>\r\n\r\n<hr />\r\n<h2>您知道吗?</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"Note\" src=\"https://www.runoob.com/images/lamp.jpg\" /></th>\r\n			<td>程序中调试是测试，查找及减少bug(错误)的过程。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 0, '2021-12-14 02:40:37.090244', '2021-12-14 02:40:37.094244', 8, 7);
INSERT INTO `tb_article` VALUES (74, 'article/20211214/JavaScript_zMbFqbe.jpg', 'JavaScript 语法', 'JavaScript 语法', 'JavaScript 语法', '<h1>JavaScript&nbsp;语法</h1>\r\n\r\n<hr />\r\n<p>JavaScript 是一个程序语言。语法规则定义了语言结构。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 语法</h2>\r\n\r\n<p>JavaScript 是一个脚本语言。</p>\r\n\r\n<p>它是一个轻量级，但功能强大的编程语言。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 字面量</h2>\r\n\r\n<p>在编程语言中，一般固定值称为字面量，如 3.14。</p>\r\n\r\n<p><strong>数字（Number）字面量</strong>&nbsp;可以是整数或者是小数，或者是科学计数(e)。</p>\r\n\r\n<p>3.14<br />\r\n<br />\r\n1001<br />\r\n<br />\r\n123e5</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_syntax_numbers\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p><strong>字符串（String）字面量</strong>&nbsp;可以使用单引号或双引号:</p>\r\n\r\n<p>&quot;John Doe&quot;<br />\r\n<br />\r\n&#39;John Doe&#39;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_syntax_strings\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p><strong>表达式字面量</strong>&nbsp;用于计算：</p>\r\n\r\n<p>5 + 6<br />\r\n<br />\r\n5 * 10</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_syntax_expressions\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p><strong>数组（Array）字面量</strong>&nbsp;定义一个数组：</p>\r\n\r\n<p>[40, 100, 1, 5, 25, 10]</p>\r\n\r\n<p><strong>对象（Object）字面量</strong>&nbsp;定义一个对象：</p>\r\n\r\n<p>{firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;}</p>\r\n\r\n<p><strong>函数（Function）字面量</strong>&nbsp;定义一个函数：</p>\r\n\r\n<p>function myFunction(a, b) { return a * b;}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript 变量</h2>\r\n\r\n<p>在编程语言中，变量用于存储数据值。</p>\r\n\r\n<p>JavaScript 使用关键字&nbsp;<strong>var</strong>&nbsp;来定义变量， 使用等号来为变量赋值：</p>\r\n\r\n<p>var x, length<br />\r\n<br />\r\nx = 5<br />\r\n<br />\r\nlength = 6</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_syntax_variables\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>变量可以通过变量名访问。在指令式语言中，变量通常是可变的。字面量是一个恒定的值。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"Note\" src=\"https://www.runoob.com/images/lamp.jpg\" /></th>\r\n			<td>变量是一个<strong>名称</strong>。字面量是一个<strong>值</strong>。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<hr />\r\n<h2>JavaScript 操作符</h2>\r\n\r\n<p>JavaScript使用&nbsp;<strong>算术运算符</strong>&nbsp;来计算值:</p>\r\n\r\n<p>(5 + 6) * 10</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_syntax_operators\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>JavaScript使用<strong>赋值运算符</strong>给变量赋值：</p>\r\n\r\n<p>x = 5<br />\r\ny = 6<br />\r\nz = (x + y) * 10</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_syntax_assign\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>JavaScript语言有多种类型的运算符：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>类型</th>\r\n			<th>实例</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>赋值，算术和位运算符</td>\r\n			<td>=&nbsp; +&nbsp; -&nbsp; *&nbsp; /</td>\r\n			<td>在 JS 运算符中描述</td>\r\n		</tr>\r\n		<tr>\r\n			<td>条件，比较及逻辑运算符</td>\r\n			<td>==&nbsp; != &lt;&nbsp; &gt;&nbsp;</td>\r\n			<td>在 JS 比较运算符中描述</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript 语句</h2>\r\n\r\n<p>在 HTML 中，JavaScript 语句向浏览器发出的命令。</p>\r\n\r\n<p>语句是用分号分隔：</p>\r\n\r\n<p>x = 5 + 6;<br />\r\ny = x * 10;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript 关键字</h2>\r\n\r\n<p>JavaScript 关键字用于标识要执行的操作。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>和其他任何编程语言一样，JavaScript 保留了一些关键字为自己所用。</p>\r\n\r\n<p><strong>var</strong>&nbsp;关键字告诉浏览器创建一个新的变量：</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>var x = 5 + 6;<br />\r\nvar y = x * 10;</p>\r\n\r\n<p>JavaScript 同样保留了一些关键字，这些关键字在当前的语言版本中并没有使用，但在以后 JavaScript 扩展中会用到。</p>\r\n\r\n<p>以下是 JavaScript 中最​​重要的保留字（按字母顺序）：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>abstract</td>\r\n			<td>else</td>\r\n			<td>instanceof</td>\r\n			<td>super</td>\r\n		</tr>\r\n		<tr>\r\n		</tr>\r\n		<tr>\r\n			<td>boolean</td>\r\n			<td>enum</td>\r\n			<td>int</td>\r\n			<td>switch</td>\r\n		</tr>\r\n		<tr>\r\n		</tr>\r\n		<tr>\r\n			<td>break</td>\r\n			<td>export</td>\r\n			<td>interface</td>\r\n			<td>synchronized</td>\r\n		</tr>\r\n		<tr>\r\n		</tr>\r\n		<tr>\r\n			<td>byte</td>\r\n			<td>extends</td>\r\n			<td>let</td>\r\n			<td>this</td>\r\n		</tr>\r\n		<tr>\r\n		</tr>\r\n		<tr>\r\n			<td>case</td>\r\n			<td>false</td>\r\n			<td>long</td>\r\n			<td>throw</td>\r\n		</tr>\r\n		<tr>\r\n		</tr>\r\n		<tr>\r\n			<td>catch</td>\r\n			<td>final</td>\r\n			<td>native</td>\r\n			<td>throws</td>\r\n		</tr>\r\n		<tr>\r\n		</tr>\r\n		<tr>\r\n			<td>char</td>\r\n			<td>finally</td>\r\n			<td>new</td>\r\n			<td>transient</td>\r\n		</tr>\r\n		<tr>\r\n		</tr>\r\n		<tr>\r\n			<td>class</td>\r\n			<td>float</td>\r\n			<td>null</td>\r\n			<td>true</td>\r\n		</tr>\r\n		<tr>\r\n		</tr>\r\n		<tr>\r\n			<td>const</td>\r\n			<td>for</td>\r\n			<td>package</td>\r\n			<td>try</td>\r\n		</tr>\r\n		<tr>\r\n		</tr>\r\n		<tr>\r\n			<td>continue</td>\r\n			<td>function</td>\r\n			<td>private</td>\r\n			<td>typeof</td>\r\n		</tr>\r\n		<tr>\r\n		</tr>\r\n		<tr>\r\n			<td>debugger</td>\r\n			<td>goto</td>\r\n			<td>protected</td>\r\n			<td>var</td>\r\n		</tr>\r\n		<tr>\r\n		</tr>\r\n		<tr>\r\n			<td>default</td>\r\n			<td>if</td>\r\n			<td>public</td>\r\n			<td>void</td>\r\n		</tr>\r\n		<tr>\r\n		</tr>\r\n		<tr>\r\n			<td>delete</td>\r\n			<td>implements</td>\r\n			<td>return</td>\r\n			<td>volatile</td>\r\n		</tr>\r\n		<tr>\r\n		</tr>\r\n		<tr>\r\n			<td>do</td>\r\n			<td>import</td>\r\n			<td>short</td>\r\n			<td>while</td>\r\n		</tr>\r\n		<tr>\r\n		</tr>\r\n		<tr>\r\n			<td>double</td>\r\n			<td>in</td>\r\n			<td>static</td>\r\n			<td>with</td>\r\n		</tr>\r\n		<tr>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<hr />\r\n<h2>JavaScript 注释</h2>\r\n\r\n<p>不是所有的 JavaScript 语句都是&quot;命令&quot;。双斜杠&nbsp;<strong>//</strong>&nbsp;后的内容将会被浏览器忽略：</p>\r\n\r\n<p>// 我不会执行</p>\r\n\r\n<hr />\r\n<h2>JavaScript 数据类型</h2>\r\n\r\n<p>JavaScript 有多种数据类型：数字，字符串，数组，对象等等：</p>\r\n\r\n<p>var length = 16;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;// Number 通过数字字面量赋值<br />\r\nvar points = x * 10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Number 通过表达式字面量赋值<br />\r\nvar lastName = &quot;Johnson&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // String 通过字符串字面量赋值<br />\r\nvar cars = [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Array&nbsp; 通过数组字面量赋值<br />\r\nvar person = {firstName:&quot;John&quot;, lastName:&quot;Doe&quot;};&nbsp;&nbsp;// Object 通过对象字面量赋值</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>数据类型的概念</h2>\r\n\r\n<p>编程语言中，数据类型是一个非常重要的内容。</p>\r\n\r\n<p>为了可以操作变量，了解数据类型的概念非常重要。</p>\r\n\r\n<p>如果没有使用数据类型，以下实例将无法执行：</p>\r\n\r\n<p>16 + &quot;Volvo&quot;</p>\r\n\r\n<p>16 加上 &quot;Volvo&quot; 是如何计算呢? 以上会产生一个错误还是输出以下结果呢？</p>\r\n\r\n<p>&quot;16Volvo&quot;</p>\r\n\r\n<p>你可以在浏览器尝试执行以上代码查看效果。</p>\r\n\r\n<p>在接下来的章节中你将学到更多关于数据类型的知识。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 函数</h2>\r\n\r\n<p>JavaScript 语句可以写在函数内，函数可以重复引用：</p>\r\n\r\n<p><strong>引用一个函数</strong>&nbsp;= 调用函数(执行函数内的语句)。</p>\r\n\r\n<p>function myFunction(a, b) {<br />\r\n&nbsp;&nbsp;&nbsp; return a * b;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 返回 a 乘以 b 的结果<br />\r\n}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript 字母大小写</h2>\r\n\r\n<p>JavaScript 对大小写是敏感的。</p>\r\n\r\n<p>当编写 JavaScript 语句时，请留意是否关闭大小写切换键。</p>\r\n\r\n<p>函数&nbsp;<strong>getElementById</strong>&nbsp;与&nbsp;<strong>getElementbyID</strong>&nbsp;是不同的。</p>\r\n\r\n<p>同样，变量&nbsp;<strong>myVariable</strong>&nbsp;与&nbsp;<strong>MyVariable</strong>&nbsp;也是不同的。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 字符集</h2>\r\n\r\n<p>JavaScript 使用 Unicode 字符集。</p>\r\n\r\n<p>Unicode 覆盖了所有的字符，包含标点等字符。</p>\r\n\r\n<p>如需进一步了解，请学习我们的&nbsp;<a href=\"https://www.runoob.com/charsets/ref-html-utf8.html\">完整 Unicode 参考手册</a>。</p>\r\n\r\n<hr />\r\n<h2>您知道吗?</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"Note\" src=\"https://www.runoob.com/images/lamp.jpg\" /></th>\r\n			<td>JavaScript 中，常见的是驼峰法的命名规则，如 lastName (而不是lastname)。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 0, '2021-12-14 02:41:03.715932', '2021-12-14 02:41:03.720931', 8, 7);
INSERT INTO `tb_article` VALUES (75, 'article/20211214/JavaScript_dcMlxmf.jpg', 'JavaScript 语句', 'JavaScript 语句', 'JavaScript 语句', '<h1>JavaScript&nbsp;语句</h1>\r\n\r\n<hr />\r\n<p>JavaScript 语句向浏览器发出的命令。语句的作用是告诉浏览器该做什么。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 语句</h2>\r\n\r\n<p>JavaScript 语句是发给浏览器的命令。</p>\r\n\r\n<p>这些命令的作用是告诉浏览器要做的事情。</p>\r\n\r\n<p>下面的 JavaScript 语句向 id=&quot;demo&quot; 的 HTML 元素输出文本 &quot;你好 Dolly&quot; ：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>document.getElementById(&quot;demo&quot;).innerHTML = &quot;你好 Dolly&quot;;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_statement\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>分号 ;</h2>\r\n\r\n<p>分号用于分隔 JavaScript 语句。</p>\r\n\r\n<p>通常我们在每条可执行的语句结尾添加分号。</p>\r\n\r\n<p>使用分号的另一用处是在一行中编写多条语句。</p>\r\n\r\n<p>实例:<br />\r\n&nbsp;</p>\r\n\r\n<p>a = 5; b = 6; c = a + b;</p>\r\n\r\n<p>以上实例也可以这么写:</p>\r\n\r\n<p>a = 5; b = 6; c = a + b;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_semicolon\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"lamp\" src=\"https://www.runoob.com/images/lamp.jpg\" style=\"height:32px; width:32px\" /></th>\r\n			<td>您也可能看到不带有分号的案例。<br />\r\n			在 JavaScript 中，用分号来结束语句是可选的。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript 代码</h2>\r\n\r\n<p>JavaScript 代码是 JavaScript 语句的序列。</p>\r\n\r\n<p>浏览器按照编写顺序依次执行每条语句。</p>\r\n\r\n<p>本例向网页输出一个标题和两个段落：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>document.getElementById(&quot;demo&quot;).innerHTML=&quot;你好 Dolly&quot;; document.getElementById(&quot;myDIV&quot;).innerHTML=&quot;你最近怎么样?&quot;;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_statements\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript 代码块</h2>\r\n\r\n<p>JavaScript 可以分批地组合起来。</p>\r\n\r\n<p>代码块以左花括号开始，以右花括号结束。</p>\r\n\r\n<p>代码块的作用是一并地执行语句序列。</p>\r\n\r\n<p>本例向网页输出一个标题和两个段落：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>function myFunction() { document.getElementById(&quot;demo&quot;).innerHTML=&quot;你好Dolly&quot;; document.getElementById(&quot;myDIV&quot;).innerHTML=&quot;你最近怎么样?&quot;; }</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_blocks\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>您将在稍后的章节学到更多有关函数的知识。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 语句标识符</h2>\r\n\r\n<p>JavaScript 语句通常以一个&nbsp;<strong>语句标识符</strong>&nbsp;为开始，并执行该语句。</p>\r\n\r\n<p>语句标识符是保留关键字不能作为变量名使用。</p>\r\n\r\n<p>下表列出了 JavaScript 语句标识符 (关键字) ：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>语句</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>break</td>\r\n			<td>用于跳出循环。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>catch</td>\r\n			<td>语句块，在 try 语句块执行出错时执行 catch 语句块。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>continue</td>\r\n			<td>跳过循环中的一个迭代。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>do ... while</td>\r\n			<td>执行一个语句块，在条件语句为 true 时继续执行该语句块。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>for</td>\r\n			<td>在条件语句为 true 时，可以将代码块执行指定的次数。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>for ... in</td>\r\n			<td>用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>function</td>\r\n			<td>定义一个函数</td>\r\n		</tr>\r\n		<tr>\r\n			<td>if ... else</td>\r\n			<td>用于基于不同的条件来执行不同的动作。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>return</td>\r\n			<td>退出函数</td>\r\n		</tr>\r\n		<tr>\r\n			<td>switch</td>\r\n			<td>用于基于不同的条件来执行不同的动作。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>throw</td>\r\n			<td>抛出（生成）错误 。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>try</td>\r\n			<td>实现错误处理，与 catch 一同使用。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>var</td>\r\n			<td>声明一个变量。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>while</td>\r\n			<td>当条件语句为 true 时，执行语句块。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<hr />\r\n<h2>空格</h2>\r\n\r\n<p>JavaScript 会忽略多余的空格。您可以向脚本添加空格，来提高其可读性。下面的两行代码是等效的：</p>\r\n\r\n<pre>\r\nvar person=&quot;runoob&quot;;\r\nvar person = &quot;runoob&quot;;</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>对代码行进行折行</h2>\r\n\r\n<p>您可以在文本字符串中使用反斜杠对代码行进行换行。下面的例子会正确地显示：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>document.write(&quot;你好 \\ 世界!&quot;);</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_statement-dw\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>不过，您不能像这样折行：</p>\r\n\r\n<pre>\r\ndocument.write \\ \r\n(&quot;你好世界!&quot;);</pre>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/08/145E915E-6317-4F1B-8735-47FB4CA6E501.jpg\" /></p>\r\n\r\n<p><strong>知识点：</strong>JavaScript 是脚本语言，浏览器会在读取代码时，逐行地执行脚本代码。而对于传统编程来说，会在执行前对所有代码进行编译。</p>\r\n', 0, 0, '2021-12-14 02:41:42.238012', '2021-12-14 02:41:42.242011', 8, 7);
INSERT INTO `tb_article` VALUES (76, 'article/20211214/JavaScript_y8Nm3jv.jpg', 'JavaScript 注释', 'JavaScript 注释', 'JavaScript 注释', '<h1>JavaScript&nbsp;注释</h1>\r\n\r\n<hr />\r\n<p>JavaScript 注释可用于提高代码的可读性。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 注释</h2>\r\n\r\n<p>JavaScript 不会执行注释。</p>\r\n\r\n<p>我们可以添加注释来对 JavaScript 进行解释，或者提高代码的可读性。</p>\r\n\r\n<p>单行注释以&nbsp;//&nbsp;开头。</p>\r\n\r\n<p>本例用单行注释来解释代码：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>// 输出标题： document.getElementById(&quot;myH1&quot;).innerHTML=&quot;欢迎来到我的主页&quot;; // 输出段落： document.getElementById(&quot;myP&quot;).innerHTML=&quot;这是我的第一个段落。&quot;;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_comments1\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript 多行注释</h2>\r\n\r\n<p>多行注释以&nbsp;/*&nbsp;开始，以&nbsp;*/&nbsp;结尾。</p>\r\n\r\n<p>下面的例子使用多行注释来解释代码：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>/* 下面的这些代码会输出 一个标题和一个段落 并将代表主页的开始 */ document.getElementById(&quot;myH1&quot;).innerHTML=&quot;欢迎来到我的主页&quot;; document.getElementById(&quot;myP&quot;).innerHTML=&quot;这是我的第一个段落。&quot;;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_comments2\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>使用注释来阻止执行</h2>\r\n\r\n<p>在下面的例子中，注释用于阻止其中一条代码行的执行（可用于调试）：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>// document.getElementById(&quot;myH1&quot;).innerHTML=&quot;欢迎来到我的主页&quot;; document.getElementById(&quot;myP&quot;).innerHTML=&quot;这是我的第一个段落。&quot;;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_comments3\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>在下面的例子中，注释用于阻止代码块的执行（可用于调试）：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>/* document.getElementById(&quot;myH1&quot;).innerHTML=&quot;欢迎来到我的主页&quot;; document.getElementById(&quot;myP&quot;).innerHTML=&quot;这是我的第一个段落。&quot;; */</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_comments4\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>在行末使用注释</h2>\r\n\r\n<p>在下面的例子中，我们把注释放到代码行的结尾处：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>var x=5; // 声明 x 并把 5 赋值给它 var y=x+2; // 声明 y 并把 x+2 赋值给它</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_comments5\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n', 0, 0, '2021-12-14 02:42:09.843866', '2021-12-14 02:42:09.846868', 8, 7);
INSERT INTO `tb_article` VALUES (77, 'article/20211214/JavaScript_5O0Oqz8.jpg', 'JavaScript 变量', 'JavaScript 变量', 'JavaScript 变量', '<h1>JavaScript&nbsp;变量</h1>\r\n\r\n<hr />\r\n<p>变量是用于存储信息的&quot;容器&quot;。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>var x=5; var y=6; var z=x+y;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_data1\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<h3>就像代数那样</h3>\r\n\r\n<p>x=5<br />\r\ny=6<br />\r\nz=x+y</p>\r\n\r\n<p>在代数中，我们使用字母（比如 x）来保存值（比如 5）。</p>\r\n\r\n<p>通过上面的表达式 z=x+y，我们能够计算出 z 的值为 11。</p>\r\n\r\n<p>在 JavaScript 中，这些字母被称为变量。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"lamp\" src=\"https://www.runoob.com/images/lamp.jpg\" style=\"height:32px; width:32px\" /></th>\r\n			<td>您可以把变量看做存储数据的容器。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript 变量</h2>\r\n\r\n<p>与代数一样，JavaScript 变量可用于存放值（比如 x=5）和表达式（比如 z=x+y）。</p>\r\n\r\n<p>变量可以使用短名称（比如 x 和 y），也可以使用描述性更好的名称（比如 age, sum, totalvolume）。</p>\r\n\r\n<ul>\r\n	<li>变量必须以字母开头</li>\r\n	<li>变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）</li>\r\n	<li>变量名称对大小写敏感（y 和 Y 是不同的变量）</li>\r\n</ul>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"lamp\" src=\"https://www.runoob.com/images/lamp.jpg\" style=\"height:32px; width:32px\" /></th>\r\n			<td>JavaScript 语句和 JavaScript 变量都对大小写敏感。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript 数据类型</h2>\r\n\r\n<p>JavaScript 变量还能保存其他数据类型，比如文本值 (name=&quot;Bill Gates&quot;)。</p>\r\n\r\n<p>在 JavaScript 中，类似 &quot;Bill Gates&quot; 这样一条文本被称为字符串。</p>\r\n\r\n<p>JavaScript 变量有很多种类型，但是现在，我们只关注数字和字符串。</p>\r\n\r\n<p>当您向变量分配文本值时，应该用双引号或单引号包围这个值。</p>\r\n\r\n<p>当您向变量赋的值是数值时，不要使用引号。如果您用引号包围数值，该值会被作为文本来处理。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>var pi=3.14; // 如果你熟悉 ES6，pi 可以使用 const 关键字，表示一个常量 // const pi = 3.14; var person=&quot;John Doe&quot;; var answer=&#39;Yes I am!&#39;;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_data2\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>声明（创建） JavaScript 变量</h2>\r\n\r\n<p>在 JavaScript 中创建变量通常称为&quot;声明&quot;变量。</p>\r\n\r\n<p>我们使用 var 关键词来声明变量：</p>\r\n\r\n<p>var carname;</p>\r\n\r\n<p>变量声明之后，该变量是空的（它没有值）。</p>\r\n\r\n<p>如需向变量赋值，请使用等号：</p>\r\n\r\n<p>carname=&quot;Volvo&quot;;</p>\r\n\r\n<p>不过，您也可以在声明变量时对其赋值：</p>\r\n\r\n<p>var carname=&quot;Volvo&quot;;</p>\r\n\r\n<p>在下面的例子中，我们创建了名为 carname 的变量，并向其赋值 &quot;Volvo&quot;，然后把它放入 id=&quot;demo&quot; 的 HTML 段落中：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>var carname=&quot;Volvo&quot;; document.getElementById(&quot;demo&quot;).innerHTML=carname;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_variables1\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"lamp\" src=\"https://www.runoob.com/images/lamp.jpg\" style=\"height:32px; width:32px\" /></th>\r\n			<td>一个好的编程习惯是，在代码开始处，统一对需要的变量进行声明。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>一条语句，多个变量</h2>\r\n\r\n<p>您可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可：</p>\r\n\r\n<p>var lastname=&quot;Doe&quot;, age=30, job=&quot;carpenter&quot;;</p>\r\n\r\n<p>声明也可横跨多行：</p>\r\n\r\n<p>var lastname=&quot;Doe&quot;,<br />\r\nage=30,<br />\r\njob=&quot;carpenter&quot;;</p>\r\n\r\n<p>一条语句中声明的多个变量不可以同时赋同一个值:</p>\r\n\r\n<p>var x,y,z=1;</p>\r\n\r\n<p>x,y 为 undefined， z 为 1。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>Value = undefined</h2>\r\n\r\n<p>在计算机程序中，经常会声明无值的变量。未使用值来声明的变量，其值实际上是 undefined。</p>\r\n\r\n<p>在执行过以下语句后，变量 carname 的值将是 undefined：</p>\r\n\r\n<p>var carname;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>重新声明 JavaScript 变量</h2>\r\n\r\n<p>如果重新声明 JavaScript 变量，该变量的值不会丢失：</p>\r\n\r\n<p>在以下两条语句执行后，变量 carname 的值依然是 &quot;Volvo&quot;：</p>\r\n\r\n<p>var carname=&quot;Volvo&quot;;<br />\r\nvar carname;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript 算数</h2>\r\n\r\n<p>您可以通过 JavaScript 变量来做算数，使用的是 = 和 + 这类运算符：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>y=5; x=y+2;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_oper_add\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<hr />\r\n<h2>使用 let 和 const (ES6)</h2>\r\n\r\n<p>在 2015 年以前，我们使用 var 关键字来声明 JavaScript 变量。</p>\r\n\r\n<p>在 2015 后的 JavaScript 版本 (ES6) 允许我们使用 const 关键字来定义一个常量，使用 let 关键字定义的限定范围内作用域的变量。e.</p>\r\n\r\n<p>更多 const 和 let 内容可以参阅：<a href=\"https://www.runoob.com/js/js-let-const.html\" rel=\"noopener\" target=\"_blank\">JavaScript let 和 const。</a></p>\r\n\r\n<p>Safari 10 和 Edge 14 是第一批支持 ES6 所有特性的浏览器：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>&nbsp;</th>\r\n			<th>&nbsp;</th>\r\n			<th>&nbsp;</th>\r\n			<th>&nbsp;</th>\r\n			<th>&nbsp;</th>\r\n		</tr>\r\n		<tr>\r\n			<td>Chrome 58</td>\r\n			<td>Edge 14</td>\r\n			<td>Firefox 54</td>\r\n			<td>Safari 10</td>\r\n			<td>Opera 55</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Jan 2017</td>\r\n			<td>Aug 2016</td>\r\n			<td>Mar 2017</td>\r\n			<td>Jul 2016</td>\r\n			<td>Aug 2018</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>您将在本教程稍后的章节学到更多有关 JavaScript 运算符的知识。</p>\r\n', 0, 0, '2021-12-14 02:42:34.555295', '2021-12-14 02:42:34.560293', 8, 7);
INSERT INTO `tb_article` VALUES (78, 'article/20211214/JavaScript_itnFa4w.jpg', 'JavaScript 数据类型', 'JavaScript 数据类型', 'JavaScript 数据类型', '<h1>JavaScript&nbsp;数据类型</h1>\r\n\r\n<hr />\r\n<p><strong>值类型(基本类型)</strong>：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p>\r\n\r\n<p><strong>引用数据类型</strong>：对象(Object)、数组(Array)、函数(Function)。</p>\r\n\r\n<blockquote>\r\n<p><strong>注：</strong>Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。</p>\r\n</blockquote>\r\n\r\n<hr />\r\n<h2>JavaScript 拥有动态类型</h2>\r\n\r\n<p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>var x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // x 为 undefined<br />\r\nvar x = 5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 现在 x 为数字<br />\r\nvar x = &quot;John&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 现在 x 为字符串</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript 字符串</h2>\r\n\r\n<p>字符串是存储字符（比如 &quot;Bill Gates&quot;）的变量。</p>\r\n\r\n<p>字符串可以是引号中的任意文本。您可以使用单引号或双引号：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>var carname=&quot;Volvo XC60&quot;;<br />\r\nvar carname=&#39;Volvo XC60&#39;;</p>\r\n\r\n<p>您可以在字符串中使用引号，只要不匹配包围字符串的引号即可：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>var answer=&quot;It&#39;s alright&quot;;<br />\r\nvar answer=&quot;He is called &#39;Johnny&#39;&quot;;<br />\r\nvar answer=&#39;He is called &quot;Johnny&quot;&#39;;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_datatypes_string\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>您将在本教程的高级部分学到更多关于字符串的知识。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 数字</h2>\r\n\r\n<p>JavaScript 只有一种数字类型。数字可以带小数点，也可以不带：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>var x1=34.00;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //使用小数点来写<br />\r\nvar x2=34;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //不使用小数点来写</p>\r\n\r\n<p>极大或极小的数字可以通过科学（指数）计数法来书写：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>var y=123e5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 12300000<br />\r\nvar z=123e-5;&nbsp;&nbsp;&nbsp;&nbsp; // 0.00123</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_numbers\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>您将在本教程的高级部分学到更多关于数字的知识。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 布尔</h2>\r\n\r\n<p>布尔（逻辑）只能有两个值：true 或 false。</p>\r\n\r\n<p>var x=true;<br />\r\nvar y=false;</p>\r\n\r\n<p>布尔常用在条件测试中。您将在本教程稍后的章节中学到更多关于条件测试的知识。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 数组</h2>\r\n\r\n<p>下面的代码创建名为 cars 的数组：</p>\r\n\r\n<p>var cars=new Array();<br />\r\ncars[0]=&quot;Saab&quot;;<br />\r\ncars[1]=&quot;Volvo&quot;;<br />\r\ncars[2]=&quot;BMW&quot;;</p>\r\n\r\n<p>或者 (condensed array):</p>\r\n\r\n<p>var cars=new Array(&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;);</p>\r\n\r\n<p>或者 (literal array):</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>var cars=[&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;];</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_datatypes_array\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>数组下标是基于零的，所以第一个项目是 [0]，第二个是 [1]，以此类推。</p>\r\n\r\n<p>您将在本教程稍后的章节中学到更多关于数组的知识。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 对象</h2>\r\n\r\n<p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p>\r\n\r\n<p>var person={firstname:&quot;John&quot;, lastname:&quot;Doe&quot;, id:5566};</p>\r\n\r\n<p>上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。</p>\r\n\r\n<p>空格和折行无关紧要。声明可横跨多行：</p>\r\n\r\n<p>var person={<br />\r\nfirstname : &quot;John&quot;,<br />\r\nlastname&nbsp; : &quot;Doe&quot;,<br />\r\nid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp; 5566<br />\r\n};</p>\r\n\r\n<p>对象属性有两种寻址方式：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>name=person.lastname;<br />\r\nname=person[&quot;lastname&quot;];</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_datatypes_object\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>您将在本教程稍后的章节中学到更多关于对象的知识。</p>\r\n\r\n<hr />\r\n<h2>Undefined 和 Null</h2>\r\n\r\n<p>Undefined 这个值表示变量不含有值。</p>\r\n\r\n<p>可以通过将变量的值设置为 null 来清空变量。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>cars=null;<br />\r\nperson=null;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_undefined\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>声明变量类型</h2>\r\n\r\n<p>当您声明新变量时，可以使用关键词 &quot;new&quot; 来声明其类型：</p>\r\n\r\n<p>var carname=new String;<br />\r\nvar x=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Number;<br />\r\nvar y=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Boolean;<br />\r\nvar cars=&nbsp;&nbsp; new Array;<br />\r\nvar person= new Object;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"lamp\" src=\"https://www.runoob.com/images/lamp.jpg\" style=\"height:32px; width:32px\" /></th>\r\n			<td>JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 0, '2021-12-14 02:43:00.631270', '2021-12-14 02:43:00.635265', 8, 7);
INSERT INTO `tb_article` VALUES (79, 'article/20211214/JavaScript_AamNLjG.jpg', 'JavaScript 对象', 'JavaScript 对象', 'JavaScript 对象', '<h1>JavaScript&nbsp;对象</h1>\r\n\r\n<hr />\r\n<p>JavaScript 对象是拥有属性和方法的数据。</p>\r\n\r\n<hr />\r\n<h2>真实生活中的对象，属性和方法</h2>\r\n\r\n<p>真实生活中，一辆汽车是一个对象。</p>\r\n\r\n<p>对象有它的属性，如重量和颜色等，方法有启动停止等:</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>对象</th>\r\n			<th>属性</th>\r\n			<th>方法</th>\r\n		</tr>\r\n		<tr>\r\n			<td><img src=\"https://www.runoob.com/images/objectExplained.gif\" /></td>\r\n			<td><br />\r\n			car.name = Fiat<br />\r\n			<br />\r\n			car.model = 500<br />\r\n			<br />\r\n			car.weight = 850kg<br />\r\n			<br />\r\n			car.color = white</td>\r\n			<td><br />\r\n			car.start()<br />\r\n			<br />\r\n			car.drive()<br />\r\n			<br />\r\n			car.brake()<br />\r\n			<br />\r\n			car.stop()</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>所有汽车都有这些属性，但是每款车的属性都不尽相同。</p>\r\n\r\n<p>所有汽车都拥有这些方法，但是它们被执行的时间都不尽相同。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 对象</h2>\r\n\r\n<p>在 JavaScript中，几乎所有的事物都是对象。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"Note\" src=\"https://www.runoob.com/images/lamp.jpg\" /></th>\r\n			<td>在 JavaScript 中，对象是非常重要的，当你理解了对象，就可以了解 JavaScript 。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>你已经学习了 JavaScript 变量的赋值。</p>\r\n\r\n<p>以下代码为变量&nbsp;<strong>car</strong>&nbsp;设置值为 &quot;Fiat&quot; :</p>\r\n\r\n<p>var&nbsp;car =&nbsp;&quot;Fiat&quot;;</p>\r\n\r\n<p>对象也是一个变量，但对象可以包含多个值（多个变量），每个值以&nbsp;name:value&nbsp;对呈现。</p>\r\n\r\n<p>var&nbsp;car = {name:&quot;Fiat&quot;, model:500, color:&quot;white&quot;};</p>\r\n\r\n<p>在以上实例中，3 个值 (&quot;Fiat&quot;, 500, &quot;white&quot;) 赋予变量 car。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"Note\" src=\"https://www.runoob.com/images/lamp.jpg\" /></th>\r\n			<td>JavaScript 对象是变量的容器。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>对象定义</h2>\r\n\r\n<p>你可以使用字符来定义和创建 JavaScript 对象:</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>var&nbsp;person = {firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;};</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_object_create_1\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>定义 JavaScript 对象可以跨越多行，空格跟换行不是必须的：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>var&nbsp;person = {<br />\r\n&nbsp;&nbsp;&nbsp; firstName:&quot;John&quot;,<br />\r\n&nbsp;&nbsp;&nbsp; lastName:&quot;Doe&quot;,<br />\r\n&nbsp;&nbsp;&nbsp; age:50,<br />\r\n&nbsp;&nbsp;&nbsp; eyeColor:&quot;blue&quot;<br />\r\n};</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_object_create_2\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>对象属性</h2>\r\n\r\n<p>可以说 &quot;JavaScript 对象是变量的容器&quot;。</p>\r\n\r\n<p>但是，我们通常认为 &quot;JavaScript 对象是键值对的容器&quot;。</p>\r\n\r\n<p>键值对通常写法为&nbsp;<strong>name : value</strong>&nbsp;(键与值以冒号分割)。</p>\r\n\r\n<p>键值对在 JavaScript 对象通常称为&nbsp;<strong>对象属性</strong>。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"Note\" src=\"https://www.runoob.com/images/lamp.jpg\" /></th>\r\n			<td>JavaScript 对象是属性变量的容器。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>对象键值对的写法类似于：</p>\r\n\r\n<ul>\r\n	<li>PHP 中的关联数组</li>\r\n	<li>Python 中的字典</li>\r\n	<li>C 语言中的哈希表</li>\r\n	<li>Java 中的哈希映射</li>\r\n	<li>Ruby 和 Perl 中的哈希表</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>访问对象属性</h2>\r\n\r\n<p>你可以通过两种方式访问对象属性:</p>\r\n\r\n<h2>实例 1</h2>\r\n\r\n<p>person.lastName;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_object_properties_1\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>实例 2</h2>\r\n\r\n<p>person[&quot;lastName&quot;];</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_object_properties_2\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>对象方法</h2>\r\n\r\n<p>对象的方法定义了一个函数，并作为对象的属性存储。</p>\r\n\r\n<p>对象方法通过添加 () 调用 (作为一个函数)。</p>\r\n\r\n<p>该实例访问了 person 对象的 fullName() 方法:</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>name = person.fullName();</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_object_method\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>如果你要访问 person 对象的 fullName 属性，它将作为一个定义函数的字符串返回：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>name = person.fullName;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_object_function\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"Note\" src=\"https://www.runoob.com/images/lamp.jpg\" /></th>\r\n			<td>JavaScript 对象是属性和方法的容器。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>在随后的教程中你将学习到更多关于函数，属性和方法的知识。</p>\r\n\r\n<hr />\r\n<h2>访问对象方法</h2>\r\n\r\n<p>你可以使用以下语法创建对象方法：</p>\r\n\r\n<pre>\r\nmethodName : function() {\r\n    // 代码 \r\n}</pre>\r\n\r\n<p>你可以使用以下语法访问对象方法：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>objectName.methodName()</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_object_method\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>通常 fullName() 是作为 person 对象的一个方法， fullName 是作为一个属性。</p>\r\n\r\n<p>如果使用 fullName 属性，不添加&nbsp;<strong>()</strong>, 它会返回函数的定义：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>objectName.methodName</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_object_function\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>有多种方式可以创建，使用和修改 JavaScript 对象。</p>\r\n\r\n<p>同样也有多种方式用来创建，使用和修改属性和方法。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"Note\" src=\"https://www.runoob.com/images/lamp.jpg\" /></th>\r\n			<td>在随后的教程中，你将学习到更多关于对象的知识。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>更多实例</h2>\r\n\r\n<p><a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_object_create_1\" rel=\"noopener noreferrer\" target=\"_blank\">创建 JavaScript 对象 I</a></p>\r\n\r\n<p><a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_object_create_2\" rel=\"noopener noreferrer\" target=\"_blank\">创建 JavaScript 对象 II</a></p>\r\n\r\n<p><a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_object_properties_1\" rel=\"noopener noreferrer\" target=\"_blank\">访问对象属性 I</a></p>\r\n\r\n<p><a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_object_properties_2\" rel=\"noopener noreferrer\" target=\"_blank\">访问对象属性 II</a></p>\r\n\r\n<p><a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_object_method\" rel=\"noopener noreferrer\" target=\"_blank\">函数属性作为一个方法访问</a></p>\r\n\r\n<p><a href=\"https://www.runoob.com/try/tryit.php?filename=tryjs_object_function\" rel=\"noopener noreferrer\" target=\"_blank\">函数属性作为一个属性访问</a></p>\r\n', 0, 0, '2021-12-14 02:43:25.876929', '2021-12-14 02:43:25.879930', 8, 7);
INSERT INTO `tb_article` VALUES (80, 'article/20211214/JavaScript_nBDnNIk.jpg', 'JavaScript 函数', 'JavaScript 函数', 'JavaScript 函数', '<h1>JavaScript&nbsp;函数</h1>\r\n\r\n<hr />\r\n<p>函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;测试实例&lt;/title&gt; &lt;script&gt; function myFunction() { alert(&quot;Hello World!&quot;); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button onclick=&quot;myFunction()&quot;&gt;点我&lt;/button&gt; &lt;/body&gt; &lt;/html&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_function_xx\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript 函数语法</h2>\r\n\r\n<p>函数就是包裹在花括号中的代码块，前面使用了关键词 function：</p>\r\n\r\n<p>function&nbsp;<em>functionname</em>()<br />\r\n{<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;<em>// 执行代码</em><br />\r\n}</p>\r\n\r\n<p>当调用该函数时，会执行函数内的代码。</p>\r\n\r\n<p>可以在某事件发生时直接调用函数（比如当用户点击按钮时），并且可由 JavaScript 在任何位置进行调用。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"lamp\" src=\"https://www.runoob.com/images/lamp.jpg\" style=\"height:32px; width:32px\" /></th>\r\n			<td>JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>调用带参数的函数</h2>\r\n\r\n<p>在调用函数时，您可以向其传递值，这些值被称为参数。</p>\r\n\r\n<p>这些参数可以在函数中使用。</p>\r\n\r\n<p>您可以发送任意多的参数，由逗号 (,) 分隔：</p>\r\n\r\n<p>myFunction(<em>argument1,argument2</em>)</p>\r\n\r\n<p>当您声明函数时，请把参数作为变量来声明：</p>\r\n\r\n<p>function myFunction(<em>var1</em>,<em>var2</em>)<br />\r\n{<br />\r\n<em>代码</em><br />\r\n}</p>\r\n\r\n<p>变量和参数必须以一致的顺序出现。第一个变量就是第一个被传递的参数的给定的值，以此类推。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;p&gt;点击这个按钮，来调用带参数的函数。&lt;/p&gt; &lt;button onclick=&quot;myFunction(&#39;Harry Potter&#39;,&#39;Wizard&#39;)&quot;&gt;点击这里&lt;/button&gt; &lt;script&gt; function myFunction(name,job){ alert(&quot;Welcome &quot; + name + &quot;, the &quot; + job); } &lt;/script&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_function2\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>上面的函数在按钮被点击时会提示 &quot;Welcome Harry Potter, the Wizard&quot;。</p>\r\n\r\n<p>函数很灵活，您可以使用不同的参数来调用该函数，这样就会给出不同的消息：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&lt;button onclick=&quot;myFunction(&#39;Harry Potter&#39;,&#39;Wizard&#39;)&quot;&gt;点击这里&lt;/button&gt; &lt;button onclick=&quot;myFunction(&#39;Bob&#39;,&#39;Builder&#39;)&quot;&gt;点击这里&lt;/button&gt;</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_function3\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>根据您点击的不同的按钮，上面的例子会提示 &quot;Welcome Harry Potter, the Wizard&quot; 或 &quot;Welcome Bob, the Builder&quot;。</p>\r\n\r\n<hr />\r\n<h2>带有返回值的函数</h2>\r\n\r\n<p>有时，我们会希望函数将值返回调用它的地方。</p>\r\n\r\n<p>通过使用 return 语句就可以实现。</p>\r\n\r\n<p>在使用 return 语句时，函数会停止执行，并返回指定的值。</p>\r\n\r\n<h3>语法</h3>\r\n\r\n<p>function myFunction()<br />\r\n{<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;var x=5;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;return x;<br />\r\n}</p>\r\n\r\n<p>上面的函数会返回值 5。</p>\r\n\r\n<p><strong>注意：</strong>&nbsp;整个 JavaScript 并不会停止执行，仅仅是函数。JavaScript 将继续执行代码，从调用函数的地方。</p>\r\n\r\n<p>函数调用将被返回值取代：</p>\r\n\r\n<p>var myVar=myFunction();</p>\r\n\r\n<p>myVar 变量的值是 5，也就是函数 &quot;myFunction()&quot; 所返回的值。</p>\r\n\r\n<p>即使不把它保存为变量，您也可以使用返回值：</p>\r\n\r\n<p>document.getElementById(&quot;demo&quot;).innerHTML=myFunction();</p>\r\n\r\n<p>&quot;demo&quot; 元素的 innerHTML 将成为 5，也就是函数 &quot;myFunction()&quot; 所返回的值。</p>\r\n\r\n<p>您可以使返回值基于传递到函数中的参数：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>计算两个数字的乘积，并返回结果：</p>\r\n\r\n<p>function myFunction(a,b) { return a*b; } document.getElementById(&quot;demo&quot;).innerHTML=myFunction(4,3);</p>\r\n\r\n<p>&quot;demo&quot; 元素的 innerHTML 将是：</p>\r\n\r\n<p>12</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_function_return\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>在您仅仅希望退出函数时 ，也可使用 return 语句。返回值是可选的：</p>\r\n\r\n<p>function myFunction(a,b) { if (a&gt;b) { return; } x=a+b }</p>\r\n\r\n<p>如果 a 大于 b，则上面的代码将退出函数，并不会计算 a 和 b 的总和。</p>\r\n\r\n<hr />\r\n<h2>局部 JavaScript 变量</h2>\r\n\r\n<p>在 JavaScript 函数内部声明的变量（使用 var）是<em>局部</em>变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。</p>\r\n\r\n<p>您可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。</p>\r\n\r\n<p>只要函数运行完毕，本地变量就会被删除。</p>\r\n\r\n<hr />\r\n<h2>全局 JavaScript 变量</h2>\r\n\r\n<p>在函数外声明的变量是<em>全局</em>变量，网页上的所有脚本和函数都能访问它。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 变量的生存期</h2>\r\n\r\n<p>JavaScript 变量的生命期从它们被声明的时间开始。</p>\r\n\r\n<p>局部变量会在函数运行以后被删除。</p>\r\n\r\n<p>全局变量会在页面关闭后被删除。</p>\r\n\r\n<hr />\r\n<h2>向未声明的 JavaScript 变量分配值</h2>\r\n\r\n<p>如果您把值赋给尚未声明的变量，该变量将被自动作为 window 的一个属性。</p>\r\n\r\n<p>这条语句：</p>\r\n\r\n<p>carname=&quot;Volvo&quot;;</p>\r\n\r\n<p>将声明 window 的一个属性 carname。</p>\r\n\r\n<p>非严格模式下给未声明变量赋值创建的全局变量，是全局对象的可配置属性，可以删除。</p>\r\n\r\n<pre>\r\nvar var1 = 1; // 不可配置全局属性\r\nvar2 = 2; // 没有使用 var 声明，可配置全局属性\r\n\r\nconsole.log(this.var1); // 1\r\nconsole.log(window.var1); // 1\r\nconsole.log(window.var2); // 2\r\n\r\ndelete var1; // false 无法删除\r\nconsole.log(var1); //1\r\n\r\ndelete var2; \r\nconsole.log(delete var2); // true\r\nconsole.log(var2); // 已经删除 报错变量未定义</pre>\r\n', 1, 0, '2021-12-14 02:44:13.811021', '2021-12-14 05:40:37.153967', 8, 7);
INSERT INTO `tb_article` VALUES (81, 'article/20211214/JavaScript_QQr5L1H.jpg', 'JavaScript 作用域', 'JavaScript 作用域', 'JavaScript 作用域', '<h1>JavaScript&nbsp;作用域</h1>\r\n\r\n<hr />\r\n<p>作用域是可访问变量的集合。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 作用域</h2>\r\n\r\n<p>在 JavaScript 中, 对象和函数同样也是变量。</p>\r\n\r\n<p><strong>在 JavaScript 中, 作用域为可访问变量，对象，函数的集合。</strong></p>\r\n\r\n<p>JavaScript 函数作用域: 作用域在函数内修改。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 局部作用域</h2>\r\n\r\n<p>变量在函数内声明，变量为局部作用域。</p>\r\n\r\n<p>局部变量：只能在函数内部访问。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>// 此处不能调用 carName 变量 function myFunction() { var carName = &quot;Volvo&quot;; // 函数内可调用 carName 变量 }</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_scope_local\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。</p>\r\n\r\n<p>局部变量在函数开始执行时创建，函数执行完后局部变量会自动销毁。</p>\r\n\r\n<hr />\r\n<h2>JavaScript 全局变量</h2>\r\n\r\n<p>变量在函数外定义，即为全局变量。</p>\r\n\r\n<p>全局变量有&nbsp;<strong>全局作用域</strong>: 网页中所有脚本和函数均可使用。&nbsp;</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>var carName = &quot; Volvo&quot;; // 此处可调用 carName 变量 function myFunction() { // 函数内可调用 carName 变量 }</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_scope_global\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。</p>\r\n\r\n<p>以下实例中 carName 在函数内，但是为全局变量。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>// 此处可调用 carName 变量 function myFunction() { carName = &quot;Volvo&quot;; // 此处可调用 carName 变量 }</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_local_global\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>JavaScript 变量生命周期</h2>\r\n\r\n<p>JavaScript 变量生命周期在它声明时初始化。</p>\r\n\r\n<p>局部变量在函数执行完毕后销毁。</p>\r\n\r\n<p>全局变量在页面关闭后销毁。</p>\r\n\r\n<hr />\r\n<h2>函数参数</h2>\r\n\r\n<p>函数参数只在函数内起作用，是局部变量。</p>\r\n\r\n<hr />\r\n<h2>HTML 中的全局变量</h2>\r\n\r\n<p>在 HTML 中, 全局变量是 window 对象: 所有数据变量都属于 window 对象。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>//此处可使用 window.carName function myFunction() { carName = &quot;Volvo&quot;; }</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/try.php?filename=tryjs_scope_window\" rel=\"noopener noreferrer\" target=\"_blank\">尝试一下 &raquo;</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>你知道吗?</h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th><img alt=\"Note\" src=\"https://www.runoob.com/images/lamp.jpg\" /></th>\r\n			<td>你的全局变量，或者函数，可以覆盖 window 对象的变量或者函数。<br />\r\n			局部变量，包括 window 对象可以覆盖全局变量和函数。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 0, '2021-12-14 02:44:52.046806', '2021-12-14 02:44:52.050806', 8, 7);
INSERT INTO `tb_article` VALUES (82, 'article/20211214/python3.png', 'Python 3 教程', 'Python 3 教程', 'Python 3 教程', '<h1>Python 3 教程</h1>\r\n\r\n<p><img alt=\"python3\" src=\"https://www.runoob.com/wp-content/uploads/2014/05/python3.png\" style=\"height:81px; width:150px\" /></p>\r\n\r\n<p>Python 的 3.0 版本，常被称为 Python 3000，或简称 Py3k。相对于 Python 的早期版本，这是一个较大的升级。为了不带入过多的累赘，Python 3.0 在设计的时候没有考虑向下兼容。</p>\r\n\r\n<p>Python 介绍及安装教程我们在<a href=\"https://www.runoob.com/python/python-tutorial.html\" rel=\"noopener noreferrer\" target=\"_blank\">Python 2.X 版本的教程</a>中已有介绍，这里就不再赘述。</p>\r\n\r\n<p>你也可以点击&nbsp;<a href=\"https://www.runoob.com/python3/python-2x-3x.html\" rel=\"noopener noreferrer\" target=\"_top\">Python2.x与3​​.x版本区别&nbsp;</a>来查看两者的不同。</p>\r\n\r\n<p>本教程主要针对 Python 3.x 版本的学习，如果你使用的是 Python 2.x 版本请移步至&nbsp;<a href=\"https://www.runoob.com/python/python-tutorial.html\" rel=\"noopener noreferrer\" target=\"_blank\">Python 2.X 版本的教程</a>。</p>\r\n\r\n<p><strong>官方宣布，2020 年 1 月 1 日， 停止 Python 2 的更新。</strong></p>\r\n\r\n<hr />\r\n<h2>查看 Python 版本</h2>\r\n\r\n<p>我们可以在命令窗口(Windows 使用 win+R 调出 cmd 运行框)使用以下命令查看我们使用的 Python 版本：</p>\r\n\r\n<pre>\r\npython -V\r\n或\r\npython --version</pre>\r\n\r\n<p>以上命令执行结果如下：</p>\r\n\r\n<pre>\r\nPython 3.3.2</pre>\r\n\r\n<p>你也可以进入Python的交互式编程模式，查看版本：</p>\r\n\r\n<pre>\r\nPython 3.3.2 (v3.3.2:d047928ae3f6, May 16 2013, 00:03:43) [MSC v.1600 32 bit (Intel)] on win32\r\nType &quot;copyright&quot;, &quot;credits&quot; or &quot;license()&quot; for more information.\r\n&gt;&gt;&gt; </pre>\r\n\r\n<hr />\r\n<h2>第一个Python3.x程序</h2>\r\n\r\n<p>对于大多数程序语言，第一个入门编程代码便是&quot;Hello World！&quot;，以下代码为使用Python输出&quot;Hello World！&quot;：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 print(&quot;Hello, World!&quot;)</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/runcode.php?filename=HelloWorld&amp;type=python3\" rel=\"noopener noreferrer\" target=\"_blank\">运行实例 &raquo;</a></p>\r\n\r\n<p>你可以将以上代码保存在 hello.py 文件中并使用 python 命令执行该脚本文件。</p>\r\n\r\n<pre>\r\n$ python3 hello.py</pre>\r\n\r\n<p>以上命令输出结果为：</p>\r\n\r\n<pre>\r\nHello, World!</pre>\r\n\r\n<hr />\r\n<h2>相关内容：</h2>\r\n\r\n<p><a href=\"https://www.runoob.com/manual/pythontutorial3/docs/html/\" rel=\"noopener noreferrer\" target=\"_blank\">Python 3.6.3 中文手册</a></p>\r\n\r\n<p><a href=\"https://www.runoob.com/python/python-tutorial.html\" rel=\"noopener noreferrer\" target=\"_blank\">Python 2.X 版本的教程</a></p>\r\n', 0, 0, '2021-12-14 02:46:20.435903', '2021-12-14 02:46:20.439921', 8, 1);
INSERT INTO `tb_article` VALUES (83, 'article/20211214/python3_sCrkfOp.png', 'Python3 简介', 'Python3 简介', 'Python3 简介', '<h1>Python3&nbsp;简介</h1>\r\n\r\n<p>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</p>\r\n\r\n<p>Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Python 是一种解释型语言：</strong>&nbsp;这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Python 是交互式语言：</strong>&nbsp;这意味着，您可以在一个 Python 提示符&nbsp;&gt;&gt;&gt;&nbsp;后直接执行代码。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Python 是面向对象语言:</strong>&nbsp;这意味着Python支持面向对象的风格或代码封装在对象的编程技术。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Python 是初学者的语言：</strong>Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>Python 发展历史</h2>\r\n\r\n<p>Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。</p>\r\n\r\n<p>Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。</p>\r\n\r\n<p>像 Perl 语言一样，Python 源代码同样遵循 GPL(GNU General Public License)协议。</p>\r\n\r\n<p>现在 Python 是由一个核心开发团队在维护，Guido van Rossum 仍然占据着至关重要的作用，指导其进展。</p>\r\n\r\n<p>Python 2.0 于 2000 年 10 月 16 日发布，增加了实现完整的垃圾回收，并且支持 Unicode。</p>\r\n\r\n<p>Python 3.0 于 2008 年 12 月 3 日发布，此版不完全兼容之前的 Python 源代码。不过，很多新特性后来也被移植到旧的Python 2.6/2.7版本。</p>\r\n\r\n<p>Python 3.0 版本，常被称为 Python 3000，或简称 Py3k。相对于 Python 的早期版本，这是一个较大的升级。</p>\r\n\r\n<p>Python 2.7 被确定为最后一个 Python 2.x 版本，它除了支持 Python 2.x 语法外，还支持部分 Python 3.1 语法。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>Python 特点</h2>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>1.易于学习：</strong>Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>2.易于阅读：</strong>Python代码定义的更清晰。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>3.易于维护：</strong>Python的成功在于它的源代码是相当容易维护的。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>4.一个广泛的标准库：</strong>Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>5.互动模式：</strong>互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>6.可移植：</strong>基于其开放源代码的特性，Python已经被移植（也就是使其工作）到许多平台。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>7.可扩展：</strong>如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>8.数据库：</strong>Python提供所有主要的商业数据库的接口。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>9.GUI编程：</strong>Python支持GUI可以创建和移植到许多系统调用。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>10.可嵌入:&nbsp;</strong>你可以将Python嵌入到C/C++程序，让你的程序的用户获得&quot;脚本化&quot;的能力。</p>\r\n	</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>Python 应用</h2>\r\n\r\n<ul>\r\n	<li>Youtube - 视频社交网站</li>\r\n	<li>Reddit - 社交分享网站</li>\r\n	<li>Dropbox - 文件分享服务</li>\r\n	<li>豆瓣网 - 图书、唱片、电影等文化产品的资料数据库网站</li>\r\n	<li>知乎 - 一个问答网站</li>\r\n	<li>果壳 - 一个泛科技主题网站</li>\r\n	<li>Bottle - Python微Web框架</li>\r\n	<li>EVE - 网络游戏EVE大量使用Python进行开发</li>\r\n	<li>Blender - 使用Python作为建模工具与GUI语言的开源3D绘图软件</li>\r\n	<li>Inkscape - 一个开源的SVG矢量图形编辑器。</li>\r\n	<li>...</li>\r\n</ul>\r\n', 0, 0, '2021-12-14 02:46:56.722653', '2021-12-14 02:46:56.726661', 8, 1);
INSERT INTO `tb_article` VALUES (84, 'article/20211214/python3_8SBlq0p.png', 'Python3 环境搭建', 'Python3 环境搭建', 'Python3 环境搭建', '<h1>Python3&nbsp;环境搭建</h1>\r\n\r\n<p>本章节我们将向大家介绍如何在本地搭建 Python3 开发环境。</p>\r\n\r\n<p>Python3 可应用于多平台包括 Windows、Linux 和 Mac OS X。</p>\r\n\r\n<ul>\r\n	<li>Unix (Solaris, Linux, FreeBSD, AIX, HP/UX, SunOS, IRIX, 等等。)</li>\r\n	<li>Win 9x/NT/2000</li>\r\n	<li>Macintosh (Intel, PPC, 68K)</li>\r\n	<li>OS/2</li>\r\n	<li>DOS (多个DOS版本)</li>\r\n	<li>PalmOS</li>\r\n	<li>Nokia 移动手机</li>\r\n	<li>Windows CE</li>\r\n	<li>Acorn/RISC OS</li>\r\n	<li>BeOS</li>\r\n	<li>Amiga</li>\r\n	<li>VMS/OpenVMS</li>\r\n	<li>QNX</li>\r\n	<li>VxWorks</li>\r\n	<li>Psion</li>\r\n	<li>Python 同样可以移植到 Java 和 .NET 虚拟机上。</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>Python3 下载</h2>\r\n\r\n<p>Python3 最新源码，二进制文档，新闻资讯等可以在 Python 的官网查看到：</p>\r\n\r\n<p>Python 官网：<a href=\"https://www.python.org/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://www.python.org/</a></p>\r\n\r\n<p>你可以在以下链接中下载 Python 的文档，你可以下载 HTML、PDF 和 PostScript 等格式的文档。</p>\r\n\r\n<p>Python文档下载地址：<a href=\"https://www.python.org/doc/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://www.python.org/doc/</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>Python 安装</h2>\r\n\r\n<p>Python 已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。</p>\r\n\r\n<p>您需要下载适用于您使用平台的二进制代码，然后安装 Python。</p>\r\n\r\n<p>如果您平台的二进制代码是不可用的，你需要使用C编译器手动编译源代码。</p>\r\n\r\n<p>编译的源代码，功能上有更多的选择性， 为 Python 安装提供了更多的灵活性。</p>\r\n\r\n<p>以下是各个平台安装包的下载地址：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2018/07/F2135662-1078-4EE2-BEBB-353F8D8E521F.jpg\" /></p>\r\n\r\n<p><strong>Source Code</strong>&nbsp;可用于 Linux 上的安装。</p>\r\n\r\n<p>以下为不同平台上安装 Python3 的方法。</p>\r\n\r\n<h3>Unix &amp; Linux 平台安装 Python3:</h3>\r\n\r\n<p>以下为在 Unix &amp; Linux 平台上安装 Python 的简单步骤：</p>\r\n\r\n<ul>\r\n	<li>打开 WEB 浏览器访问&nbsp;<a href=\"https://www.python.org/downloads/source/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://www.python.org/downloads/source/</a></li>\r\n	<li>选择适用于 Unix/Linux 的源码压缩包。</li>\r\n	<li>下载及解压压缩包&nbsp;<strong>Python-3.x.x.tgz</strong>，<strong>3.x.x</strong>&nbsp;为你下载的对应版本号。</li>\r\n	<li>如果你需要自定义一些选项修改&nbsp;<em>Modules/Setup</em></li>\r\n</ul>\r\n\r\n<p>以<strong>&nbsp;Python3.6.1</strong>&nbsp;版本为例：</p>\r\n\r\n<pre>\r\n# tar -zxvf Python-3.6.1.tgz\r\n# cd Python-3.6.1\r\n# ./configure\r\n# make &amp;&amp; make install</pre>\r\n\r\n<p>检查 Python3 是否正常可用：</p>\r\n\r\n<pre>\r\n# python3 -V\r\nPython 3.6.1</pre>\r\n\r\n<h3>Window 平台安装 Python:</h3>\r\n\r\n<p>以下为在 Window 平台上安装 Python 的简单步骤。</p>\r\n\r\n<p>打开 WEB 浏览器访问&nbsp;<a href=\"https://www.python.org/downloads/windows/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://www.python.org/downloads/windows/</a>&nbsp;，一般就下载 executable installer，x86 表示是 32 位机子的，x86-64 表示 64 位机子的。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2018/07/A0ADAB69-1DA6-409B-AF85-DA2FC7E0B57F.png\" /></p>\r\n\r\n<p>记得勾选&nbsp;<strong>Add Python 3.6 to PATH</strong>。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2018/07/20180226150011548.png\" /></p>\r\n\r\n<p>按&nbsp;Win+R&nbsp;键，输入 cmd 调出命令提示符，输入 python:</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2018/07/20170707155742110.png\" /></p>\r\n\r\n<p>也可以在开始菜单中搜索&nbsp;<strong>IDLE</strong>：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2018/07/460F6DFB-3BBF-4683-BEA0-23BE8DF021B0.jpg\" /></p>\r\n\r\n<h3>MAC 平台安装 Python:</h3>\r\n\r\n<p>MAC 系统都自带有 Python2.7 环境，你可以在链接&nbsp;<a href=\"https://www.python.org/downloads/mac-osx/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://www.python.org/downloads/mac-osx/</a>&nbsp;上下载最新版安装 Python 3.x。</p>\r\n\r\n<p>你也可以参考源码安装的方式来安装。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>环境变量配置</h2>\r\n\r\n<p>程序和可执行文件可以在许多目录，而这些路径很可能不在操作系统提供可执行文件的搜索路径中。</p>\r\n\r\n<p>path(路径)存储在环境变量中，这是由操作系统维护的一个命名的字符串。这些变量包含可用的命令行解释器和其他程序的信息。</p>\r\n\r\n<p>Unix 或 Windows 中路径变量为 PATH（UNIX 区分大小写，Windows 不区分大小写）。</p>\r\n\r\n<p>在 Mac OS 中，安装程序过程中改变了 Python 的安装路径。如果你需要在其他目录引用 Python，你必须在 path 中添加 Python 目录。</p>\r\n\r\n<h3>在 Unix/Linux 设置环境变量</h3>\r\n\r\n<ul>\r\n	<li><strong>在 csh shell:</strong>&nbsp;输入\r\n\r\n	<pre>\r\nsetenv PATH &quot;$PATH:/usr/local/bin/python&quot;</pre>\r\n	, 按下&nbsp;<strong>Enter</strong>。</li>\r\n	<li><strong>在 bash shell (Linux) 输入 :</strong>\r\n	<pre>\r\nexport PATH=&quot;$PATH:/usr/local/bin/python&quot; </pre>\r\n	按下&nbsp;<strong>Enter</strong>&nbsp;。</li>\r\n	<li><strong>在 sh 或者 ksh shell 输入:</strong>\r\n	<pre>\r\nPATH=&quot;$PATH:/usr/local/bin/python&quot; </pre>\r\n	按下 Enter。</li>\r\n</ul>\r\n\r\n<p><strong>注意:&nbsp;</strong>/usr/local/bin/python 是 Python 的安装目录。</p>\r\n\r\n<h3>在 Windows 设置环境变量</h3>\r\n\r\n<p>在环境变量中添加Python目录：</p>\r\n\r\n<p><strong>在命令提示框中(cmd) :</strong>&nbsp;输入</p>\r\n\r\n<pre>\r\npath=%path%;C:\\Python </pre>\r\n\r\n<p>按下&quot;Enter&quot;。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>注意:&nbsp;</strong>C:\\Python 是Python的安装目录。</p>\r\n\r\n<p>也可以通过以下方式设置：</p>\r\n\r\n<ul>\r\n	<li>右键点击&quot;计算机&quot;，然后点击&quot;属性&quot;</li>\r\n	<li>然后点击&quot;高级系统设置&quot;</li>\r\n	<li>选择&quot;系统变量&quot;窗口下面的&quot;Path&quot;,双击即可！</li>\r\n	<li>&nbsp;</li>\r\n	<li>然后在&quot;Path&quot;行，添加python安装路径即可(我的D:\\Python32)，所以在后面，添加该路径即可。&nbsp;<strong>ps：记住，路径直接用分号&quot;；&quot;隔开！</strong></li>\r\n	<li>最后设置成功以后，在cmd命令行，输入命令&quot;python&quot;，就可以有相关显示。</li>\r\n</ul>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/201209201707594792.png\" /></p>\r\n\r\n<hr />\r\n<h2>Python 环境变量</h2>\r\n\r\n<p>下面几个重要的环境变量，它应用于Python：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>变量名</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>PYTHONPATH</td>\r\n			<td>PYTHONPATH是Python搜索路径，默认我们import的模块都会从PYTHONPATH里面寻找。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>PYTHONSTARTUP</td>\r\n			<td>Python启动后，先寻找PYTHONSTARTUP环境变量，然后执行此变量指定的文件中的代码。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>PYTHONCASEOK</td>\r\n			<td>加入PYTHONCASEOK的环境变量, 就会使python导入模块的时候不区分大小写.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>PYTHONHOME</td>\r\n			<td>另一种模块搜索路径。它通常内嵌于的PYTHONSTARTUP或PYTHONPATH目录中，使得两个模块库更容易切换。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>运行 Python</h2>\r\n\r\n<p>有三种方式可以运行 Python：</p>\r\n\r\n<h3>1、交互式解释器：</h3>\r\n\r\n<p>你可以通过命令行窗口进入 Python 并开在交互式解释器中开始编写 Python 代码。</p>\r\n\r\n<p>你可以在 Unix、DOS 或任何其他提供了命令行或者 shell 的系统进行 Python 编码工作。</p>\r\n\r\n<pre>\r\n$ python             # Unix/Linux\r\n\r\n或者  \r\n\r\nC:&gt;python           # Windows/DOS</pre>\r\n\r\n<p>以下为 Python 命令行参数：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>选项</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>-d</td>\r\n			<td>在解析时显示调试信息</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-O</td>\r\n			<td>生成优化代码 ( .pyo 文件 )</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-S</td>\r\n			<td>启动时不引入查找Python路径的位置</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-V</td>\r\n			<td>输出Python版本号</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-X</td>\r\n			<td>从 1.6版本之后基于内建的异常（仅仅用于字符串）已过时。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-c cmd</td>\r\n			<td>执行 Python 脚本，并将运行结果作为 cmd 字符串。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>file</td>\r\n			<td>在给定的python文件执行python脚本。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>2、命令行脚本</h3>\r\n\r\n<p>在你的应用程序中通过引入解释器可以在命令行中执行Python脚本，如下所示：</p>\r\n\r\n<pre>\r\n$ python  script.py          # Unix/Linux\r\n\r\n或者\r\n\r\nC:&gt;python script.py         # Windows/DOS</pre>\r\n\r\n<p><strong>注意：</strong>在执行脚本时，请检查脚本是否有可执行权限。</p>\r\n\r\n<h3>3、集成开发环境（IDE：Integrated Development Environment）: PyCharm</h3>\r\n\r\n<p>PyCharm 是由 JetBrains 打造的一款 Python IDE，支持 macOS、 Windows、 Linux 系统。</p>\r\n\r\n<p>PyCharm 功能 : 调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制&hellip;&hellip;</p>\r\n\r\n<p>PyCharm 下载地址 :&nbsp;<a href=\"https://www.jetbrains.com/pycharm/download/\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.jetbrains.com/pycharm/download/</a></p>\r\n\r\n<p>PyCharm 安装地址：<a href=\"https://www.runoob.com/w3cnote/pycharm-windows-install.html\" rel=\"noopener noreferrer\" target=\"_blank\">http://www.runoob.com/w3cnote/pycharm-windows-install.html</a></p>\r\n\r\n<p>Professional（专业版，收费）：完整的功能，可试用 30 天。</p>\r\n\r\n<p>Community（社区版，免费）：阉割版的专业版。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2018/05/1525863037-6053-.png\" /></p>\r\n\r\n<p>PyCharm 界面：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/execute-python-hello-world-program.png\" /></p>\r\n\r\n<p>安装 PyCharm 中文插件，打开菜单栏 File，选择 Settings，然后选 Pulgins，点 Marketplace，搜索 chinese，然后点击 install 安装：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/aHR0cDovL3d3dy54aW1vcWluZy5jbi9kYXRhL3VwbG9hZHMvMjAyMDA0MjIvNTY1ODA1NTIyNDhhYTIwNmQzZThiMTQzNDVlZjc2NjEuanBn.jpeg\" /></p>\r\n', 1, 0, '2021-12-14 02:47:22.514100', '2021-12-14 02:47:25.748165', 8, 1);
INSERT INTO `tb_article` VALUES (85, 'article/20211214/python3_0cMZrcC.png', 'Python VScode 配置', 'Python VScode 配置', 'Python VScode 配置', '<h1>Python VScode 配置</h1>\r\n\r\n<p>在上一章节中我们已经安装了 Python 的环境，本章节我们将介绍 Python VScode 的配置。</p>\r\n\r\n<p>准备工作：</p>\r\n\r\n<ul>\r\n	<li>安装 VS Code</li>\r\n	<li>安装 VS Code Python 扩展</li>\r\n	<li>安装 Python 3</li>\r\n</ul>\r\n\r\n<h3>安装 VS Code</h3>\r\n\r\n<p>VSCode（全称：Visual Studio Code）是一款由微软开发且跨平台的免费源代码编辑器，VSCode 开发环境非常简单易用。</p>\r\n\r\n<p>VSCode 安装也很简单，打开官网&nbsp;<a href=\"https://code.visualstudio.com/\" rel=\"noopener\" target=\"_blank\">https://code.visualstudio.com/</a>，下载软件包，一步步安装即可，安装过程注意安装路径设置、环境变量默认自动添加到系统中，勾选以下所有选项：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2021/08/RM04TZb.png\" /></p>\r\n\r\n<p>VSCode 完整安装教程参考：<a href=\"https://www.runoob.com/w3cnote/vscode-tutorial.html\" rel=\"noopener\" target=\"_blank\">https://www.runoob.com/w3cnote/vscode-tutorial.html</a></p>\r\n\r\n<p>接着我们安装&nbsp;VS Code Python&nbsp;扩展：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2021/08/D256086F-9E7F-4975-9362-3E3DC5A563AB.jpeg\" style=\"width:60%\" /></p>\r\n\r\n<hr />\r\n<h2>创建一个 Python 代码文件</h2>\r\n\r\n<p>打开 VScode，然后点击新建文件：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2021/08/vscode-py-1.jpeg\" style=\"width:60%\" /></p>\r\n\r\n<p>点击选择语言：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2021/08/vscode-py-2.jpg\" style=\"width:60%\" /></p>\r\n\r\n<p>在搜索框输入 Python，选中 Python 选项：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2021/08/vscode-py-3.jpg\" style=\"width:60%\" /></p>\r\n\r\n<p>输入代码：</p>\r\n\r\n<pre>\r\nprint(&quot;Runoob&quot;)</pre>\r\n\r\n<p>右击鼠标，选择在交互式窗口运行文件，<strong>如果有提示需要安装扩展，直接点安装即可(没有安装会一直显示在连接 Python 内核)：</strong></p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2021/08/vscode-py-4.jpeg\" /></p>\r\n\r\n<p>另外，我们也可以打开一个已存在的文件或目录（文件夹），比如我们打开一个 runoob-test，你也可以自己创建一个：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2021/08/326906F8-C20B-4D76-AC86-FED6544B3DB5.jpeg\" style=\"width:60%\" /></p>\r\n\r\n<p>然后我们创建一个 test.py 文件，点击下面新建文件图标，输入文件名 test.py：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2021/08/86278531-3C46-4E05-BBE9-3E76CE82722A.jpg\" style=\"width:60%\" /></p>\r\n\r\n<p><strong>注：</strong>runoob-test 里面包含了一个&nbsp;.vscode&nbsp;文件夹，是一些配置信息，可以先不用管。</p>\r\n\r\n<p>在 test.py 输入以下代码：</p>\r\n\r\n<pre>\r\nprint(&quot;Runoob&quot;)</pre>\r\n\r\n<p>点击右上角绿色图标，即可运行：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2021/08/438AF06B-6E02-42F0-9062-53337E8E90AD.jpg\" style=\"width:60%\" /></p>\r\n\r\n<p>可以右击文件，选择&quot;在终端中运行 Python 文件&quot;：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2021/08/16743E52-BE92-424B-AE7B-F9F602A44462.jpeg\" style=\"width:60%\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>当然也可以在代码窗口上右击鼠标，选择&quot;在终端中运行 Python 文件&quot;。</p>\r\n', 0, 0, '2021-12-14 02:48:02.897791', '2021-12-14 02:48:02.902783', 8, 1);
INSERT INTO `tb_article` VALUES (86, 'article/20211214/python3_ZoVewzf.png', 'Python3 基础语法', 'Python3 基础语法', 'Python3 基础语法', '<h1>Python3 基础语法</h1>\r\n\r\n<h2>编码</h2>\r\n\r\n<p>默认情况下，Python 3 源码文件以&nbsp;<strong>UTF-8</strong>&nbsp;编码，所有字符串都是 unicode 字符串。 当然你也可以为源码文件指定不同的编码：</p>\r\n\r\n<pre>\r\n# -*- coding: cp-1252 -*-</pre>\r\n\r\n<p>上述定义允许在源文件中使用 Windows-1252 字符集中的字符编码，对应适合语言为保加利亚语、白罗斯语、马其顿语、俄语、塞尔维亚语。</p>\r\n\r\n<hr />\r\n<h2>标识符</h2>\r\n\r\n<ul>\r\n	<li>第一个字符必须是字母表中字母或下划线&nbsp;_&nbsp;。</li>\r\n	<li>标识符的其他的部分由字母、数字和下划线组成。</li>\r\n	<li>标识符对大小写敏感。</li>\r\n</ul>\r\n\r\n<p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p>\r\n\r\n<hr />\r\n<h2>python保留字</h2>\r\n\r\n<p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; import keyword\r\n&gt;&gt;&gt; keyword.kwlist\r\n[&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;]</pre>\r\n\r\n<hr />\r\n<h2>注释</h2>\r\n\r\n<p>Python中单行注释以&nbsp;<strong>#</strong>&nbsp;开头，实例如下：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 # 第一个注释 print (&quot;Hello, Python!&quot;) # 第二个注释</p>\r\n\r\n<p>执行以上代码，输出结果为：</p>\r\n\r\n<pre>\r\nHello, Python!</pre>\r\n\r\n<p>多行注释可以用多个&nbsp;#&nbsp;号，还有&nbsp;&#39;&#39;&#39;&nbsp;和&nbsp;&quot;&quot;&quot;：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 # 第一个注释 # 第二个注释 &#39;&#39;&#39; 第三注释 第四注释 &#39;&#39;&#39; &quot;&quot;&quot; 第五注释 第六注释 &quot;&quot;&quot; print (&quot;Hello, Python!&quot;)</p>\r\n\r\n<p>执行以上代码，输出结果为：</p>\r\n\r\n<pre>\r\nHello, Python!</pre>\r\n\r\n<hr />\r\n<h2>行与缩进</h2>\r\n\r\n<p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号&nbsp;{}&nbsp;。</p>\r\n\r\n<p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>if True: print (&quot;True&quot;) else: print (&quot;False&quot;)</p>\r\n\r\n<p>以下代码最后一行语句缩进数的空格数不一致，会导致运行错误：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>if&nbsp;True:<br />\r\n&nbsp; &nbsp;&nbsp;print&nbsp;(&quot;Answer&quot;)<br />\r\n&nbsp; &nbsp;&nbsp;print&nbsp;(&quot;True&quot;)<br />\r\nelse:<br />\r\n&nbsp; &nbsp;&nbsp;print&nbsp;(&quot;Answer&quot;)<br />\r\n&nbsp;&nbsp;print&nbsp;(&quot;False&quot;)&nbsp;&nbsp; &nbsp;# 缩进不一致，会导致运行错误</p>\r\n\r\n<p>以上程序由于缩进不一致，执行后会出现类似以下错误：</p>\r\n\r\n<pre>\r\n File &quot;test.py&quot;, line 6\r\n    print (&quot;False&quot;)    # 缩进不一致，会导致运行错误\r\n                                      ^\r\nIndentationError: unindent does not match any outer indentation level</pre>\r\n\r\n<hr />\r\n<h2>多行语句</h2>\r\n\r\n<p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠&nbsp;\\&nbsp;来实现多行语句，例如：</p>\r\n\r\n<pre>\r\ntotal = item_one + \\\r\n        item_two + \\\r\n        item_three</pre>\r\n\r\n<p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠&nbsp;\\，例如：</p>\r\n\r\n<pre>\r\ntotal = [&#39;item_one&#39;, &#39;item_two&#39;, &#39;item_three&#39;,\r\n        &#39;item_four&#39;, &#39;item_five&#39;]</pre>\r\n\r\n<hr />\r\n<h2>数字(Number)类型</h2>\r\n\r\n<p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p>\r\n\r\n<ul>\r\n	<li><strong>int</strong>&nbsp;(整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li>\r\n	<li><strong>bool</strong>&nbsp;(布尔), 如 True。</li>\r\n	<li><strong>float</strong>&nbsp;(浮点数), 如 1.23、3E-2</li>\r\n	<li><strong>complex</strong>&nbsp;(复数), 如 1 + 2j、 1.1 + 2.2j</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>字符串(String)</h2>\r\n\r\n<ul>\r\n	<li>python中单引号和双引号使用完全相同。</li>\r\n	<li>使用三引号(&#39;&#39;&#39;&nbsp;或&nbsp;&quot;&quot;&quot;)可以指定一个多行字符串。</li>\r\n	<li>转义符&nbsp;\\</li>\r\n	<li>反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r&quot;this is a line with \\n&quot; 则\\n会显示，并不是换行。</li>\r\n	<li>按字面意义级联字符串，如&quot;this &quot; &quot;is &quot; &quot;string&quot;会被自动转换为this is string。</li>\r\n	<li>字符串可以用 + 运算符连接在一起，用 * 运算符重复。</li>\r\n	<li>Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。</li>\r\n	<li>Python中的字符串不能改变。</li>\r\n	<li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li>\r\n	<li>字符串的截取的语法格式如下：变量[头下标:尾下标:步长]</li>\r\n</ul>\r\n\r\n<pre>\r\nword = &#39;字符串&#39;\r\nsentence = &quot;这是一个句子。&quot;\r\nparagraph = &quot;&quot;&quot;这是一个段落，\r\n可以由多行组成&quot;&quot;&quot;</pre>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 str=&#39;123456789&#39; print(str) # 输出字符串 print(str[0:-1]) # 输出第一个到倒数第二个的所有字符 print(str[0]) # 输出字符串第一个字符 print(str[2:5]) # 输出从第三个开始到第五个的字符 print(str[2:]) # 输出从第三个开始后的所有字符 print(str[1:5:2]) # 输出从第二个开始到第五个且每隔一个的字符（步长为2） print(str * 2) # 输出字符串两次 print(str + &#39;你好&#39;) # 连接字符串 print(&#39;------------------------------&#39;) print(&#39;hello\\nrunoob&#39;) # 使用反斜杠(\\)+n转义特殊字符 print(r&#39;hello\\nrunoob&#39;) # 在字符串前面添加一个 r，表示原始字符串，不会发生转义</p>\r\n\r\n<p>这里的 r 指 raw，即 raw string，会自动将反斜杠转义，例如：</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; print(&#39;\\n&#39;)       # 输出空行\r\n\r\n&gt;&gt;&gt; print(r&#39;\\n&#39;)      # 输出 \\n\r\n\\n\r\n&gt;&gt;&gt;</pre>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n123456789\r\n12345678\r\n1\r\n345\r\n3456789\r\n24\r\n123456789123456789\r\n123456789你好\r\n------------------------------\r\nhello\r\nrunoob\r\nhello\\nrunoob</pre>\r\n\r\n<hr />\r\n<h2>空行</h2>\r\n\r\n<p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p>\r\n\r\n<p>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p>\r\n\r\n<p><strong>记住：</strong>空行也是程序代码的一部分。</p>\r\n\r\n<hr />\r\n<h2>等待用户输入</h2>\r\n\r\n<p>执行下面的程序在按回车键后就会等待用户输入：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 input(&quot;\\n\\n按下 enter 键后退出。&quot;)</p>\r\n\r\n<p>以上代码中 ，&quot;\\n\\n&quot;在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。</p>\r\n\r\n<hr />\r\n<h2>同一行显示多条语句</h2>\r\n\r\n<p>Python 可以在同一行中使用多条语句，语句之间使用分号&nbsp;;&nbsp;分割，以下是一个简单的实例：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 import sys; x = &#39;runoob&#39;; sys.stdout.write(x + &#39;\\n&#39;)</p>\r\n\r\n<p>使用脚本执行以上代码，输出结果为：</p>\r\n\r\n<pre>\r\nrunoob</pre>\r\n\r\n<p>使用交互式命令行执行，输出结果为：</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; import sys; x = &#39;runoob&#39;; sys.stdout.write(x + &#39;\\n&#39;)\r\nrunoob\r\n7</pre>\r\n\r\n<p>此处的 7 表示字符数，<strong>runoob</strong>&nbsp;有 6 个字符，<strong>\\n</strong>&nbsp;表示一个字符，加起来&nbsp;<strong>7</strong>&nbsp;个字符。</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; import sys\r\n&gt;&gt;&gt; sys.stdout.write(&quot; hi &quot;)    # hi 前后各有 1 个空格\r\n hi 4</pre>\r\n\r\n<hr />\r\n<h2>多个语句构成代码组</h2>\r\n\r\n<p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p>\r\n\r\n<p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p>\r\n\r\n<p>我们将首行及后面的代码组称为一个子句(clause)。</p>\r\n\r\n<p>如下实例：</p>\r\n\r\n<pre>\r\nif expression : \r\n   suite\r\nelif expression : \r\n   suite \r\nelse : \r\n   suite</pre>\r\n\r\n<hr />\r\n<h2>print 输出</h2>\r\n\r\n<p><strong>print</strong>&nbsp;默认输出是换行的，如果要实现不换行需要在变量末尾加上&nbsp;end=&quot;&quot;：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 x=&quot;a&quot; y=&quot;b&quot; # 换行输出 print( x ) print( y ) print(&#39;---------&#39;) # 不换行输出 print( x, end=&quot; &quot; ) print( y, end=&quot; &quot; ) print()</p>\r\n\r\n<p>以上实例执行结果为：</p>\r\n\r\n<pre>\r\na\r\nb\r\n---------\r\na b</pre>\r\n\r\n<hr />\r\n<h2>import 与 from...import</h2>\r\n\r\n<p>在 python 用&nbsp;import&nbsp;或者&nbsp;from...import&nbsp;来导入相应的模块。</p>\r\n\r\n<p>将整个模块(somemodule)导入，格式为：&nbsp;import somemodule</p>\r\n\r\n<p>从某个模块中导入某个函数,格式为：&nbsp;from somemodule import somefunction</p>\r\n\r\n<p>从某个模块中导入多个函数,格式为：&nbsp;from somemodule import firstfunc, secondfunc, thirdfunc</p>\r\n\r\n<p>将某个模块中的全部函数导入，格式为：&nbsp;from somemodule import *</p>\r\n\r\n<h2>导入 sys 模块</h2>\r\n\r\n<p>import sys print(&#39;================Python import mode==========================&#39;) print (&#39;命令行参数为:&#39;) for i in sys.argv: print (i) print (&#39;\\n python 路径为&#39;,sys.path)</p>\r\n\r\n<h2>导入 sys 模块的 argv,path 成员</h2>\r\n\r\n<p>from sys import argv,path # 导入特定的成员 print(&#39;================python from import===================================&#39;) print(&#39;path:&#39;,path) # 因为已经导入path成员，所以此处引用时不需要加sys.path</p>\r\n\r\n<hr />\r\n<h2>命令行参数</h2>\r\n\r\n<p>很多程序可以执行一些操作来查看一些基本信息，Python可以使用-h参数查看各参数帮助信息：</p>\r\n\r\n<pre>\r\n$ python -h\r\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\r\nOptions and arguments (and corresponding environment variables):\r\n-c cmd : program passed in as string (terminates option list)\r\n-d     : debug output from parser (also PYTHONDEBUG=x)\r\n-E     : ignore environment variables (such as PYTHONPATH)\r\n-h     : print this help message and exit\r\n\r\n[ etc. ]</pre>\r\n\r\n<p>我们在使用脚本形式执行 Python 时，可以接收命令行输入的参数，具体使用可以参照&nbsp;<a href=\"https://www.runoob.com/python3/python3-command-line-arguments.html\" rel=\"noopener noreferrer\" target=\"_blank\">Python 3 命令行参数</a>。</p>\r\n', 0, 0, '2021-12-14 02:48:27.211611', '2021-12-14 02:48:27.234629', 8, 1);
INSERT INTO `tb_article` VALUES (87, 'article/20211214/python3_dtXAXGp.png', 'Python3 基本数据类型', 'Python3 基本数据类型', 'Python3 基本数据类型', '<h1>Python3 基本数据类型</h1>\r\n\r\n<p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p>\r\n\r\n<p>在 Python 中，变量就是变量，它没有类型，我们所说的&quot;类型&quot;是变量所指的内存中对象的类型。</p>\r\n\r\n<p>等号（=）用来给变量赋值。</p>\r\n\r\n<p>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3<br />\r\n<br />\r\ncounter&nbsp;=&nbsp;100&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 整型变量<br />\r\nmiles &nbsp;&nbsp;=&nbsp;1000.0&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;# 浮点型变量<br />\r\nname &nbsp; &nbsp;=&nbsp;&quot;runoob&quot;&nbsp;&nbsp; &nbsp;&nbsp;# 字符串<br />\r\n<br />\r\nprint&nbsp;(counter)<br />\r\nprint&nbsp;(miles)<br />\r\nprint&nbsp;(name)</p>\r\n\r\n<p><br />\r\n<a href=\"https://www.runoob.com/try/runcode.php?filename=basic_data_type1&amp;type=python3\" rel=\"noopener noreferrer\" target=\"_blank\">运行实例 &raquo;</a></p>\r\n\r\n<p>执行以上程序会输出如下结果：</p>\r\n\r\n<pre>\r\n100\r\n1000.0\r\nrunoob</pre>\r\n\r\n<h3>多个变量赋值</h3>\r\n\r\n<p>Python允许你同时为多个变量赋值。例如：</p>\r\n\r\n<pre>\r\na = b = c = 1</pre>\r\n\r\n<p>以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。</p>\r\n\r\n<p>您也可以为多个对象指定多个变量。例如：</p>\r\n\r\n<pre>\r\na, b, c = 1, 2, &quot;runoob&quot;</pre>\r\n\r\n<p>以上实例，两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 &quot;runoob&quot; 分配给变量 c。</p>\r\n\r\n<hr />\r\n<h2>标准数据类型</h2>\r\n\r\n<p>Python3 中有六个标准的数据类型：</p>\r\n\r\n<ul>\r\n	<li>Number（数字）</li>\r\n	<li>String（字符串）</li>\r\n	<li>List（列表）</li>\r\n	<li>Tuple（元组）</li>\r\n	<li>Set（集合）</li>\r\n	<li>Dictionary（字典）</li>\r\n</ul>\r\n\r\n<p>Python3 的六个标准数据类型中：</p>\r\n\r\n<ul>\r\n	<li><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</li>\r\n	<li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>Number（数字）</h2>\r\n\r\n<p>Python3 支持&nbsp;<strong>int、float、bool、complex（复数）</strong>。</p>\r\n\r\n<p>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p>\r\n\r\n<p>像大多数语言一样，数值类型的赋值和计算都是很直观的。</p>\r\n\r\n<p>内置的 type() 函数可以用来查询变量所指的对象类型。</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; a, b, c, d = 20, 5.5, True, 4+3j\r\n&gt;&gt;&gt; print(type(a), type(b), type(c), type(d))\r\n&lt;class &#39;int&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;bool&#39;&gt; &lt;class &#39;complex&#39;&gt;</pre>\r\n\r\n<p>此外还可以用 isinstance 来判断：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;a&nbsp;=&nbsp;111<br />\r\n&gt;&gt;&gt;&nbsp;isinstance(a,&nbsp;int)<br />\r\nTrue<br />\r\n&gt;&gt;&gt;</p>\r\n\r\n<p>isinstance 和 type 的区别在于：</p>\r\n\r\n<ul>\r\n	<li>type()不会认为子类是一种父类类型。</li>\r\n	<li>isinstance()会认为子类是一种父类类型。</li>\r\n</ul>\r\n\r\n<pre>\r\n&gt;&gt;&gt; class A:\r\n...     pass\r\n... \r\n&gt;&gt;&gt; class B(A):\r\n...     pass\r\n... \r\n&gt;&gt;&gt; isinstance(A(), A)\r\nTrue\r\n&gt;&gt;&gt; type(A()) == A \r\nTrue\r\n&gt;&gt;&gt; isinstance(B(), A)\r\nTrue\r\n&gt;&gt;&gt; type(B()) == A\r\nFalse</pre>\r\n\r\n<blockquote>\r\n<p><strong>注意：</strong>Python3 中，bool 是 int 的子类，True 和 False 可以和数字相加，&nbsp;True==1、False==0&nbsp;会返回&nbsp;<strong>True</strong>，但可以通过&nbsp;is&nbsp;来判断类型。</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; issubclass(bool, int) \r\nTrue\r\n&gt;&gt;&gt; True==1\r\nTrue\r\n&gt;&gt;&gt; False==0\r\nTrue\r\n&gt;&gt;&gt; True+1\r\n2\r\n&gt;&gt;&gt; False+1\r\n1\r\n&gt;&gt;&gt; 1 is True\r\nFalse\r\n&gt;&gt;&gt; 0 is False\r\nFalse</pre>\r\n\r\n<p>在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。</p>\r\n</blockquote>\r\n\r\n<p>当你指定一个值时，Number 对象就会被创建：</p>\r\n\r\n<pre>\r\nvar1 = 1\r\nvar2 = 10</pre>\r\n\r\n<p>您也可以使用del语句删除一些对象引用。</p>\r\n\r\n<p>del语句的语法是：</p>\r\n\r\n<pre>\r\ndel var1[,var2[,var3[....,varN]]]</pre>\r\n\r\n<p>您可以通过使用del语句删除单个或多个对象。例如：</p>\r\n\r\n<pre>\r\ndel var\r\ndel var_a, var_b</pre>\r\n\r\n<h3>数值运算</h3>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;5&nbsp;+&nbsp;4&nbsp;&nbsp;# 加法<br />\r\n9<br />\r\n&gt;&gt;&gt;&nbsp;4.3&nbsp;-&nbsp;2&nbsp;# 减法<br />\r\n2.3<br />\r\n&gt;&gt;&gt;&nbsp;3&nbsp;*&nbsp;7&nbsp;&nbsp;# 乘法<br />\r\n21<br />\r\n&gt;&gt;&gt;&nbsp;2&nbsp;/&nbsp;4&nbsp;&nbsp;# 除法，得到一个浮点数<br />\r\n0.5<br />\r\n&gt;&gt;&gt;&nbsp;2&nbsp;//&nbsp;4&nbsp;# 除法，得到一个整数<br />\r\n0<br />\r\n&gt;&gt;&gt;&nbsp;17&nbsp;%&nbsp;3&nbsp;# 取余<br />\r\n2<br />\r\n&gt;&gt;&gt;&nbsp;2&nbsp;**&nbsp;5&nbsp;# 乘方<br />\r\n32</p>\r\n\r\n<p><strong>注意：</strong></p>\r\n\r\n<ul>\r\n	<li>1、Python可以同时为多个变量赋值，如a, b = 1, 2。</li>\r\n	<li>2、一个变量可以通过赋值指向不同类型的对象。</li>\r\n	<li>3、数值的除法包含两个运算符：/&nbsp;返回一个浮点数，//&nbsp;返回一个整数。</li>\r\n	<li>4、在混合计算时，Python会把整型转换成为浮点数。</li>\r\n</ul>\r\n\r\n<h3>数值类型实例</h3>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>int</th>\r\n			<th>float</th>\r\n			<th>complex</th>\r\n		</tr>\r\n		<tr>\r\n			<td>10</td>\r\n			<td>0.0</td>\r\n			<td>3.14j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>100</td>\r\n			<td>15.20</td>\r\n			<td>45.j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-786</td>\r\n			<td>-21.9</td>\r\n			<td>9.322e-36j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>080</td>\r\n			<td>32.3e+18</td>\r\n			<td>.876j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-0490</td>\r\n			<td>-90.</td>\r\n			<td>-.6545+0J</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-0x260</td>\r\n			<td>-32.54e100</td>\r\n			<td>3e+26J</td>\r\n		</tr>\r\n		<tr>\r\n			<td>0x69</td>\r\n			<td>70.2E-12</td>\r\n			<td>4.53e-7j</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>Python还支持复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型</p>\r\n\r\n<hr />\r\n<h2>String（字符串）</h2>\r\n\r\n<p>Python中的字符串用单引号&nbsp;&#39;&nbsp;或双引号&nbsp;&quot;&nbsp;括起来，同时使用反斜杠&nbsp;\\&nbsp;转义特殊字符。</p>\r\n\r\n<p>字符串的截取的语法格式如下：</p>\r\n\r\n<pre>\r\n变量[头下标:尾下标]</pre>\r\n\r\n<p>索引值以 0 为开始值，-1 为从末尾的开始位置。</p>\r\n\r\n<p><img src=\"https://static.runoob.com/wp-content/uploads/123456-20200923-1.svg\" /></p>\r\n\r\n<p>加号&nbsp;+&nbsp;是字符串的连接符， 星号&nbsp;*&nbsp;表示复制当前字符串，与之结合的数字为复制的次数。实例如下：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python3<br />\r\n<br />\r\nstr&nbsp;=&nbsp;&#39;Runoob&#39;<br />\r\n<br />\r\nprint&nbsp;(str)&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 输出字符串<br />\r\nprint&nbsp;(str[0:-1])&nbsp;&nbsp; &nbsp;# 输出第一个到倒数第二个的所有字符<br />\r\nprint&nbsp;(str[0])&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;# 输出字符串第一个字符<br />\r\nprint&nbsp;(str[2:5])&nbsp;&nbsp; &nbsp;&nbsp;# 输出从第三个开始到第五个的字符<br />\r\nprint&nbsp;(str[2:])&nbsp;&nbsp; &nbsp; &nbsp;# 输出从第三个开始的后的所有字符<br />\r\nprint&nbsp;(str&nbsp;*&nbsp;2)&nbsp;&nbsp; &nbsp; &nbsp;# 输出字符串两次，也可以写成 print (2 * str)<br />\r\nprint&nbsp;(str&nbsp;+&nbsp;&quot;TEST&quot;)&nbsp;# 连接字符串</p>\r\n\r\n<p>执行以上程序会输出如下结果：</p>\r\n\r\n<pre>\r\nRunoob\r\nRunoo\r\nR\r\nnoo\r\nnoob\r\nRunoobRunoob\r\nRunoobTEST</pre>\r\n\r\n<p>Python 使用反斜杠&nbsp;\\&nbsp;转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个&nbsp;r，表示原始字符串：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;print(&#39;Ru\\noob&#39;)<br />\r\nRu<br />\r\noob<br />\r\n&gt;&gt;&gt;&nbsp;print(r&#39;Ru\\noob&#39;)<br />\r\nRu\\noob<br />\r\n&gt;&gt;&gt;</p>\r\n\r\n<p>另外，反斜杠(\\)可以作为续行符，表示下一行是上一行的延续。也可以使用&nbsp;<strong>&quot;&quot;&quot;...&quot;&quot;&quot;</strong>&nbsp;或者&nbsp;<strong>&#39;&#39;&#39;...&#39;&#39;&#39;</strong>&nbsp;跨越多行。</p>\r\n\r\n<p>注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;word&nbsp;=&nbsp;&#39;Python&#39;<br />\r\n&gt;&gt;&gt;&nbsp;print(word[0],&nbsp;word[5])<br />\r\nP n<br />\r\n&gt;&gt;&gt;&nbsp;print(word[-1],&nbsp;word[-6])<br />\r\nn P</p>\r\n\r\n<p>与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = &#39;m&#39;会导致错误。</p>\r\n\r\n<p><strong>注意：</strong></p>\r\n\r\n<ul>\r\n	<li>1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</li>\r\n	<li>2、字符串可以用+运算符连接在一起，用*运算符重复。</li>\r\n	<li>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li>\r\n	<li>4、Python中的字符串不能改变。</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>List（列表）</h2>\r\n\r\n<p>List（列表） 是 Python 中使用最频繁的数据类型。</p>\r\n\r\n<p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p>\r\n\r\n<p>列表是写在方括号&nbsp;[]&nbsp;之间、用逗号分隔开的元素列表。</p>\r\n\r\n<p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p>\r\n\r\n<p>列表截取的语法格式如下：</p>\r\n\r\n<pre>\r\n变量[头下标:尾下标]</pre>\r\n\r\n<p>索引值以&nbsp;0&nbsp;为开始值，-1&nbsp;为从末尾的开始位置。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/list_slicing1_new1.png\" /></p>\r\n\r\n<p>加号&nbsp;+&nbsp;是列表连接运算符，星号&nbsp;*&nbsp;是重复操作。如下实例：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python3<br />\r\n<br />\r\nlist&nbsp;=&nbsp;[&nbsp;&#39;abcd&#39;,&nbsp;786&nbsp;,&nbsp;2.23,&nbsp;&#39;runoob&#39;,&nbsp;70.2&nbsp;]<br />\r\ntinylist&nbsp;=&nbsp;[123,&nbsp;&#39;runoob&#39;]<br />\r\n<br />\r\nprint&nbsp;(list)&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 输出完整列表<br />\r\nprint&nbsp;(list[0])&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;# 输出列表第一个元素<br />\r\nprint&nbsp;(list[1:3])&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;# 从第二个开始输出到第三个元素<br />\r\nprint&nbsp;(list[2:])&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;# 输出从第三个元素开始的所有元素<br />\r\nprint&nbsp;(tinylist *&nbsp;2)&nbsp;&nbsp; &nbsp;# 输出两次列表<br />\r\nprint&nbsp;(list&nbsp;+ tinylist)&nbsp;# 连接列表</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n[&#39;abcd&#39;, 786, 2.23, &#39;runoob&#39;, 70.2]\r\nabcd\r\n[786, 2.23]\r\n[2.23, &#39;runoob&#39;, 70.2]\r\n[123, &#39;runoob&#39;, 123, &#39;runoob&#39;]\r\n[&#39;abcd&#39;, 786, 2.23, &#39;runoob&#39;, 70.2, 123, &#39;runoob&#39;]</pre>\r\n\r\n<p>与Python字符串不一样的是，列表中的元素是可以改变的：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;a&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6]<br />\r\n&gt;&gt;&gt;&nbsp;a[0]&nbsp;=&nbsp;9<br />\r\n&gt;&gt;&gt;&nbsp;a[2:5]&nbsp;=&nbsp;[13,&nbsp;14,&nbsp;15]<br />\r\n&gt;&gt;&gt;&nbsp;a<br />\r\n[9,&nbsp;2,&nbsp;13,&nbsp;14,&nbsp;15,&nbsp;6]<br />\r\n&gt;&gt;&gt;&nbsp;a[2:5]&nbsp;=&nbsp;[]&nbsp;&nbsp;&nbsp;# 将对应的元素值设置为 []<br />\r\n&gt;&gt;&gt;&nbsp;a<br />\r\n[9,&nbsp;2,&nbsp;6]</p>\r\n\r\n<p>List 内置了有很多方法，例如 append()、pop() 等等，这在后面会讲到。</p>\r\n\r\n<p><strong>注意：</strong></p>\r\n\r\n<ul>\r\n	<li>1、List写在方括号之间，元素用逗号隔开。</li>\r\n	<li>2、和字符串一样，list可以被索引和切片。</li>\r\n	<li>3、List可以使用+操作符进行拼接。</li>\r\n	<li>4、List中的元素是可以改变的。</li>\r\n</ul>\r\n\r\n<p>Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/py-dict-1.png\" /></p>\r\n\r\n<p>如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>def&nbsp;reverseWords(input):<br />\r\n&nbsp; &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;&nbsp;# 通过空格将字符串分隔符，把各个单词分隔为列表<br />\r\n&nbsp; &nbsp; inputWords&nbsp;=&nbsp;input.split(&quot; &quot;)<br />\r\n&nbsp;<br />\r\n&nbsp; &nbsp;&nbsp;# 翻转字符串<br />\r\n&nbsp; &nbsp;&nbsp;# 假设列表 list = [1,2,3,4], &nbsp;<br />\r\n&nbsp; &nbsp;&nbsp;# list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样)<br />\r\n&nbsp; &nbsp;&nbsp;# inputWords[-1::-1] 有三个参数<br />\r\n&nbsp; &nbsp;&nbsp;# 第一个参数 -1 表示最后一个元素<br />\r\n&nbsp; &nbsp;&nbsp;# 第二个参数为空，表示移动到列表末尾<br />\r\n&nbsp; &nbsp;&nbsp;# 第三个参数为步长，-1 表示逆向<br />\r\n&nbsp; &nbsp; inputWords=inputWords[-1::-1]<br />\r\n&nbsp;<br />\r\n&nbsp; &nbsp;&nbsp;# 重新组合字符串<br />\r\n&nbsp; &nbsp; output&nbsp;=&nbsp;&#39; &#39;.join(inputWords)<br />\r\n&nbsp; &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;&nbsp;return&nbsp;output<br />\r\n&nbsp;<br />\r\nif&nbsp;__name__&nbsp;==&nbsp;&quot;__main__&quot;:<br />\r\n&nbsp; &nbsp;&nbsp;input&nbsp;=&nbsp;&#39;I like runoob&#39;<br />\r\n&nbsp; &nbsp; rw&nbsp;=&nbsp;reverseWords(input)<br />\r\n&nbsp; &nbsp;&nbsp;print(rw)</p>\r\n\r\n<p>输出结果为：</p>\r\n\r\n<pre>\r\nrunoob like I</pre>\r\n\r\n<hr />\r\n<h2>Tuple（元组）</h2>\r\n\r\n<p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号&nbsp;()&nbsp;里，元素之间用逗号隔开。</p>\r\n\r\n<p>元组中的元素类型也可以不相同：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python3<br />\r\n<br />\r\ntuple&nbsp;=&nbsp;(&nbsp;&#39;abcd&#39;,&nbsp;786&nbsp;,&nbsp;2.23,&nbsp;&#39;runoob&#39;,&nbsp;70.2&nbsp;&nbsp;)<br />\r\ntinytuple&nbsp;=&nbsp;(123,&nbsp;&#39;runoob&#39;)<br />\r\n<br />\r\nprint&nbsp;(tuple)&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;# 输出完整元组<br />\r\nprint&nbsp;(tuple[0])&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 输出元组的第一个元素<br />\r\nprint&nbsp;(tuple[1:3])&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;# 输出从第二个元素开始到第三个元素<br />\r\nprint&nbsp;(tuple[2:])&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;# 输出从第三个元素开始的所有元素<br />\r\nprint&nbsp;(tinytuple *&nbsp;2)&nbsp;&nbsp; &nbsp;&nbsp;# 输出两次元组<br />\r\nprint&nbsp;(tuple&nbsp;+ tinytuple)&nbsp;# 连接元组</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n(&#39;abcd&#39;, 786, 2.23, &#39;runoob&#39;, 70.2)\r\nabcd\r\n(786, 2.23)\r\n(2.23, &#39;runoob&#39;, 70.2)\r\n(123, &#39;runoob&#39;, 123, &#39;runoob&#39;)\r\n(&#39;abcd&#39;, 786, 2.23, &#39;runoob&#39;, 70.2, 123, &#39;runoob&#39;)</pre>\r\n\r\n<p>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。</p>\r\n\r\n<p>其实，可以把字符串看作一种特殊的元组。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;tup&nbsp;=&nbsp;(1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6)<br />\r\n&gt;&gt;&gt;&nbsp;print(tup[0])<br />\r\n1<br />\r\n&gt;&gt;&gt;&nbsp;print(tup[1:5])<br />\r\n(2,&nbsp;3,&nbsp;4,&nbsp;5)<br />\r\n&gt;&gt;&gt;&nbsp;tup[0]&nbsp;=&nbsp;11&nbsp;&nbsp;# 修改元组元素的操作是非法的<br />\r\nTraceback&nbsp;(most recent call last):<br />\r\n&nbsp; File&nbsp;&quot;&lt;stdin&gt;&quot;,&nbsp;line&nbsp;1,&nbsp;in&nbsp;&lt;module&gt;<br />\r\nTypeError:&nbsp;&#39;tuple&#39;&nbsp;object&nbsp;does&nbsp;not&nbsp;support item assignment<br />\r\n&gt;&gt;&gt;</p>\r\n\r\n<p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p>\r\n\r\n<p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</p>\r\n\r\n<pre>\r\ntup1 = ()    # 空元组\r\ntup2 = (20,) # 一个元素，需要在元素后添加逗号</pre>\r\n\r\n<p>string、list 和 tuple 都属于 sequence（序列）。</p>\r\n\r\n<p><strong>注意：</strong></p>\r\n\r\n<ul>\r\n	<li>1、与字符串一样，元组的元素不能修改。</li>\r\n	<li>2、元组也可以被索引和切片，方法一样。</li>\r\n	<li>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。</li>\r\n	<li>4、元组也可以使用+操作符进行拼接。</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>Set（集合）</h2>\r\n\r\n<p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p>\r\n\r\n<p>基本功能是进行成员关系测试和删除重复元素。</p>\r\n\r\n<p>可以使用大括号&nbsp;{ }&nbsp;或者&nbsp;set()&nbsp;函数创建集合，注意：创建一个空集合必须用&nbsp;set()&nbsp;而不是&nbsp;{ }，因为&nbsp;{ }&nbsp;是用来创建一个空字典。</p>\r\n\r\n<p>创建格式：</p>\r\n\r\n<pre>\r\nparame = {value01,value02,...}\r\n或者\r\nset(value)</pre>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python3<br />\r\n<br />\r\nsites&nbsp;=&nbsp;{&#39;Google&#39;,&nbsp;&#39;Taobao&#39;,&nbsp;&#39;Runoob&#39;,&nbsp;&#39;Facebook&#39;,&nbsp;&#39;Zhihu&#39;,&nbsp;&#39;Baidu&#39;}<br />\r\n<br />\r\nprint(sites)&nbsp;&nbsp;&nbsp;# 输出集合，重复的元素被自动去掉<br />\r\n<br />\r\n# 成员测试<br />\r\nif&nbsp;&#39;Runoob&#39;&nbsp;in&nbsp;sites :<br />\r\n&nbsp; &nbsp;&nbsp;print(&#39;Runoob 在集合中&#39;)<br />\r\nelse&nbsp;:<br />\r\n&nbsp; &nbsp;&nbsp;print(&#39;Runoob 不在集合中&#39;)<br />\r\n<br />\r\n<br />\r\n# set可以进行集合运算<br />\r\na&nbsp;=&nbsp;set(&#39;abracadabra&#39;)<br />\r\nb&nbsp;=&nbsp;set(&#39;alacazam&#39;)<br />\r\n<br />\r\nprint(a)<br />\r\n<br />\r\nprint(a - b)&nbsp;&nbsp; &nbsp;&nbsp;# a 和 b 的差集<br />\r\n<br />\r\nprint(a | b)&nbsp;&nbsp; &nbsp;&nbsp;# a 和 b 的并集<br />\r\n<br />\r\nprint(a &amp; b)&nbsp;&nbsp; &nbsp;&nbsp;# a 和 b 的交集<br />\r\n<br />\r\nprint(a ^ b)&nbsp;&nbsp; &nbsp;&nbsp;# a 和 b 中不同时存在的元素</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n{&#39;Zhihu&#39;, &#39;Baidu&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;, &#39;Google&#39;, &#39;Facebook&#39;}\r\nRunoob 在集合中\r\n{&#39;b&#39;, &#39;c&#39;, &#39;a&#39;, &#39;r&#39;, &#39;d&#39;}\r\n{&#39;r&#39;, &#39;b&#39;, &#39;d&#39;}\r\n{&#39;b&#39;, &#39;c&#39;, &#39;a&#39;, &#39;z&#39;, &#39;m&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;}\r\n{&#39;c&#39;, &#39;a&#39;}\r\n{&#39;z&#39;, &#39;b&#39;, &#39;m&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;}</pre>\r\n\r\n<hr />\r\n<h2>Dictionary（字典）</h2>\r\n\r\n<p>字典（dictionary）是Python中另一个非常有用的内置数据类型。</p>\r\n\r\n<p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>\r\n\r\n<p>字典是一种映射类型，字典用&nbsp;{ }&nbsp;标识，它是一个无序的&nbsp;<strong>键(key) : 值(value)</strong>&nbsp;的集合。</p>\r\n\r\n<p>键(key)必须使用不可变类型。</p>\r\n\r\n<p>在同一个字典中，键(key)必须是唯一的。</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python3<br />\r\n<br />\r\ndict&nbsp;=&nbsp;{}<br />\r\ndict[&#39;one&#39;]&nbsp;=&nbsp;&quot;1 - 菜鸟教程&quot;<br />\r\ndict[2]&nbsp;&nbsp; &nbsp;&nbsp;=&nbsp;&quot;2 - 菜鸟工具&quot;<br />\r\n<br />\r\ntinydict&nbsp;=&nbsp;{&#39;name&#39;:&nbsp;&#39;runoob&#39;,&#39;code&#39;:1,&nbsp;&#39;site&#39;:&nbsp;&#39;www.runoob.com&#39;}<br />\r\n<br />\r\n<br />\r\nprint&nbsp;(dict[&#39;one&#39;])&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;# 输出键为 &#39;one&#39; 的值<br />\r\nprint&nbsp;(dict[2])&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;# 输出键为 2 的值<br />\r\nprint&nbsp;(tinydict)&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 输出完整的字典<br />\r\nprint&nbsp;(tinydict.keys())&nbsp;&nbsp;&nbsp;# 输出所有键<br />\r\nprint&nbsp;(tinydict.values())&nbsp;# 输出所有值</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n1 - 菜鸟教程\r\n2 - 菜鸟工具\r\n{&#39;name&#39;: &#39;runoob&#39;, &#39;code&#39;: 1, &#39;site&#39;: &#39;www.runoob.com&#39;}\r\ndict_keys([&#39;name&#39;, &#39;code&#39;, &#39;site&#39;])\r\ndict_values([&#39;runoob&#39;, 1, &#39;www.runoob.com&#39;])</pre>\r\n\r\n<p>构造函数 dict() 可以直接从键值对序列中构建字典如下：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;dict([(&#39;Runoob&#39;,&nbsp;1),&nbsp;(&#39;Google&#39;,&nbsp;2),&nbsp;(&#39;Taobao&#39;,&nbsp;3)])<br />\r\n{&#39;Runoob&#39;:&nbsp;1,&nbsp;&#39;Google&#39;:&nbsp;2,&nbsp;&#39;Taobao&#39;:&nbsp;3}<br />\r\n&gt;&gt;&gt;&nbsp;{x: x**2&nbsp;for&nbsp;x&nbsp;in&nbsp;(2,&nbsp;4,&nbsp;6)}<br />\r\n{2:&nbsp;4,&nbsp;4:&nbsp;16,&nbsp;6:&nbsp;36}<br />\r\n&gt;&gt;&gt;&nbsp;dict(Runoob=1,&nbsp;Google=2,&nbsp;Taobao=3)<br />\r\n{&#39;Runoob&#39;:&nbsp;1,&nbsp;&#39;Google&#39;:&nbsp;2,&nbsp;&#39;Taobao&#39;:&nbsp;3}<br />\r\n&gt;&gt;&gt;<br />\r\n&nbsp;</p>\r\n\r\n<p>另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。</p>\r\n\r\n<p><strong>注意：</strong></p>\r\n\r\n<ul>\r\n	<li>1、字典是一种映射类型，它的元素是键值对。</li>\r\n	<li>2、字典的关键字必须为不可变类型，且不能重复。</li>\r\n	<li>3、创建空字典使用&nbsp;<strong>{ }</strong>。</li>\r\n</ul>\r\n\r\n<hr />\r\n<h2>Python数据类型转换</h2>\r\n\r\n<p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p>\r\n\r\n<p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>函数</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python-func-int.html\" rel=\"noopener noreferrer\" target=\"_blank\">int(x [,base])</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将x转换为一个整数</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python-func-float.html\" rel=\"noopener noreferrer\" target=\"_blank\">float(x)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将x转换到一个浮点数</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python-func-complex.html\" rel=\"noopener noreferrer\" target=\"_blank\">complex(real [,imag])</a></p>\r\n			</td>\r\n			<td>\r\n			<p>创建一个复数</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python-func-str.html\" rel=\"noopener noreferrer\" target=\"_blank\">str(x)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将对象 x 转换为字符串</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python-func-repr.html\" rel=\"noopener noreferrer\" target=\"_blank\">repr(x)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将对象 x 转换为表达式字符串</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python-func-eval.html\" rel=\"noopener noreferrer\" target=\"_blank\">eval(str)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>用来计算在字符串中的有效Python表达式,并返回一个对象</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-func-tuple.html\" rel=\"noopener noreferrer\" target=\"_blank\">tuple(s)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将序列 s 转换为一个元组</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-att-list-list.html\" rel=\"noopener noreferrer\" target=\"_blank\">list(s)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将序列 s 转换为一个列表</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python-func-set.html\" rel=\"noopener noreferrer\" target=\"_blank\">set(s)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>转换为可变集合</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python-func-dict.html\" rel=\"noopener noreferrer\" target=\"_blank\">dict(d)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>创建一个字典。d 必须是一个 (key, value)元组序列。</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python-func-frozenset.html\" rel=\"noopener noreferrer\" target=\"_blank\">frozenset(s)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>转换为不可变集合</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python-func-chr.html\" rel=\"noopener noreferrer\" target=\"_blank\">chr(x)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将一个整数转换为一个字符</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python-func-ord.html\" rel=\"noopener noreferrer\" target=\"_blank\">ord(x)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将一个字符转换为它的整数值</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python-func-hex.html\" rel=\"noopener noreferrer\" target=\"_blank\">hex(x)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将一个整数转换为一个十六进制字符串</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python-func-oct.html\" rel=\"noopener noreferrer\" target=\"_blank\">oct(x)</a></p>\r\n			</td>\r\n			<td>\r\n			<p>将一个整数转换为一个八进制字符串</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 0, '2021-12-14 02:48:54.546556', '2021-12-14 02:48:54.551561', 8, 1);
INSERT INTO `tb_article` VALUES (88, 'article/20211214/python3_OHAixIb.png', 'Python3 解释器', 'Python3 解释器', 'Python3 解释器', '<h1>Python3 解释器</h1>\r\n\r\n<p>Linux/Unix的系统上，一般默认的 python 版本为 2.x，我们可以将 python3.x 安装在&nbsp;<strong>/usr/local/python3</strong>&nbsp;目录中。</p>\r\n\r\n<p>安装完成后，我们可以将路径&nbsp;<strong>/usr/local/python3/bin</strong>&nbsp;添加到您的 Linux/Unix 操作系统的环境变量中，这样您就可以通过 shell 终端输入下面的命令来启动 Python3 。</p>\r\n\r\n<pre>\r\n$ PATH=$PATH:/usr/local/python3/bin/python3    # 设置环境变量\r\n$ python3 --version\r\nPython 3.4.0</pre>\r\n\r\n<p>在Window系统下你可以通过以下命令来设置Python的环境变量，假设你的Python安装在 C:\\Python34 下:</p>\r\n\r\n<pre>\r\nset path=%path%;C:\\python34</pre>\r\n\r\n<hr />\r\n<h2>交互式编程</h2>\r\n\r\n<p>我们可以在命令提示符中输入&quot;Python&quot;命令来启动Python解释器：</p>\r\n\r\n<pre>\r\n$ python3</pre>\r\n\r\n<p>执行以上命令后，出现如下窗口信息：</p>\r\n\r\n<pre>\r\n$ python3\r\nPython 3.4.0 (default, Apr 11 2014, 13:05:11) \r\n[GCC 4.8.2] on linux\r\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\r\n&gt;&gt;&gt; </pre>\r\n\r\n<p>在 python 提示符中输入以下语句，然后按回车键查看运行效果：</p>\r\n\r\n<pre>\r\nprint (&quot;Hello, Python!&quot;);</pre>\r\n\r\n<p>以上命令执行结果如下：</p>\r\n\r\n<pre>\r\nHello, Python!</pre>\r\n\r\n<p>当键入一个多行结构时，续行是必须的。我们可以看下如下 if 语句：</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; flag = True\r\n&gt;&gt;&gt; if flag :\r\n...     print(&quot;flag 条件为 True!&quot;)\r\n... \r\nflag 条件为 True!</pre>\r\n\r\n<hr />\r\n<h2>脚本式编程</h2>\r\n\r\n<p>将如下代码拷贝至&nbsp;<strong>hello.py</strong>文件中：</p>\r\n\r\n<pre>\r\nprint (&quot;Hello, Python!&quot;);</pre>\r\n\r\n<p>通过以下命令执行该脚本：</p>\r\n\r\n<pre>\r\npython3 hello.py</pre>\r\n\r\n<p>输出结果为：</p>\r\n\r\n<pre>\r\nHello, Python!</pre>\r\n\r\n<p>在Linux/Unix系统中，你可以在脚本顶部添加以下命令让Python脚本可以像SHELL脚本一样可直接执行：</p>\r\n\r\n<pre>\r\n#! /usr/bin/env python3</pre>\r\n\r\n<p>然后修改脚本权限，使其有执行权限，命令如下：</p>\r\n\r\n<pre>\r\n$ chmod +x hello.py</pre>\r\n\r\n<p>执行以下命令：</p>\r\n\r\n<pre>\r\n./hello.py</pre>\r\n\r\n<p>输出结果为：</p>\r\n\r\n<pre>\r\nHello, Python!</pre>\r\n', 0, 0, '2021-12-14 02:49:34.521340', '2021-12-14 02:49:34.525334', 8, 1);
INSERT INTO `tb_article` VALUES (89, 'article/20211214/python3_6kkBKcz.png', 'Python3 注释', 'Python3 注释', 'Python3 注释', '<h1>Python3 注释</h1>\r\n\r\n<p>确保对模块, 函数, 方法和行内注释使用正确的风格</p>\r\n\r\n<p>Python中的注释有单行注释和多行注释：</p>\r\n\r\n<p>Python中单行注释以&nbsp;#&nbsp;开头，例如：：</p>\r\n\r\n<p># 这是一个注释 print(&quot;Hello, World!&quot;)</p>\r\n\r\n<p>多行注释用三个单引号&nbsp;&#39;&#39;&#39;&nbsp;或者三个双引号&nbsp;&quot;&quot;&quot;&nbsp;将注释括起来，例如:</p>\r\n\r\n<h3>1、单引号（&#39;&#39;&#39;）</h3>\r\n\r\n<p>#!/usr/bin/python3 &#39;&#39;&#39; 这是多行注释，用三个单引号 这是多行注释，用三个单引号 这是多行注释，用三个单引号 &#39;&#39;&#39; print(&quot;Hello, World!&quot;)</p>\r\n\r\n<h3>2、双引号（&quot;&quot;&quot;）</h3>\r\n\r\n<p>#!/usr/bin/python3 &quot;&quot;&quot; 这是多行注释，用三个双引号 这是多行注释，用三个双引号 这是多行注释，用三个双引号 &quot;&quot;&quot; print(&quot;Hello, World!&quot;)</p>\r\n', 0, 0, '2021-12-14 02:49:59.483837', '2021-12-14 02:49:59.486842', 8, 1);
INSERT INTO `tb_article` VALUES (90, 'article/20211214/python3_sOYtfbK.png', 'Python3 运算符', 'Python3 运算符', 'Python3 运算符', '<h1>Python3&nbsp;运算符</h1>\r\n\r\n<hr />\r\n<h2>什么是运算符？</h2>\r\n\r\n<p>本章节主要说明 Python 的运算符。</p>\r\n\r\n<p>举个简单的例子:</p>\r\n\r\n<pre>\r\n4 + 5 = 9</pre>\r\n\r\n<p>例子中，<strong>4</strong>&nbsp;和&nbsp;<strong>5</strong>&nbsp;被称为<strong>操作数</strong>，+&nbsp;称为<strong>运算符</strong>。</p>\r\n\r\n<p>Python 语言支持以下类型的运算符:</p>\r\n\r\n<ul>\r\n	<li><a href=\"https://www.runoob.com/python3/python3-basic-operators.html#ysf1\">算术运算符</a></li>\r\n	<li><a href=\"https://www.runoob.com/python3/python3-basic-operators.html#ysf2\">比较（关系）运算符</a></li>\r\n	<li><a href=\"https://www.runoob.com/python3/python3-basic-operators.html#ysf3\">赋值运算符</a></li>\r\n	<li><a href=\"https://www.runoob.com/python3/python3-basic-operators.html#ysf4\">逻辑运算符</a></li>\r\n	<li><a href=\"https://www.runoob.com/python3/python3-basic-operators.html#ysf5\">位运算符</a></li>\r\n	<li><a href=\"https://www.runoob.com/python3/python3-basic-operators.html#ysf6\">成员运算符</a></li>\r\n	<li><a href=\"https://www.runoob.com/python3/python3-basic-operators.html#ysf7\">身份运算符</a></li>\r\n	<li><a href=\"https://www.runoob.com/python3/python3-basic-operators.html#ysf8\">运算符优先级</a></li>\r\n</ul>\r\n\r\n<p>接下来让我们一个个来学习Python的运算符。</p>\r\n\r\n<hr />\r\n<h2>Python算术运算符</h2>\r\n\r\n<p>以下假设变量&nbsp;a=10，变量&nbsp;b=21：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>+</td>\r\n			<td>加 - 两个对象相加</td>\r\n			<td>a + b 输出结果 31</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-</td>\r\n			<td>减 - 得到负数或是一个数减去另一个数</td>\r\n			<td>a - b 输出结果 -11</td>\r\n		</tr>\r\n		<tr>\r\n			<td>*</td>\r\n			<td>乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>\r\n			<td>a * b 输出结果 210</td>\r\n		</tr>\r\n		<tr>\r\n			<td>/</td>\r\n			<td>除 - x 除以 y</td>\r\n			<td>b / a 输出结果 2.1</td>\r\n		</tr>\r\n		<tr>\r\n			<td>%</td>\r\n			<td>取模 - 返回除法的余数</td>\r\n			<td>b % a 输出结果 1</td>\r\n		</tr>\r\n		<tr>\r\n			<td>**</td>\r\n			<td>幂 - 返回x的y次幂</td>\r\n			<td>a**b 为10的21次方</td>\r\n		</tr>\r\n		<tr>\r\n			<td>//</td>\r\n			<td>取整除 - 向下取接近商的整数</td>\r\n			<td>\r\n			<pre>\r\n&gt;&gt;&gt; 9//2\r\n4\r\n&gt;&gt;&gt; -9//2\r\n-5</pre>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>以下实例演示了Python所有算术运算符的操作：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 a = 21 b = 10 c = 0 c = a + b print (&quot;1 - c 的值为：&quot;, c) c = a - b print (&quot;2 - c 的值为：&quot;, c) c = a * b print (&quot;3 - c 的值为：&quot;, c) c = a / b print (&quot;4 - c 的值为：&quot;, c) c = a % b print (&quot;5 - c 的值为：&quot;, c) # 修改变量 a 、b 、c a = 2 b = 3 c = a**b print (&quot;6 - c 的值为：&quot;, c) a = 10 b = 5 c = a//b print (&quot;7 - c 的值为：&quot;, c)</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n1 - c 的值为： 31\r\n2 - c 的值为： 11\r\n3 - c 的值为： 210\r\n4 - c 的值为： 2.1\r\n5 - c 的值为： 1\r\n6 - c 的值为： 8\r\n7 - c 的值为： 2</pre>\r\n\r\n<hr />\r\n<h2>Python比较运算符</h2>\r\n\r\n<p>以下假设变量a为10，变量b为20：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>==</td>\r\n			<td>等于 - 比较对象是否相等</td>\r\n			<td>(a == b) 返回 False。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>!=</td>\r\n			<td>不等于 - 比较两个对象是否不相等</td>\r\n			<td>(a != b) 返回 True。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;</td>\r\n			<td>大于 - 返回x是否大于y</td>\r\n			<td>(a &gt; b) 返回 False。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;</td>\r\n			<td>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td>\r\n			<td>(a &lt; b) 返回 True。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;=</td>\r\n			<td>大于等于 - 返回x是否大于等于y。</td>\r\n			<td>(a &gt;= b) 返回 False。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;=</td>\r\n			<td>小于等于 - 返回x是否小于等于y。</td>\r\n			<td>(a &lt;= b) 返回 True。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>以下实例演示了Python所有比较运算符的操作：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 a = 21 b = 10 c = 0 if ( a == b ): print (&quot;1 - a 等于 b&quot;) else: print (&quot;1 - a 不等于 b&quot;) if ( a != b ): print (&quot;2 - a 不等于 b&quot;) else: print (&quot;2 - a 等于 b&quot;) if ( a &lt; b ): print (&quot;3 - a 小于 b&quot;) else: print (&quot;3 - a 大于等于 b&quot;) if ( a &gt; b ): print (&quot;4 - a 大于 b&quot;) else: print (&quot;4 - a 小于等于 b&quot;) # 修改变量 a 和 b 的值 a = 5 b = 20 if ( a &lt;= b ): print (&quot;5 - a 小于等于 b&quot;) else: print (&quot;5 - a 大于 b&quot;) if ( b &gt;= a ): print (&quot;6 - b 大于等于 a&quot;) else: print (&quot;6 - b 小于 a&quot;)</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n1 - a 不等于 b\r\n2 - a 不等于 b\r\n3 - a 大于等于 b\r\n4 - a 大于 b\r\n5 - a 小于等于 b\r\n6 - b 大于等于 a</pre>\r\n\r\n<hr />\r\n<h2>Python赋值运算符</h2>\r\n\r\n<p>以下假设变量a为10，变量b为20：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>=</td>\r\n			<td>简单的赋值运算符</td>\r\n			<td>c = a + b 将 a + b 的运算结果赋值为 c</td>\r\n		</tr>\r\n		<tr>\r\n			<td>+=</td>\r\n			<td>加法赋值运算符</td>\r\n			<td>c += a 等效于 c = c + a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-=</td>\r\n			<td>减法赋值运算符</td>\r\n			<td>c -= a 等效于 c = c - a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>*=</td>\r\n			<td>乘法赋值运算符</td>\r\n			<td>c *= a 等效于 c = c * a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>/=</td>\r\n			<td>除法赋值运算符</td>\r\n			<td>c /= a 等效于 c = c / a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>%=</td>\r\n			<td>取模赋值运算符</td>\r\n			<td>c %= a 等效于 c = c % a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>**=</td>\r\n			<td>幂赋值运算符</td>\r\n			<td>c **= a 等效于 c = c ** a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>//=</td>\r\n			<td>取整除赋值运算符</td>\r\n			<td>c //= a 等效于 c = c // a</td>\r\n		</tr>\r\n		<tr>\r\n			<td>:=</td>\r\n			<td>海象运算符，可在表达式内部为变量赋值。<strong>Python3.8 版本新增运算符</strong>。</td>\r\n			<td>\r\n			<p>在这个示例中，赋值表达式可以避免调用 len() 两次:</p>\r\n\r\n			<pre>\r\nif (n := len(a)) &gt; 10:\r\n    print(f&quot;List is too long ({n} elements, expected &lt;= 10)&quot;)</pre>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>以下实例演示了Python所有赋值运算符的操作：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 a = 21 b = 10 c = 0 c = a + b print (&quot;1 - c 的值为：&quot;, c) c += a print (&quot;2 - c 的值为：&quot;, c) c *= a print (&quot;3 - c 的值为：&quot;, c) c /= a print (&quot;4 - c 的值为：&quot;, c) c = 2 c %= a print (&quot;5 - c 的值为：&quot;, c) c **= a print (&quot;6 - c 的值为：&quot;, c) c //= a print (&quot;7 - c 的值为：&quot;, c)</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n1 - c 的值为： 31\r\n2 - c 的值为： 52\r\n3 - c 的值为： 1092\r\n4 - c 的值为： 52.0\r\n5 - c 的值为： 2\r\n6 - c 的值为： 2097152\r\n7 - c 的值为： 99864</pre>\r\n\r\n<hr />\r\n<h2>Python位运算符</h2>\r\n\r\n<p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p>\r\n\r\n<p>下表中变量 a 为 60，b 为 13二进制格式如下：</p>\r\n\r\n<pre>\r\na = 0011 1100\r\n\r\nb = 0000 1101\r\n\r\n-----------------\r\n\r\na&amp;b = 0000 1100\r\n\r\na|b = 0011 1101\r\n\r\na^b = 0011 0001\r\n\r\n~a  = 1100 0011</pre>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp;</td>\r\n			<td>按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>\r\n			<td>(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td>\r\n		</tr>\r\n		<tr>\r\n			<td>|</td>\r\n			<td>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td>\r\n			<td>(a | b) 输出结果 61 ，二进制解释： 0011 1101</td>\r\n		</tr>\r\n		<tr>\r\n			<td>^</td>\r\n			<td>按位异或运算符：当两对应的二进位相异时，结果为1</td>\r\n			<td>(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td>\r\n		</tr>\r\n		<tr>\r\n			<td>~</td>\r\n			<td>按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x&nbsp;类似于&nbsp;-x-1</td>\r\n			<td>(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;&lt;</td>\r\n			<td>左移动运算符：运算数的各二进位全部左移若干位，由&quot;&lt;&lt;&quot;右边的数指定移动的位数，高位丢弃，低位补0。</td>\r\n			<td>a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt;</td>\r\n			<td>右移动运算符：把&quot;&gt;&gt;&quot;左边的运算数的各二进位全部右移若干位，&quot;&gt;&gt;&quot;右边的数指定移动的位数</td>\r\n			<td>a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>以下实例演示了Python所有位运算符的操作：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 a = 60 # 60 = 0011 1100 b = 13 # 13 = 0000 1101 c = 0 c = a &amp; b # 12 = 0000 1100 print (&quot;1 - c 的值为：&quot;, c) c = a | b # 61 = 0011 1101 print (&quot;2 - c 的值为：&quot;, c) c = a ^ b # 49 = 0011 0001 print (&quot;3 - c 的值为：&quot;, c) c = ~a # -61 = 1100 0011 print (&quot;4 - c 的值为：&quot;, c) c = a &lt;&lt; 2 # 240 = 1111 0000 print (&quot;5 - c 的值为：&quot;, c) c = a &gt;&gt; 2 # 15 = 0000 1111 print (&quot;6 - c 的值为：&quot;, c)</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n1 - c 的值为： 12\r\n2 - c 的值为： 61\r\n3 - c 的值为： 49\r\n4 - c 的值为： -61\r\n5 - c 的值为： 240\r\n6 - c 的值为： 15</pre>\r\n\r\n<hr />\r\n<h2>Python逻辑运算符</h2>\r\n\r\n<p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>逻辑表达式</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>and</td>\r\n			<td>x and y</td>\r\n			<td>布尔&quot;与&quot; - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td>\r\n			<td>(a and b) 返回 20。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>or</td>\r\n			<td>x or y</td>\r\n			<td>布尔&quot;或&quot; - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td>\r\n			<td>(a or b) 返回 10。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>not</td>\r\n			<td>not x</td>\r\n			<td>布尔&quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>\r\n			<td>not(a and b) 返回 False</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 a = 10 b = 20 if ( a and b ): print (&quot;1 - 变量 a 和 b 都为 true&quot;) else: print (&quot;1 - 变量 a 和 b 有一个不为 true&quot;) if ( a or b ): print (&quot;2 - 变量 a 和 b 都为 true，或其中一个变量为 true&quot;) else: print (&quot;2 - 变量 a 和 b 都不为 true&quot;) # 修改变量 a 的值 a = 0 if ( a and b ): print (&quot;3 - 变量 a 和 b 都为 true&quot;) else: print (&quot;3 - 变量 a 和 b 有一个不为 true&quot;) if ( a or b ): print (&quot;4 - 变量 a 和 b 都为 true，或其中一个变量为 true&quot;) else: print (&quot;4 - 变量 a 和 b 都不为 true&quot;) if not( a and b ): print (&quot;5 - 变量 a 和 b 都为 false，或其中一个变量为 false&quot;) else: print (&quot;5 - 变量 a 和 b 都为 true&quot;)</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n1 - 变量 a 和 b 都为 true\r\n2 - 变量 a 和 b 都为 true，或其中一个变量为 true\r\n3 - 变量 a 和 b 有一个不为 true\r\n4 - 变量 a 和 b 都为 true，或其中一个变量为 true\r\n5 - 变量 a 和 b 都为 false，或其中一个变量为 false</pre>\r\n\r\n<hr />\r\n<h2>Python成员运算符</h2>\r\n\r\n<p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>in</td>\r\n			<td>如果在指定的序列中找到值返回 True，否则返回 False。</td>\r\n			<td>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>not in</td>\r\n			<td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td>\r\n			<td>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>以下实例演示了Python所有成员运算符的操作：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 a = 10 b = 20 list = [1, 2, 3, 4, 5 ] if ( a in list ): print (&quot;1 - 变量 a 在给定的列表中 list 中&quot;) else: print (&quot;1 - 变量 a 不在给定的列表中 list 中&quot;) if ( b not in list ): print (&quot;2 - 变量 b 不在给定的列表中 list 中&quot;) else: print (&quot;2 - 变量 b 在给定的列表中 list 中&quot;) # 修改变量 a 的值 a = 2 if ( a in list ): print (&quot;3 - 变量 a 在给定的列表中 list 中&quot;) else: print (&quot;3 - 变量 a 不在给定的列表中 list 中&quot;)</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n1 - 变量 a 不在给定的列表中 list 中\r\n2 - 变量 b 不在给定的列表中 list 中\r\n3 - 变量 a 在给定的列表中 list 中</pre>\r\n\r\n<hr />\r\n<h2>Python身份运算符</h2>\r\n\r\n<p>身份运算符用于比较两个对象的存储单元</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>is</td>\r\n			<td>is 是判断两个标识符是不是引用自一个对象</td>\r\n			<td><strong>x is y</strong>, 类似&nbsp;<strong>id(x) == id(y)</strong>&nbsp;, 如果引用的是同一个对象则返回 True，否则返回 False</td>\r\n		</tr>\r\n		<tr>\r\n			<td>is not</td>\r\n			<td>is not 是判断两个标识符是不是引用自不同对象</td>\r\n			<td><strong>x is not y</strong>&nbsp;， 类似&nbsp;<strong>id(a) != id(b)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>注：</strong>&nbsp;<a href=\"https://www.runoob.com/python/python-func-id.html\" rel=\"noopener noreferrer\" target=\"_blank\">id()</a>&nbsp;函数用于获取对象内存地址。</p>\r\n\r\n<p>以下实例演示了Python所有身份运算符的操作：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 a = 20 b = 20 if ( a is b ): print (&quot;1 - a 和 b 有相同的标识&quot;) else: print (&quot;1 - a 和 b 没有相同的标识&quot;) if ( id(a) == id(b) ): print (&quot;2 - a 和 b 有相同的标识&quot;) else: print (&quot;2 - a 和 b 没有相同的标识&quot;) # 修改变量 b 的值 b = 30 if ( a is b ): print (&quot;3 - a 和 b 有相同的标识&quot;) else: print (&quot;3 - a 和 b 没有相同的标识&quot;) if ( a is not b ): print (&quot;4 - a 和 b 没有相同的标识&quot;) else: print (&quot;4 - a 和 b 有相同的标识&quot;)</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n1 - a 和 b 有相同的标识\r\n2 - a 和 b 有相同的标识\r\n3 - a 和 b 没有相同的标识\r\n4 - a 和 b 没有相同的标识</pre>\r\n\r\n<blockquote>\r\n<p>is 与 == 区别：</p>\r\n\r\n<p>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</p>\r\n\r\n<p>&gt;&gt;&gt;a = [1, 2, 3] &gt;&gt;&gt; b = a &gt;&gt;&gt; b is a True &gt;&gt;&gt; b == a True &gt;&gt;&gt; b = a[:] &gt;&gt;&gt; b is a False &gt;&gt;&gt; b == a True</p>\r\n</blockquote>\r\n\r\n<hr />\r\n<h2>Python运算符优先级</h2>\r\n\r\n<p>以下表格列出了从最高到最低优先级的所有运算符：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>运算符</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>**</td>\r\n			<td>指数 (最高优先级)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>~ + -</td>\r\n			<td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>* / % //</td>\r\n			<td>乘，除，求余数和取整除</td>\r\n		</tr>\r\n		<tr>\r\n			<td>+ -</td>\r\n			<td>加法减法</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt; &lt;&lt;</td>\r\n			<td>右移，左移运算符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp;</td>\r\n			<td>位 &#39;AND&#39;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>^ |</td>\r\n			<td>位运算符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;= &lt; &gt; &gt;=</td>\r\n			<td>比较运算符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>== !=</td>\r\n			<td>等于运算符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>= %= /= //= -= += *= **=</td>\r\n			<td>赋值运算符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>is is not</td>\r\n			<td>身份运算符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>in not in</td>\r\n			<td>成员运算符</td>\r\n		</tr>\r\n		<tr>\r\n			<td>not and or</td>\r\n			<td>逻辑运算符</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>以下实例演示了Python所有运算符优先级的操作：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 a = 20 b = 10 c = 15 d = 5 e = 0 e = (a + b) * c / d #( 30 * 15 ) / 5 print (&quot;(a + b) * c / d 运算结果为：&quot;, e) e = ((a + b) * c) / d # (30 * 15 ) / 5 print (&quot;((a + b) * c) / d 运算结果为：&quot;, e) e = (a + b) * (c / d) # (30) * (15/5) print (&quot;(a + b) * (c / d) 运算结果为：&quot;, e) e = a + (b * c) / d # 20 + (150/5) print (&quot;a + (b * c) / d 运算结果为：&quot;, e)</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n(a + b) * c / d 运算结果为： 90.0\r\n((a + b) * c) / d 运算结果为： 90.0\r\n(a + b) * (c / d) 运算结果为： 90.0\r\na + (b * c) / d 运算结果为： 50.0</pre>\r\n\r\n<p>and 拥有更高优先级:</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>x = True y = False z = False if x or y and z: print(&quot;yes&quot;) else: print(&quot;no&quot;)</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\nyes</pre>\r\n\r\n<blockquote><strong>注意：</strong>Pyhton3 已不支持 &lt;&gt; 运算符，可以使用 != 代替，如果你一定要使用这种比较运算符，可以使用以下的方式：\r\n\r\n<pre>\r\n&gt;&gt;&gt; from __future__ import barry_as_FLUFL\r\n&gt;&gt;&gt; 1 &lt;&gt; 2\r\nTrue</pre>\r\n</blockquote>\r\n', 0, 0, '2021-12-14 02:50:59.015054', '2021-12-14 02:50:59.019056', 8, 1);
INSERT INTO `tb_article` VALUES (91, 'article/20211214/python3_z4Cchmo.png', 'Python3 数字(Number)', 'Python3 数字(Number)', 'Python3 数字(Number)', '<h1>Python3 数字(Number)</h1>\r\n\r\n<p>Python 数字数据类型用于存储数值。</p>\r\n\r\n<p>数据类型是不允许改变的,这就意味着如果改变数字数据类型的值，将重新分配内存空间。</p>\r\n\r\n<p>以下实例在变量赋值时 Number 对象将被创建：</p>\r\n\r\n<pre>\r\nvar1 = 1\r\nvar2 = 10</pre>\r\n\r\n<p>您也可以使用del语句删除一些数字对象的引用。</p>\r\n\r\n<p>del语句的语法是：</p>\r\n\r\n<pre>\r\ndel var1[,var2[,var3[....,varN]]]</pre>\r\n\r\n<p>您可以通过使用del语句删除单个或多个对象的引用，例如：</p>\r\n\r\n<pre>\r\ndel var\r\ndel var_a, var_b</pre>\r\n\r\n<p>Python 支持三种不同的数值类型：</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>整型(int)</strong>&nbsp;- 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。布尔(bool)是整型的子类型。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>浮点型(float)</strong>&nbsp;- 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 10<sup>2</sup>&nbsp;= 250）</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>复数( (complex))</strong>&nbsp;- 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>我们可以使用十六进制和八进制来代表整数：</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; number = 0xA0F # 十六进制\r\n&gt;&gt;&gt; number\r\n2575\r\n\r\n&gt;&gt;&gt; number=0o37 # 八进制\r\n&gt;&gt;&gt; number\r\n31</pre>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>int</th>\r\n			<th>float</th>\r\n			<th>complex</th>\r\n		</tr>\r\n		<tr>\r\n			<td>10</td>\r\n			<td>0.0</td>\r\n			<td>3.14j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>100</td>\r\n			<td>15.20</td>\r\n			<td>45.j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-786</td>\r\n			<td>-21.9</td>\r\n			<td>9.322e-36j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>080</td>\r\n			<td>32.3e+18</td>\r\n			<td>.876j</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-0490</td>\r\n			<td>-90.</td>\r\n			<td>-.6545+0J</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-0x260</td>\r\n			<td>-32.54e100</td>\r\n			<td>3e+26J</td>\r\n		</tr>\r\n		<tr>\r\n			<td>0x69</td>\r\n			<td>70.2E-12</td>\r\n			<td>4.53e-7j</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<ul>\r\n	<li>Python支持复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>Python 数字类型转换</h2>\r\n\r\n<p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>int(x)</strong>&nbsp;将x转换为一个整数。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>float(x)</strong>&nbsp;将x转换到一个浮点数。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>complex(x)</strong>&nbsp;将x转换到一个复数，实数部分为 x，虚数部分为 0。</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>complex(x, y)</strong>&nbsp;将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>以下实例将浮点数变量 a 转换为整数：</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; a = 1.0\r\n&gt;&gt;&gt; int(a)\r\n1</pre>\r\n\r\n<hr />\r\n<h2>Python 数字运算</h2>\r\n\r\n<p>Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。</p>\r\n\r\n<p>表达式的语法很直白：&nbsp;+,&nbsp;-,&nbsp;*&nbsp;和&nbsp;/, 和其它语言（如Pascal或C）里一样。例如：</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; 2 + 2\r\n4\r\n&gt;&gt;&gt; 50 - 5*6\r\n20\r\n&gt;&gt;&gt; (50 - 5*6) / 4\r\n5.0\r\n&gt;&gt;&gt; 8 / 5  # 总是返回一个浮点数\r\n1.6</pre>\r\n\r\n<p><strong>注意：</strong>在不同的机器上浮点运算的结果可能会不一样。</p>\r\n\r\n<p>在整数除法中，除法&nbsp;/&nbsp;总是返回一个浮点数，如果只想得到整数的结果，丢弃可能的分数部分，可以使用运算符&nbsp;//&nbsp;：</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; 17 / 3  # 整数除法返回浮点型\r\n5.666666666666667\r\n&gt;&gt;&gt;\r\n&gt;&gt;&gt; 17 // 3  # 整数除法返回向下取整后的结果\r\n5\r\n&gt;&gt;&gt; 17 % 3  # ％操作符返回除法的余数\r\n2\r\n&gt;&gt;&gt; 5 * 3 + 2 \r\n17</pre>\r\n\r\n<p><strong>注意：</strong>//&nbsp;得到的并不一定是整数类型的数，它与分母分子的数据类型有关系。</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; 7//2\r\n3\r\n&gt;&gt;&gt; 7.0//2\r\n3.0\r\n&gt;&gt;&gt; 7//2.0\r\n3.0\r\n&gt;&gt;&gt; </pre>\r\n\r\n<p>等号&nbsp;=&nbsp;用于给变量赋值。赋值之后，除了下一个提示符，解释器不会显示任何结果。</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; width = 20\r\n&gt;&gt;&gt; height = 5*9\r\n&gt;&gt;&gt; width * height\r\n900</pre>\r\n\r\n<p>Python 可以使用&nbsp;**&nbsp;操作来进行幂运算：</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; 5 ** 2  # 5 的平方\r\n25\r\n&gt;&gt;&gt; 2 ** 7  # 2的7次方\r\n128</pre>\r\n\r\n<p>变量在使用前必须先&quot;定义&quot;（即赋予变量一个值），否则会出现错误：</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; n   # 尝试访问一个未定义的变量\r\nTraceback (most recent call last):\r\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\nNameError: name &#39;n&#39; is not defined</pre>\r\n\r\n<p>不同类型的数混合运算时会将整数转换为浮点数：</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; 3 * 3.75 / 1.5\r\n7.5\r\n&gt;&gt;&gt; 7.0 / 2\r\n3.5</pre>\r\n\r\n<p>在交互模式中，最后被输出的表达式结果被赋值给变量&nbsp;<strong>_&nbsp;</strong>。例如：</p>\r\n\r\n<pre>\r\n&gt;&gt;&gt; tax = 12.5 / 100\r\n&gt;&gt;&gt; price = 100.50\r\n&gt;&gt;&gt; price * tax\r\n12.5625\r\n&gt;&gt;&gt; price + _\r\n113.0625\r\n&gt;&gt;&gt; round(_, 2)\r\n113.06</pre>\r\n\r\n<p>此处，&nbsp;<strong>_&nbsp;</strong>变量应被用户视为只读变量。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>数学函数</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>函数</th>\r\n			<th>返回值 ( 描述 )</th>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-abs.html\" rel=\"noopener noreferrer\" target=\"_blank\">abs(x)</a></td>\r\n			<td>返回数字的绝对值，如abs(-10) 返回 10</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-ceil.html\" rel=\"noopener noreferrer\" target=\"_blank\">ceil(x)</a></td>\r\n			<td>返回数字的上入整数，如math.ceil(4.1) 返回 5</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p>cmp(x, y)</p>\r\n			</td>\r\n			<td>如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。&nbsp;<strong>Python 3 已废弃，使用 (x&gt;y)-(x&lt;y) 替换</strong>。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-exp.html\" rel=\"noopener noreferrer\" target=\"_blank\">exp(x)</a></td>\r\n			<td>返回e的x次幂(e<sup>x</sup>),如math.exp(1) 返回2.718281828459045</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-fabs.html\" rel=\"noopener noreferrer\" target=\"_blank\">fabs(x)</a></td>\r\n			<td>返回数字的绝对值，如math.fabs(-10) 返回10.0</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-floor.html\" rel=\"noopener noreferrer\" target=\"_blank\">floor(x)</a></td>\r\n			<td>返回数字的下舍整数，如math.floor(4.9)返回 4</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-log.html\" rel=\"noopener noreferrer\" target=\"_blank\">log(x)</a></td>\r\n			<td>如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-log10.html\" rel=\"noopener noreferrer\" target=\"_blank\">log10(x)</a></td>\r\n			<td>返回以10为基数的x的对数，如math.log10(100)返回 2.0</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-max.html\" rel=\"noopener noreferrer\" target=\"_blank\">max(x1, x2,...)</a></td>\r\n			<td>返回给定参数的最大值，参数可以为序列。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-min.html\" rel=\"noopener noreferrer\" target=\"_blank\">min(x1, x2,...)</a></td>\r\n			<td>返回给定参数的最小值，参数可以为序列。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-modf.html\" rel=\"noopener noreferrer\" target=\"_blank\">modf(x)</a></td>\r\n			<td>返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-pow.html\" rel=\"noopener noreferrer\" target=\"_blank\">pow(x, y)</a></td>\r\n			<td>x**y 运算后的值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-round.html\" rel=\"noopener noreferrer\" target=\"_blank\">round(x [,n])</a></td>\r\n			<td>\r\n			<p>返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。</p>\r\n\r\n			<p><strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-sqrt.html\" rel=\"noopener noreferrer\" target=\"_blank\">sqrt(x)</a></td>\r\n			<td>返回数字x的平方根。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>随机数函数</h2>\r\n\r\n<p>随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</p>\r\n\r\n<p>Python包含以下常用随机数函数：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>函数</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-choice.html\" rel=\"noopener noreferrer\" target=\"_blank\">choice(seq)</a></td>\r\n			<td>从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-randrange.html\" rel=\"noopener noreferrer\" target=\"_blank\">randrange ([start,] stop [,step])</a></td>\r\n			<td>从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-random.html\" rel=\"noopener noreferrer\" target=\"_blank\">random()</a></td>\r\n			<td>随机生成下一个实数，它在[0,1)范围内。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-seed.html\" rel=\"noopener noreferrer\" target=\"_blank\">seed([x])</a></td>\r\n			<td>改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-shuffle.html\" rel=\"noopener noreferrer\" target=\"_blank\">shuffle(lst)</a></td>\r\n			<td>将序列的所有元素随机排序</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-uniform.html\" rel=\"noopener noreferrer\" target=\"_blank\">uniform(x, y)</a></td>\r\n			<td>随机生成下一个实数，它在[x,y]范围内。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>三角函数</h2>\r\n\r\n<p>Python包括以下三角函数：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>函数</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-acos.html\" rel=\"noopener noreferrer\" target=\"_blank\">acos(x)</a></td>\r\n			<td>返回x的反余弦弧度值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-asin.html\" rel=\"noopener noreferrer\" target=\"_blank\">asin(x)</a></td>\r\n			<td>返回x的反正弦弧度值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-atan.html\" rel=\"noopener noreferrer\" target=\"_blank\">atan(x)</a></td>\r\n			<td>返回x的反正切弧度值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-atan2.html\" rel=\"noopener noreferrer\" target=\"_blank\">atan2(y, x)</a></td>\r\n			<td>返回给定的 X 及 Y 坐标值的反正切值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-cos.html\" rel=\"noopener noreferrer\" target=\"_blank\">cos(x)</a></td>\r\n			<td>返回x的弧度的余弦值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-hypot.html\" rel=\"noopener noreferrer\" target=\"_blank\">hypot(x, y)</a></td>\r\n			<td>返回欧几里德范数 sqrt(x*x + y*y)。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-sin.html\" rel=\"noopener noreferrer\" target=\"_blank\">sin(x)</a></td>\r\n			<td>返回的x弧度的正弦值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-tan.html\" rel=\"noopener noreferrer\" target=\"_blank\">tan(x)</a></td>\r\n			<td>返回x弧度的正切值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-degrees.html\" rel=\"noopener noreferrer\" target=\"_blank\">degrees(x)</a></td>\r\n			<td>将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-func-number-radians.html\" rel=\"noopener noreferrer\" target=\"_blank\">radians(x)</a></td>\r\n			<td>将角度转换为弧度</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>数学常量</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>常量</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>pi</td>\r\n			<td>数学常量 pi（圆周率，一般以&pi;来表示）</td>\r\n		</tr>\r\n		<tr>\r\n			<td>e</td>\r\n			<td>数学常量 e，e即自然常数（自然常数）。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 0, '2021-12-14 02:51:33.824758', '2021-12-14 02:51:33.827737', 8, 1);
INSERT INTO `tb_article` VALUES (92, 'article/20211214/python3_2Q2n5oZ.png', 'Python3 字符串', 'Python3 字符串', 'Python3 字符串', '<h1 style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:2.1em\"><span style=\"color:#000000\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"background-color:#ffffff\">Python3&nbsp;<span style=\"color:#64854c\">字符串</span></span></span></span></span></h1>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">字符串是 Python 中最常用的数据类型。我们可以使用引号(&nbsp;<span style=\"background-color:#eceae6\"><strong><span style=\"font-family:SFMono-Regular,Consolas,&quot;Liberation Mono&quot;,Menlo,Courier,monospace\">&#39;</span></strong></span>&nbsp;或&nbsp;<span style=\"background-color:#eceae6\"><strong><span style=\"font-family:SFMono-Regular,Consolas,&quot;Liberation Mono&quot;,Menlo,Courier,monospace\">&quot;</span></strong></span>&nbsp;)来创建字符串。</span></span></span></span></p>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">创建字符串很简单，只要为变量分配一个值即可。例如：</span></span></span></span></p>\r\n\r\n<div class=\"example\" style=\"-webkit-text-stroke-width:0px; border:1px solid #d4d4d4; margin-bottom:5px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; text-align:start; width:796.109px\">\r\n<div class=\"example_code\" style=\"border:1px solid #d4d4d4; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; width:780.172px\">\r\n<div class=\"hl-main\" style=\"border:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:0px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:13.2px\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"color:#0055aa\">var1</span><span style=\"color:gray\"> = </span><span style=\"color:#8b0000\">&#39;</span><span style=\"color:#aa1111\">Hello World!</span><span style=\"color:#8b0000\">&#39;</span> <span style=\"color:#0055aa\">var2</span><span style=\"color:gray\"> = </span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">Runoob</span><span style=\"color:#8b0000\">&quot;</span></span></span></span></span></span></span></span></span></span></div>\r\n</div>\r\n</div>\r\n\r\n<hr />\r\n<h2 style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:1.8em\"><span style=\"color:#333333\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"background-color:#ffffff\">Python 访问字符串中的值</span></span></span></span></h2>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。</span></span></span></span></p>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">Python 访问子字符串，可以使用方括号&nbsp;<span style=\"background-color:#eceae6\"><strong><span style=\"font-family:SFMono-Regular,Consolas,&quot;Liberation Mono&quot;,Menlo,Courier,monospace\">[]</span></strong></span>&nbsp;来截取字符串，字符串的截取的语法格式如下：</span></span></span></span></p>\r\n\r\n<pre style=\"margin-left:15px; margin-right:15px; text-align:start\">\r\n<span style=\"color:#333333\"><span style=\"color:#666600\">变量[头下标:尾下标]</span></span></pre>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">索引值以&nbsp;<strong>0</strong>&nbsp;为开始值，<strong>-1</strong>&nbsp;为从末尾的开始位置。</span></span></span></span></p>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\"><img src=\"https://static.runoob.com/wp-content/uploads/123456-20200923-1.svg\" style=\"border:0px; height:auto; margin:0px; max-width:100%; padding:0px\" /></span></span></span></span></p>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\"><img src=\"https://www.runoob.com/wp-content/uploads/2014/05/python-str-runoob.png\" style=\"border:0px; height:auto; margin:0px; max-width:100%; padding:0px\" /></span></span></span></span></p>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">如下实例：</span></span></span></span></p>\r\n\r\n<div class=\"example\" style=\"-webkit-text-stroke-width:0px; border:1px solid #d4d4d4; margin-bottom:5px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; text-align:start; width:796.109px\">\r\n<h2 style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:14.4px\"><span style=\"color:#617f10\">实例(Python 3.0+)</span></span></span></span></span></span></h2>\r\n\r\n<div class=\"example_code\" style=\"border:1px solid #d4d4d4; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; width:780.172px\">\r\n<div class=\"hl-main\" style=\"border:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:0px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:13.2px\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"color:#aa5500\">#!/usr/bin/python3</span> <span style=\"color:#0055aa\">var1</span><span style=\"color:gray\"> = </span><span style=\"color:#8b0000\">&#39;</span><span style=\"color:#aa1111\">Hello World!</span><span style=\"color:#8b0000\">&#39;</span> <span style=\"color:#0055aa\">var2</span><span style=\"color:gray\"> = </span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">Runoob</span><span style=\"color:#8b0000\">&quot;</span> <span style=\"color:#0055aa\">print</span> <span style=\"color:olive\">(</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">var1[0]: </span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:gray\">, </span><span style=\"color:#0055aa\">var1</span><span style=\"color:olive\">[</span><span style=\"color:maroon\">0</span><span style=\"color:olive\">]</span><span style=\"color:olive\">)</span> <span style=\"color:#0055aa\">print</span> <span style=\"color:olive\">(</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">var2[1:5]: </span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:gray\">, </span><span style=\"color:#0055aa\">var2</span><span style=\"color:olive\">[</span><span style=\"color:maroon\">1</span><span style=\"color:gray\">:</span><span style=\"color:maroon\">5</span><span style=\"color:olive\">]</span><span style=\"color:olive\">)</span></span></span></span></span></span></span></span></span></span></div>\r\n</div>\r\n</div>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">以上实例执行结果：</span></span></span></span></p>\r\n\r\n<pre style=\"margin-left:15px; margin-right:15px; text-align:start\">\r\n<span style=\"color:#333333\"><span style=\"color:#000000\">var1</span><span style=\"color:#666600\">[</span><span style=\"color:#006666\">0</span><span style=\"color:#666600\">]:</span><span style=\"color:#000000\">  H\r\nvar2</span><span style=\"color:#666600\">[</span><span style=\"color:#006666\">1</span><span style=\"color:#666600\">:</span><span style=\"color:#006666\">5</span><span style=\"color:#666600\">]:</span><span style=\"color:#000000\">  unoo</span></span></pre>\r\n\r\n<hr />\r\n<h2 style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:1.8em\"><span style=\"color:#333333\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"background-color:#ffffff\">Python 字符串更新</span></span></span></span></h2>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">你可以截取字符串的一部分并与其他字段拼接，如下实例：</span></span></span></span></p>\r\n\r\n<div class=\"example\" style=\"-webkit-text-stroke-width:0px; border:1px solid #d4d4d4; margin-bottom:5px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; text-align:start; width:796.109px\">\r\n<h2 style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:14.4px\"><span style=\"color:#617f10\">实例(Python 3.0+)</span></span></span></span></span></span></h2>\r\n\r\n<div class=\"example_code\" style=\"border:1px solid #d4d4d4; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; width:780.172px\">\r\n<div class=\"hl-main\" style=\"border:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:0px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:13.2px\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"color:#aa5500\">#!/usr/bin/python3</span> <span style=\"color:#0055aa\">var1</span><span style=\"color:gray\"> = </span><span style=\"color:#8b0000\">&#39;</span><span style=\"color:#aa1111\">Hello World!</span><span style=\"color:#8b0000\">&#39;</span> <span style=\"color:#0055aa\">print</span> <span style=\"color:olive\">(</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">已更新字符串 : </span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:gray\">, </span><span style=\"color:#0055aa\">var1</span><span style=\"color:olive\">[</span><span style=\"color:gray\">:</span><span style=\"color:maroon\">6</span><span style=\"color:olive\">]</span><span style=\"color:gray\"> + </span><span style=\"color:#8b0000\">&#39;</span><span style=\"color:#aa1111\">Runoob!</span><span style=\"color:#8b0000\">&#39;</span><span style=\"color:olive\">)</span></span></span></span></span></span></span></span></span></span></div>\r\n</div>\r\n</div>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">以上实例执行结果</span></span></span></span></p>\r\n\r\n<pre style=\"margin-left:15px; margin-right:15px; text-align:start\">\r\n<span style=\"color:#333333\"><span style=\"color:#666600\">已更新字符串</span> <span style=\"color:#666600\">:</span>  <span style=\"color:#660066\">Hello</span> <span style=\"color:#660066\">Runoob</span><span style=\"color:#666600\">!</span></span></pre>\r\n\r\n<hr />\r\n<h2 style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:1.8em\"><span style=\"color:#333333\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"background-color:#ffffff\">Python转义字符</span></span></span></span></h2>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">在需要在字符中使用特殊字符时，python 用反斜杠&nbsp;<span style=\"background-color:#eceae6\"><strong><span style=\"font-family:SFMono-Regular,Consolas,&quot;Liberation Mono&quot;,Menlo,Courier,monospace\">\\</span></strong></span>&nbsp;转义字符。如下表：</span></span></span></span></p>\r\n\r\n<table border=\"1\" cellspacing=\"0\" class=\"reference\" style=\"-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border:1px solid #d4d4d4; color:#333333; font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif; font-size:12px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin:4px 0px; orphans:2; padding:0px; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:812.359px; word-spacing:0px\">\r\n	<thead>\r\n		<tr>\r\n			<th style=\"background-color:#555555; text-align:left; vertical-align:top\">转义字符</th>\r\n			<th style=\"background-color:#555555; text-align:left; vertical-align:top\">描述</th>\r\n			<th style=\"background-color:#555555; text-align:left; vertical-align:top\">实例</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">\\(在行尾时)</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">续行符</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<pre style=\"margin-left:15px; margin-right:15px\">\r\n<span style=\"font-size:13px\"><span style=\"color:#666600\">&gt;&gt;&gt;</span> <span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#008800\">&quot;line1 \\\r\n... line2 \\\r\n... line3&quot;</span><span style=\"color:#666600\">)</span><span style=\"color:#000000\">\r\nline1 line2 line3\r\n</span><span style=\"color:#666600\">&gt;&gt;&gt;</span> </span></pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">\\\\</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">反斜杠符号</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<pre style=\"margin-left:15px; margin-right:15px\">\r\n<span style=\"font-size:13px\"><span style=\"color:#666600\">&gt;&gt;&gt;</span> <span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#008800\">&quot;\\\\&quot;</span><span style=\"color:#666600\">)</span><span style=\"color:#000000\">\r\n\\</span></span></pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">\\&#39;</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">单引号</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<pre style=\"margin-left:15px; margin-right:15px\">\r\n<span style=\"font-size:13px\"><span style=\"color:#666600\">&gt;&gt;&gt;</span> <span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#008800\">&#39;\\&#39;&#39;</span><span style=\"color:#666600\">)</span>\r\n<span style=\"color:#008800\">&#39;</span></span></pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">\\&quot;</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">双引号</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<pre style=\"margin-left:15px; margin-right:15px\">\r\n<span style=\"font-size:13px\"><span style=\"color:#666600\">&gt;&gt;&gt;</span> <span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#008800\">&quot;\\&quot;&quot;</span><span style=\"color:#666600\">)</span>\r\n<span style=\"color:#008800\">&quot;</span></span></pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">\\a</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">响铃</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<pre style=\"margin-left:15px; margin-right:15px\">\r\n<span style=\"font-size:13px\"><span style=\"color:#666600\">&gt;&gt;&gt;</span> <span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#008800\">&quot;\\a&quot;</span><span style=\"color:#666600\">)</span></span></pre>\r\n			<span style=\"font-size:13px\">执行后电脑有响声。</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">\\b</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">退格(Backspace)</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<pre style=\"margin-left:15px; margin-right:15px\">\r\n<span style=\"font-size:13px\"><span style=\"color:#666600\">&gt;&gt;&gt;</span> <span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#008800\">&quot;Hello \\b World!&quot;</span><span style=\"color:#666600\">)</span>\r\n<span style=\"color:#660066\">Hello</span> <span style=\"color:#660066\">World</span><span style=\"color:#666600\">!</span></span></pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">\\000</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">空</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<pre style=\"margin-left:15px; margin-right:15px\">\r\n<span style=\"font-size:13px\"><span style=\"color:#666600\">&gt;&gt;&gt;</span> <span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#008800\">&quot;\\000&quot;</span><span style=\"color:#666600\">)</span>\r\n\r\n<span style=\"color:#666600\">&gt;&gt;&gt;</span> </span></pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">\\n</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">换行</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<pre style=\"margin-left:15px; margin-right:15px\">\r\n<span style=\"font-size:13px\"><span style=\"color:#666600\">&gt;&gt;&gt;</span> <span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#008800\">&quot;\\n&quot;</span><span style=\"color:#666600\">)</span>\r\n\r\n\r\n<span style=\"color:#666600\">&gt;&gt;&gt;</span></span></pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">\\v</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">纵向制表符</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<pre style=\"margin-left:15px; margin-right:15px\">\r\n<span style=\"font-size:13px\"><span style=\"color:#666600\">&gt;&gt;&gt;</span> <span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#008800\">&quot;Hello \\v World!&quot;</span><span style=\"color:#666600\">)</span>\r\n<span style=\"color:#660066\">Hello</span> \r\n       <span style=\"color:#660066\">World</span><span style=\"color:#666600\">!</span>\r\n<span style=\"color:#666600\">&gt;&gt;&gt;</span></span></pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">\\t</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">横向制表符</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<pre style=\"margin-left:15px; margin-right:15px\">\r\n<span style=\"font-size:13px\"><span style=\"color:#666600\">&gt;&gt;&gt;</span> <span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#008800\">&quot;Hello \\t World!&quot;</span><span style=\"color:#666600\">)</span>\r\n<span style=\"color:#660066\">Hello</span> &nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:#660066\">World</span><span style=\"color:#666600\">!</span>\r\n<span style=\"color:#666600\">&gt;&gt;&gt;</span></span></pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">\\r</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">回车，将&nbsp;<span style=\"background-color:#eceae6\"><strong><span style=\"font-family:SFMono-Regular,Consolas,&quot;Liberation Mono&quot;,Menlo,Courier,monospace\">\\r</span></strong></span>&nbsp;后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将&nbsp;<span style=\"background-color:#eceae6\"><strong><span style=\"font-family:SFMono-Regular,Consolas,&quot;Liberation Mono&quot;,Menlo,Courier,monospace\">\\r</span></strong></span>&nbsp;后面的内容完全替换完成。</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<pre style=\"margin-left:15px; margin-right:15px\">\r\n<span style=\"font-size:13px\"><span style=\"color:#666600\">&gt;&gt;&gt;</span> <span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#008800\">&quot;Hello\\rWorld!&quot;</span><span style=\"color:#666600\">)</span>\r\n<span style=\"color:#660066\">World</span><span style=\"color:#666600\">!</span>\r\n<span style=\"color:#666600\">&gt;&gt;&gt;</span> <span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#008800\">&#39;google runoob taobao\\r123456&#39;</span><span style=\"color:#666600\">)</span>\r\n<span style=\"color:#006666\">123456</span><span style=\"color:#000000\"> runoob taobao</span></span></pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">\\f</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">换页</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<pre style=\"margin-left:15px; margin-right:15px\">\r\n<span style=\"font-size:13px\"><span style=\"color:#666600\">&gt;&gt;&gt;</span> <span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#008800\">&quot;Hello \\f World!&quot;</span><span style=\"color:#666600\">)</span>\r\n<span style=\"color:#660066\">Hello</span> \r\n       <span style=\"color:#660066\">World</span><span style=\"color:#666600\">!</span>\r\n<span style=\"color:#666600\">&gt;&gt;&gt;</span> </span></pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">\\yyy</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">八进制数，y 代表 0~7 的字符，例如：\\012 代表换行。</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<pre style=\"margin-left:15px; margin-right:15px\">\r\n<span style=\"font-size:13px\"><span style=\"color:#666600\">&gt;&gt;&gt;</span> <span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#008800\">&quot;\\110\\145\\154\\154\\157\\40\\127\\157\\162\\154\\144\\41&quot;</span><span style=\"color:#666600\">)</span>\r\n<span style=\"color:#660066\">Hello</span> <span style=\"color:#660066\">World</span><span style=\"color:#666600\">!</span></span></pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">\\xyy</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">十六进制数，以 \\x 开头，y 代表的字符，例如：\\x0a 代表换行</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<pre style=\"margin-left:15px; margin-right:15px\">\r\n<span style=\"font-size:13px\"><span style=\"color:#666600\">&gt;&gt;&gt;</span> <span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#008800\">&quot;\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\\x21&quot;</span><span style=\"color:#666600\">)</span>\r\n<span style=\"color:#660066\">Hello</span> <span style=\"color:#660066\">World</span><span style=\"color:#666600\">!</span></span></pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">\\other</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">其它的字符以普通格式输出</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">&nbsp;</span></td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<hr />\r\n<h2 style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:1.8em\"><span style=\"color:#333333\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"background-color:#ffffff\">Python字符串运算符</span></span></span></span></h2>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">下表实例变量 a 值为字符串 &quot;Hello&quot;，b 变量值为 &quot;Python&quot;：</span></span></span></span></p>\r\n\r\n<table border=\"1\" cellspacing=\"0\" class=\"reference\" style=\"-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border:1px solid #d4d4d4; color:#333333; font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif; font-size:12px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin:4px 0px; orphans:2; padding:0px; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:812.359px; word-spacing:0px\">\r\n	<tbody>\r\n		<tr>\r\n			<th style=\"background-color:#555555; text-align:left; vertical-align:top\">操作符</th>\r\n			<th style=\"background-color:#555555; text-align:left; vertical-align:top\">描述</th>\r\n			<th style=\"background-color:#555555; text-align:left; vertical-align:top\">实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">+</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">字符串连接</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">a + b 输出结果： HelloPython</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">*</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">重复输出字符串</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">a*2 输出结果：HelloHello</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">[]</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">通过索引获取字符串中字符</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">a[1] 输出结果&nbsp;<strong>e</strong></span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">[ : ]</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">截取字符串中的一部分，遵循<strong>左闭右开</strong>原则，str[0:2] 是不包含第 3 个字符的。</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">a[1:4] 输出结果&nbsp;<strong>ell</strong></span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">in</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">成员运算符 - 如果字符串中包含给定的字符返回 True</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><strong>&#39;H&#39; in a</strong>&nbsp;输出结果 True</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">not in</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">成员运算符 - 如果字符串中不包含给定的字符返回 True</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><strong>&#39;M&#39; not in a</strong>&nbsp;输出结果 True</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">r/R</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母&nbsp;<span style=\"background-color:#eceae6\"><strong><span style=\"font-family:SFMono-Regular,Consolas,&quot;Liberation Mono&quot;,Menlo,Courier,monospace\">r</span></strong></span>（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<pre style=\"margin-left:15px; margin-right:15px\">\r\n<span style=\"font-size:13px\"><span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#000000\"> r</span><span style=\"color:#008800\">&#39;\\n&#39;</span> <span style=\"color:#666600\">)</span>\r\n<span style=\"color:#000088\">print</span><span style=\"color:#666600\">(</span><span style=\"color:#000000\"> R</span><span style=\"color:#008800\">&#39;\\n&#39;</span> <span style=\"color:#666600\">)</span></span></pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">%</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">格式字符串</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">请看下一节内容。</span></td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<div class=\"example\" style=\"-webkit-text-stroke-width:0px; border:1px solid #d4d4d4; margin-bottom:5px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; text-align:start; width:796.109px\">\r\n<h2 style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:14.4px\"><span style=\"color:#617f10\">实例(Python 3.0+)</span></span></span></span></span></span></h2>\r\n\r\n<div class=\"example_code\" style=\"border:1px solid #d4d4d4; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; width:780.172px\">\r\n<div class=\"hl-main\" style=\"border:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:0px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:13.2px\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"color:#aa5500\">#!/usr/bin/python3</span> <span style=\"color:#0055aa\">a</span><span style=\"color:gray\"> = </span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">Hello</span><span style=\"color:#8b0000\">&quot;</span> <span style=\"color:#0055aa\">b</span><span style=\"color:gray\"> = </span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">Python</span><span style=\"color:#8b0000\">&quot;</span> <span style=\"color:#0055aa\">print</span><span style=\"color:olive\">(</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">a + b 输出结果：</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:gray\">, </span><span style=\"color:#0055aa\">a</span><span style=\"color:gray\"> + </span><span style=\"color:#0055aa\">b</span><span style=\"color:olive\">)</span> <span style=\"color:#0055aa\">print</span><span style=\"color:olive\">(</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">a * 2 输出结果：</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:gray\">, </span><span style=\"color:#0055aa\">a</span><span style=\"color:gray\"> * </span><span style=\"color:maroon\">2</span><span style=\"color:olive\">)</span> <span style=\"color:#0055aa\">print</span><span style=\"color:olive\">(</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">a[1] 输出结果：</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:gray\">, </span><span style=\"color:#0055aa\">a</span><span style=\"color:olive\">[</span><span style=\"color:maroon\">1</span><span style=\"color:olive\">]</span><span style=\"color:olive\">)</span> <span style=\"color:#0055aa\">print</span><span style=\"color:olive\">(</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">a[1:4] 输出结果：</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:gray\">, </span><span style=\"color:#0055aa\">a</span><span style=\"color:olive\">[</span><span style=\"color:maroon\">1</span><span style=\"color:gray\">:</span><span style=\"color:maroon\">4</span><span style=\"color:olive\">]</span><span style=\"color:olive\">)</span> <span style=\"color:#0055aa\">if</span><span style=\"color:olive\">(</span> <span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">H</span><span style=\"color:#8b0000\">&quot;</span> <span style=\"color:green\">in</span> <span style=\"color:#0055aa\">a</span><span style=\"color:olive\">)</span><span style=\"color:gray\"> : </span><span style=\"color:#0055aa\">print</span><span style=\"color:olive\">(</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">H 在变量 a 中</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:olive\">)</span> <span style=\"color:green\">else</span><span style=\"color:gray\"> : </span><span style=\"color:#0055aa\">print</span><span style=\"color:olive\">(</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">H 不在变量 a 中</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:olive\">)</span> <span style=\"color:#0055aa\">if</span><span style=\"color:olive\">(</span> <span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">M</span><span style=\"color:#8b0000\">&quot;</span> <span style=\"color:green\">not</span> <span style=\"color:green\">in</span> <span style=\"color:#0055aa\">a</span><span style=\"color:olive\">)</span><span style=\"color:gray\"> : </span><span style=\"color:#0055aa\">print</span><span style=\"color:olive\">(</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">M 不在变量 a 中</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:olive\">)</span> <span style=\"color:green\">else</span><span style=\"color:gray\"> : </span><span style=\"color:#0055aa\">print</span><span style=\"color:olive\">(</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">M 在变量 a 中</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:olive\">)</span> <span style=\"color:#0055aa\">print</span> <span style=\"color:olive\">(</span><span style=\"color:#0055aa\">r</span><span style=\"color:#8b0000\">&#39;</span><span style=\"color:navy\">\\n</span><span style=\"color:#8b0000\">&#39;</span><span style=\"color:olive\">)</span> <span style=\"color:#0055aa\">print</span> <span style=\"color:olive\">(</span><span style=\"color:#0055aa\">R</span><span style=\"color:#8b0000\">&#39;</span><span style=\"color:navy\">\\n</span><span style=\"color:#8b0000\">&#39;</span><span style=\"color:olive\">)</span></span></span></span></span></span></span></span></span></span></div>\r\n</div>\r\n</div>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">以上实例输出结果为：</span></span></span></span></p>\r\n\r\n<pre style=\"margin-left:15px; margin-right:15px; text-align:start\">\r\n<span style=\"color:#333333\"><span style=\"color:#000000\">a </span><span style=\"color:#666600\">+</span><span style=\"color:#000000\"> b </span><span style=\"color:#666600\">输出结果：</span> <span style=\"color:#660066\">HelloPython</span><span style=\"color:#000000\">\r\na </span><span style=\"color:#666600\">*</span> <span style=\"color:#006666\">2</span> <span style=\"color:#666600\">输出结果：</span> <span style=\"color:#660066\">HelloHello</span><span style=\"color:#000000\">\r\na</span><span style=\"color:#666600\">[</span><span style=\"color:#006666\">1</span><span style=\"color:#666600\">]</span> <span style=\"color:#666600\">输出结果：</span><span style=\"color:#000000\"> e\r\na</span><span style=\"color:#666600\">[</span><span style=\"color:#006666\">1</span><span style=\"color:#666600\">:</span><span style=\"color:#006666\">4</span><span style=\"color:#666600\">]</span> <span style=\"color:#666600\">输出结果：</span><span style=\"color:#000000\"> ell\r\nH </span><span style=\"color:#666600\">在变量</span><span style=\"color:#000000\"> a </span><span style=\"color:#666600\">中</span><span style=\"color:#000000\">\r\nM </span><span style=\"color:#666600\">不在变量</span><span style=\"color:#000000\"> a </span><span style=\"color:#666600\">中</span><span style=\"color:#000000\">\r\n\\n\r\n\\n</span></span></pre>\r\n\r\n<hr />\r\n<h2 style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:1.8em\"><span style=\"color:#333333\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"background-color:#ffffff\">Python 字符串格式化</span></span></span></span></h2>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。</span></span></span></span></p>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。</span></span></span></span></p>\r\n\r\n<div class=\"example\" style=\"-webkit-text-stroke-width:0px; border:1px solid #d4d4d4; margin-bottom:5px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; text-align:start; width:796.109px\">\r\n<h2 style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:14.4px\"><span style=\"color:#617f10\">实例(Python 3.0+)</span></span></span></span></span></span></h2>\r\n\r\n<div class=\"example_code\" style=\"border:1px solid #d4d4d4; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; width:780.172px\">\r\n<div class=\"hl-main\" style=\"border:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:0px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:13.2px\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"color:#aa5500\">#!/usr/bin/python3</span> <span style=\"color:#0055aa\">print</span> <span style=\"color:olive\">(</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:#aa1111\">我叫 %s 今年 %d 岁!</span><span style=\"color:#8b0000\">&quot;</span><span style=\"color:gray\"> % </span><span style=\"color:olive\">(</span><span style=\"color:#8b0000\">&#39;</span><span style=\"color:#aa1111\">小明</span><span style=\"color:#8b0000\">&#39;</span><span style=\"color:gray\">, </span><span style=\"color:maroon\">10</span><span style=\"color:olive\">)</span><span style=\"color:olive\">)</span></span></span></span></span></span></span></span></span></span></div>\r\n</div>\r\n</div>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">以上实例输出结果：</span></span></span></span></p>\r\n\r\n<pre style=\"margin-left:15px; margin-right:15px; text-align:start\">\r\n<span style=\"color:#333333\"><span style=\"color:#666600\">我叫</span> <span style=\"color:#666600\">小明</span> <span style=\"color:#666600\">今年</span> <span style=\"color:#006666\">10</span> <span style=\"color:#666600\">岁!</span></span></pre>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">python字符串格式化符号:</span></span></span></span></p>\r\n\r\n<table border=\"1\" cellspacing=\"0\" class=\"reference\" style=\"-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border:1px solid #d4d4d4; color:#333333; font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif; font-size:12px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin:4px 0px; orphans:2; padding:0px; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:812.359px; word-spacing:0px\">\r\n	<tbody>\r\n		<tr>\r\n			<th style=\"background-color:#555555; text-align:left; vertical-align:top\">&nbsp;&nbsp;&nbsp; 符&nbsp;&nbsp; 号</th>\r\n			<th style=\"background-color:#555555; text-align:left; vertical-align:top\">描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %c</span></span></span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;格式化字符及其ASCII码</span></span></span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %s</span></span></span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;格式化字符串</span></span></span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %d</span></span></span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;格式化整数</span></span></span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %u</span></span></span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;格式化无符号整型</span></span></span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %o</span></span></span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;格式化无符号八进制数</span></span></span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %x</span></span></span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;格式化无符号十六进制数</span></span></span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %X</span></span></span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;格式化无符号十六进制数（大写）</span></span></span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %f</span></span></span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;格式化浮点数字，可指定小数点后的精度</span></span></span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %e</span></span></span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;用科学计数法格式化浮点数</span></span></span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %E</span></span></span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;作用同%e，用科学计数法格式化浮点数</span></span></span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %g</span></span></span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;%f和%e的简写</span></span></span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %G</span></span></span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;%f 和 %E 的简写</span></span></span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %p</span></span></span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\"><span style=\"font-family:宋体\"><span style=\"font-size:small\">&nbsp;用十六进制数格式化变量的地址</span></span></span></td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">格式化操作符辅助指令:</span></span></span></span></p>\r\n\r\n<table border=\"1\" cellspacing=\"0\" class=\"reference\" style=\"-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border:1px solid #d4d4d4; color:#333333; font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif; font-size:12px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin:4px 0px; orphans:2; padding:0px; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:812.359px; word-spacing:0px\">\r\n	<tbody>\r\n		<tr>\r\n			<th style=\"background-color:#555555; text-align:left; vertical-align:top\">符号</th>\r\n			<th style=\"background-color:#555555; text-align:left; vertical-align:top\">功能</th>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">*</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">定义宽度或者小数点精度</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">-</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">用做左对齐</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">+</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">在正数前面显示加号( + )</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">&lt;sp&gt;</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">在正数前面显示空格</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">#</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">在八进制数前面显示零(&#39;0&#39;)，在十六进制前面显示&#39;0x&#39;或者&#39;0X&#39;(取决于用的是&#39;x&#39;还是&#39;X&#39;)</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">0</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">显示的数字前面填充&#39;0&#39;而不是默认的空格</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">%</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">&#39;%%&#39;输出一个单一的&#39;%&#39;</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">(var)</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">映射变量(字典参数)</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">m.n.</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</span></td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">Python2.6 开始，新增了一种格式化字符串的函数&nbsp;<a href=\"https://www.runoob.com/python/att-string-format.html\" rel=\"noopener noreferrer\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\" target=\"_blank\">str.format()</a>，它增强了字符串格式化的功能。</span></span></span></span></p>\r\n\r\n<hr />\r\n<h2 style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:1.8em\"><span style=\"color:#333333\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"background-color:#ffffff\">Python三引号</span></span></span></span></h2>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。实例如下</span></span></span></span></p>\r\n\r\n<div class=\"example\" style=\"-webkit-text-stroke-width:0px; border:1px solid #d4d4d4; margin-bottom:5px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; text-align:start; width:796.109px\">\r\n<h2 style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:14.4px\"><span style=\"color:#617f10\">实例(Python 3.0+)</span></span></span></span></span></span></h2>\r\n\r\n<div class=\"example_code\" style=\"border:1px solid #d4d4d4; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; width:780.172px\">\r\n<div class=\"hl-main\" style=\"border:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:0px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:13.2px\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"color:#aa5500\">#!/usr/bin/python3</span> <span style=\"color:#0055aa\">para_str</span><span style=\"color:gray\"> = </span><span style=\"color:#8b0000\">&quot;&quot;&quot;</span><span style=\"color:#aa1111\">这是一个多行字符串的实例 多行字符串可以使用制表符 TAB ( </span><span style=\"color:navy\">\\t</span><span style=\"color:#aa1111\"> )。 也可以使用换行符 [ </span><span style=\"color:navy\">\\n</span><span style=\"color:#aa1111\"> ]。 </span><span style=\"color:#8b0000\">&quot;&quot;&quot;</span> <span style=\"color:#0055aa\">print</span> <span style=\"color:olive\">(</span><span style=\"color:#0055aa\">para_str</span><span style=\"color:olive\">)</span></span></span></span></span></span></span></span></span></span></div>\r\n</div>\r\n</div>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">以上实例执行结果为：</span></span></span></span></p>\r\n\r\n<pre style=\"margin-left:15px; margin-right:15px; text-align:start\">\r\n<span style=\"color:#333333\"><span style=\"color:#666600\">这是一个多行字符串的实例</span>\r\n<span style=\"color:#666600\">多行字符串可以使用制表符</span><span style=\"color:#000000\">\r\nTAB </span><span style=\"color:#666600\">(</span>    <span style=\"color:#666600\">)。</span>\r\n<span style=\"color:#666600\">也可以使用换行符</span> <span style=\"color:#666600\">[</span> \r\n <span style=\"color:#666600\">]。</span></span></pre>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的WYSIWYG（所见即所得）格式的。</span></span></span></span></p>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">一个典型的用例是，当你需要一块HTML或者SQL时，这时用字符串组合，特殊字符串转义将会非常的繁琐。</span></span></span></span></p>\r\n\r\n<div class=\"example\" style=\"-webkit-text-stroke-width:0px; border:1px solid #d4d4d4; margin-bottom:5px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; text-align:start; width:796.109px\">\r\n<div class=\"example_code\" style=\"border:1px solid #d4d4d4; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; width:780.172px\">\r\n<div class=\"hl-main\" style=\"border:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:0px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:13.2px\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"color:#0055aa\">errHTML</span><span style=\"color:gray\"> = </span><span style=\"color:#8b0000\">&#39;&#39;&#39;</span><span style=\"color:#aa1111\"> &lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt; Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt; &lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt; &lt;B&gt;%s&lt;/B&gt;&lt;P&gt; &lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back ONCLICK=&quot;window.history.back()&quot;&gt;&lt;/FORM&gt; &lt;/BODY&gt;&lt;/HTML&gt; </span><span style=\"color:#8b0000\">&#39;&#39;&#39;</span> <span style=\"color:#0055aa\">cursor</span><span style=\"color:gray\">.</span><span style=\"color:#0055aa\">execute</span><span style=\"color:olive\">(</span><span style=\"color:#8b0000\">&#39;&#39;&#39;</span><span style=\"color:#aa1111\"> CREATE TABLE users ( login VARCHAR(8), uid INTEGER, prid INTEGER) </span><span style=\"color:#8b0000\">&#39;&#39;&#39;</span><span style=\"color:olive\">)</span></span></span></span></span></span></span></span></span></span></div>\r\n</div>\r\n</div>\r\n\r\n<hr />\r\n<h2 style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:1.8em\"><span style=\"color:#333333\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"background-color:#ffffff\">f-string</span></span></span></span></h2>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">f-string 是 python3.6 之后版本添加的，称之为字面量格式化字符串，是新的格式化字符串的语法。</span></span></span></span></p>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">之前我们习惯用百分号 (%):</span></span></span></span></p>\r\n\r\n<div class=\"example\" style=\"-webkit-text-stroke-width:0px; border:1px solid #d4d4d4; margin-bottom:5px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; text-align:start; width:796.109px\">\r\n<h2 style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:14.4px\"><span style=\"color:#617f10\">实例</span></span></span></span></span></span></h2>\r\n\r\n<div class=\"example_code\" style=\"border:1px solid #d4d4d4; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; width:780.172px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:13.2px\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"color:gray\">&gt;&gt;&gt;</span>&nbsp;name&nbsp;<span style=\"color:gray\">=</span>&nbsp;<span style=\"color:#aa1111\">&#39;Runoob&#39;</span><br />\r\n<span style=\"color:gray\">&gt;&gt;&gt;</span>&nbsp;<span style=\"color:#aa1111\">&#39;Hello %s&#39;</span>&nbsp;% name<br />\r\n<span style=\"color:#aa1111\">&#39;Hello Runoob&#39;</span></span></span></span></span></span></span></span></div>\r\n</div>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\"><strong>f-string</strong>&nbsp;格式化字符串以&nbsp;<span style=\"background-color:#eceae6\"><strong><span style=\"font-family:SFMono-Regular,Consolas,&quot;Liberation Mono&quot;,Menlo,Courier,monospace\">f</span></strong></span>&nbsp;开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去，实例如下：</span></span></span></span></p>\r\n\r\n<div class=\"example\" style=\"-webkit-text-stroke-width:0px; border:1px solid #d4d4d4; margin-bottom:5px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; text-align:start; width:796.109px\">\r\n<h2 style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:14.4px\"><span style=\"color:#617f10\">实例</span></span></span></span></span></span></h2>\r\n\r\n<div class=\"example_code\" style=\"border:1px solid #d4d4d4; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; width:780.172px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:13.2px\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"color:gray\">&gt;&gt;&gt;</span>&nbsp;name&nbsp;<span style=\"color:gray\">=</span>&nbsp;<span style=\"color:#aa1111\">&#39;Runoob&#39;</span><br />\r\n<span style=\"color:gray\">&gt;&gt;&gt;</span>&nbsp;f<span style=\"color:#aa1111\">&#39;Hello {name}&#39;</span>&nbsp;&nbsp;<span style=\"color:#aa5500\"># 替换变量</span><br />\r\n<span style=\"color:#aa1111\">&#39;Hello Runoob&#39;</span><br />\r\n<span style=\"color:gray\">&gt;&gt;&gt;</span>&nbsp;f<span style=\"color:#aa1111\">&#39;{1+2}&#39;</span>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span style=\"color:#aa5500\"># 使用表达式</span><br />\r\n<span style=\"color:#aa1111\">&#39;3&#39;</span><br />\r\n<br />\r\n<span style=\"color:gray\">&gt;&gt;&gt;</span>&nbsp;w&nbsp;<span style=\"color:gray\">=</span>&nbsp;<span style=\"color:olive\">{</span><span style=\"color:#aa1111\">&#39;name&#39;</span>:&nbsp;<span style=\"color:#aa1111\">&#39;Runoob&#39;</span><span style=\"color:gray\">,</span>&nbsp;<span style=\"color:#aa1111\">&#39;url&#39;</span>:&nbsp;<span style=\"color:#aa1111\">&#39;www.runoob.com&#39;</span><span style=\"color:olive\">}</span><br />\r\n<span style=\"color:gray\">&gt;&gt;&gt;</span>&nbsp;f<span style=\"color:#aa1111\">&#39;{w[&quot;name&quot;]}: {w[&quot;url&quot;]}&#39;</span><br />\r\n<span style=\"color:#aa1111\">&#39;Runoob: www.runoob.com&#39;</span></span></span></span></span></span></span></span></div>\r\n</div>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">用了这种方式明显更简单了，不用再去判断使用 %s，还是 %d。</span></span></span></span></p>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">在 Python 3.8 的版本中可以使用&nbsp;<span style=\"background-color:#eceae6\"><strong><span style=\"font-family:SFMono-Regular,Consolas,&quot;Liberation Mono&quot;,Menlo,Courier,monospace\">=</span></strong></span>&nbsp;符号来拼接运算表达式与结果：</span></span></span></span></p>\r\n\r\n<div class=\"example\" style=\"-webkit-text-stroke-width:0px; border:1px solid #d4d4d4; margin-bottom:5px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; text-align:start; width:796.109px\">\r\n<h2 style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:14.4px\"><span style=\"color:#617f10\">实例</span></span></span></span></span></span></h2>\r\n\r\n<div class=\"example_code\" style=\"border:1px solid #d4d4d4; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; padding:5px; width:780.172px\"><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"background-color:#e5eecc\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"font-size:13.2px\"><span style=\"background-color:#ffffff\"><span style=\"font-family:Menlo,Monaco,Consolas,&quot;Andale Mono&quot;,&quot;lucida console&quot;,&quot;Courier New&quot;,monospace\"><span style=\"color:gray\">&gt;&gt;&gt;</span>&nbsp;x&nbsp;<span style=\"color:gray\">=</span>&nbsp;<span style=\"color:maroon\">1</span><br />\r\n<span style=\"color:gray\">&gt;&gt;&gt;</span>&nbsp;<span style=\"color:green\"><strong>print</strong></span><span style=\"color:olive\">(</span>f<span style=\"color:#aa1111\">&#39;{x+1}&#39;</span><span style=\"color:olive\">)</span>&nbsp;&nbsp;&nbsp;<span style=\"color:#aa5500\"># Python 3.6</span><br />\r\n<span style=\"color:maroon\">2</span><br />\r\n<br />\r\n<span style=\"color:gray\">&gt;&gt;&gt;</span>&nbsp;x&nbsp;<span style=\"color:gray\">=</span>&nbsp;<span style=\"color:maroon\">1</span><br />\r\n<span style=\"color:gray\">&gt;&gt;&gt;</span>&nbsp;<span style=\"color:green\"><strong>print</strong></span><span style=\"color:olive\">(</span>f<span style=\"color:#aa1111\">&#39;{x+1=}&#39;</span><span style=\"color:olive\">)</span>&nbsp;&nbsp;&nbsp;<span style=\"color:#aa5500\"># Python 3.8</span><br />\r\nx+<span style=\"color:maroon\">1</span><span style=\"color:gray\">=</span><span style=\"color:maroon\">2</span></span></span></span></span></span></span></span></div>\r\n</div>\r\n\r\n<hr />\r\n<h2 style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:1.8em\"><span style=\"color:#333333\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"background-color:#ffffff\">Unicode 字符串</span></span></span></span></h2>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">在Python2中，普通字符串是以8位ASCII码进行存储的，而Unicode字符串则存储为16位unicode字符串，这样能够表示更多的字符集。使用的语法是在字符串前面加上前缀&nbsp;<strong>u</strong>。</span></span></span></span></p>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">在Python3中，所有的字符串都是Unicode字符串。</span></span></span></span></p>\r\n\r\n<hr />\r\n<h2 style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:1.8em\"><span style=\"color:#333333\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"background-color:#ffffff\">Python 的字符串内建函数</span></span></span></span></h2>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><span style=\"color:#333333\"><span style=\"background-color:#ffffff\">Python 的字符串常用内建函数如下：</span></span></span></span></p>\r\n\r\n<p style=\"margin-left:0px; margin-right:0px; text-align:start\">&nbsp;</p>\r\n\r\n<table border=\"1\" cellspacing=\"0\" class=\"reference\" style=\"-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border:1px solid #d4d4d4; color:#333333; font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif; font-size:12px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin:4px 0px; orphans:2; padding:0px; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:812.359px; word-spacing:0px\">\r\n	<tbody>\r\n		<tr>\r\n			<th style=\"background-color:#555555; text-align:left; vertical-align:top; width:33.5625px\">序号</th>\r\n			<th style=\"background-color:#555555; text-align:left; vertical-align:top\">方法及描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">1</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-capitalize.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">capitalize()</a><br />\r\n			将字符串的第一个字符转换为大写</span></span></span></p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">2</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-center.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">center(width, fillchar)</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">3</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-count.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">count(str, beg= 0,end=len(string))</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">4</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-decode.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">bytes.decode(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">5</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-encode.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">encode(encoding=&#39;UTF-8&#39;,errors=&#39;strict&#39;)</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是&#39;ignore&#39;或者&#39;replace&#39;</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">6</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-endswith.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">endswith(suffix, beg=0, end=len(string))</a><br />\r\n			检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</span></span></span></p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">7</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-expandtabs.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">expandtabs(tabsize=8)</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">8</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-find.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">find(str, beg=0, end=len(string))</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">9</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-index.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">index(str, beg=0, end=len(string))</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">跟find()方法一样，只不过如果str不在字符串中会报一个异常。</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">10</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-isalnum.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">isalnum()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True，否则返回 False</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">11</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-isalpha.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">isalpha()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">12</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-isdigit.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">isdigit()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">如果字符串只包含数字则返回 True 否则返回 False..</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">13</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-islower.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">islower()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">14</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-isnumeric.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">isnumeric()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">如果字符串中只包含数字字符，则返回 True，否则返回 False</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">15</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-isspace.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">isspace()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">如果字符串中只包含空白，则返回 True，否则返回 False.</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">16</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-istitle.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">istitle()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">如果字符串是标题化的(见 title())则返回 True，否则返回 False</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">17</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-isupper.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">isupper()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">18</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-join.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">join(seq)</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">19</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-len.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">len(string)</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">返回字符串长度</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">20</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-ljust.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">ljust(width[, fillchar])</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">21</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-lower.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">lower()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">转换字符串中所有大写字符为小写.</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">22</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-lstrip.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">lstrip()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">截掉字符串左边的空格或指定字符。</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">23</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-maketrans.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">maketrans()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">24</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-max.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">max(str)</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">返回字符串 str 中最大的字母。</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">25</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-min.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">min(str)</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">返回字符串 str 中最小的字母。</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">26</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-replace.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">replace(old, new [, max])</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">把 将字符串中的 old 替换成 new,如果 max 指定，则替换不超过 max 次。</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">27</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-rfind.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">rfind(str, beg=0,end=len(string))</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">类似于 find()函数，不过是从右边开始查找.</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">28</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-rindex.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">rindex( str, beg=0, end=len(string))</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">类似于 index()，不过是从右边开始.</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">29</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-rjust.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">rjust(width,[, fillchar])</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">30</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-rstrip.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">rstrip()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">删除字符串末尾的空格或指定字符。</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">31</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-split.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">split(str=&quot;&quot;, num=string.count(str))</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">32</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-splitlines.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">splitlines([keepends])</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">按照行(&#39;\\r&#39;, &#39;\\r\\n&#39;, \\n&#39;)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">33</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-startswith.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">startswith(substr, beg=0,end=len(string))</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">34</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-strip.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">strip([chars])</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">在字符串上执行 lstrip()和 rstrip()</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">35</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-swapcase.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">swapcase()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">将字符串中大写转换为小写，小写转换为大写</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">36</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-title.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">title()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">返回&quot;标题化&quot;的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">37</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-translate.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">translate(table, deletechars=&quot;&quot;)</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">38</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-upper.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">upper()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">转换字符串中的小写字母为大写</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">39</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-zfill.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">zfill (width)</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">返回长度为 width 的字符串，原字符串右对齐，前面填充0</span></td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\"><span style=\"font-size:13px\">40</span></td>\r\n			<td style=\"background-color:#ffffff; border-color:#d4d4d4; vertical-align:top\">\r\n			<p style=\"margin-left:0px; margin-right:0px\"><span style=\"font-size:13px\"><span style=\"font-size:13px\"><span style=\"font-family:&quot;Helvetica Neue&quot;,Helvetica,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Noto Sans CJK SC&quot;,&quot;WenQuanYi Micro Hei&quot;,Arial,sans-serif\"><a href=\"https://www.runoob.com/python3/python3-string-isdecimal.html\" style=\"border:0px; margin:0px; padding:0px; color:#006600; text-decoration:underline; transition-duration:0.2s; transition-property:opacity; outline:none; font-size:13px\">isdecimal()</a></span></span></span></p>\r\n			<br />\r\n			<span style=\"font-size:13px\">检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。</span></td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 2, 0, '2021-12-14 02:52:01.962694', '2021-12-14 03:24:10.905881', 8, 1);
INSERT INTO `tb_article` VALUES (93, 'article/20211214/python3_xAdzycT.png', 'Python3 列表', 'Python3 列表', 'Python3 列表', '<h1>Python3&nbsp;列表</h1>\r\n\r\n<p>序列是 Python 中最基本的数据结构。</p>\r\n\r\n<p>序列中的每个值都有对应的位置值，称之为索引，第一个索引是 0，第二个索引是 1，依此类推。</p>\r\n\r\n<p>Python 有 6 个序列的内置类型，但最常见的是列表和元组。</p>\r\n\r\n<p>列表都可以进行的操作包括索引，切片，加，乘，检查成员。</p>\r\n\r\n<p>此外，Python 已经内置确定序列的长度以及确定最大和最小的元素的方法。</p>\r\n\r\n<p>列表是最常用的 Python 数据类型，它可以作为一个方括号内的逗号分隔值出现。</p>\r\n\r\n<p>列表的数据项不需要具有相同的类型</p>\r\n\r\n<p>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：</p>\r\n\r\n<p>list1 = [&#39;Google&#39;, &#39;Runoob&#39;, 1997, 2000] list2 = [1, 2, 3, 4, 5 ] list3 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] list4 = [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;yellow&#39;, &#39;white&#39;, &#39;black&#39;]</p>\r\n\r\n<hr />\r\n<h2>访问列表中的值</h2>\r\n\r\n<p>与字符串的索引一样，列表索引从&nbsp;0&nbsp;开始，第二个索引是&nbsp;1，依此类推。</p>\r\n\r\n<p>通过索引列表可以进行截取、组合等操作。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/05/positive-indexes-1.png\" /></p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python3<br />\r\n<br />\r\nlist&nbsp;=&nbsp;[&#39;red&#39;,&nbsp;&#39;green&#39;,&nbsp;&#39;blue&#39;,&nbsp;&#39;yellow&#39;,&nbsp;&#39;white&#39;,&nbsp;&#39;black&#39;]<br />\r\nprint(&nbsp;list[0]&nbsp;)<br />\r\nprint(&nbsp;list[1]&nbsp;)<br />\r\nprint(&nbsp;list[2]&nbsp;)</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\nred\r\ngreen\r\nblue</pre>\r\n\r\n<p>索引也可以从尾部开始，最后一个元素的索引为&nbsp;-1，往前一位为&nbsp;-2，以此类推。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/05/negative-indexes.png\" /></p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python3<br />\r\n<br />\r\nlist&nbsp;=&nbsp;[&#39;red&#39;,&nbsp;&#39;green&#39;,&nbsp;&#39;blue&#39;,&nbsp;&#39;yellow&#39;,&nbsp;&#39;white&#39;,&nbsp;&#39;black&#39;]<br />\r\nprint(&nbsp;list[-1]&nbsp;)<br />\r\nprint(&nbsp;list[-2]&nbsp;)<br />\r\nprint(&nbsp;list[-3]&nbsp;)</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\nblack\r\nwhite\r\nyellow</pre>\r\n\r\n<p>使用下标索引来访问列表中的值，同样你也可以使用方括号&nbsp;[]&nbsp;的形式截取字符，如下所示：</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/05/first-slice.png\" /></p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python3<br />\r\n<br />\r\nnums&nbsp;=&nbsp;[10,&nbsp;20,&nbsp;30,&nbsp;40,&nbsp;50,&nbsp;60,&nbsp;70,&nbsp;80,&nbsp;90]<br />\r\nprint(nums[0:4])</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n[10, 20, 30, 40]</pre>\r\n\r\n<p>使用负数索引值截取：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python3 list = [&#39;Google&#39;, &#39;Runoob&#39;, &quot;Zhihu&quot;, &quot;Taobao&quot;, &quot;Wiki&quot;] # 读取第二位 print (&quot;list[1]: &quot;, list[1]) # 从第二位开始（包含）截取到倒数第二位（不包含） print (&quot;list[1:-2]: &quot;, list[1:-2])</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\nlist[1]:  Runoob\r\nlist[1:-2]:  [&#39;Runoob&#39;, &#39;Zhihu&#39;]</pre>\r\n\r\n<hr />\r\n<h2>更新列表</h2>\r\n\r\n<p>你可以对列表的数据项进行修改或更新，你也可以使用 append() 方法来添加列表项，如下所示：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 list = [&#39;Google&#39;, &#39;Runoob&#39;, 1997, 2000] print (&quot;第三个元素为 : &quot;, list[2]) list[2] = 2001 print (&quot;更新后的第三个元素为 : &quot;, list[2]) list1 = [&#39;Google&#39;, &#39;Runoob&#39;, &#39;Taobao&#39;] list1.append(&#39;Baidu&#39;) print (&quot;更新后的列表 : &quot;, list1)</p>\r\n\r\n<p><strong>注意：</strong>我们会在接下来的章节讨论&nbsp;<a href=\"https://www.runoob.com/python3/python3-att-list-append.html\" rel=\"noopener\" target=\"_blank\">append()</a>&nbsp;方法的使用。</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n第三个元素为 :  1997\r\n更新后的第三个元素为 :  2001\r\n更新后的列表 :  [&#39;Google&#39;, &#39;Runoob&#39;, &#39;Taobao&#39;, &#39;Baidu&#39;]</pre>\r\n\r\n<hr />\r\n<h2>删除列表元素</h2>\r\n\r\n<p>可以使用 del 语句来删除列表的的元素，如下实例：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 list = [&#39;Google&#39;, &#39;Runoob&#39;, 1997, 2000] print (&quot;原始列表 : &quot;, list) del list[2] print (&quot;删除第三个元素 : &quot;, list)</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n原始列表 :  [&#39;Google&#39;, &#39;Runoob&#39;, 1997, 2000]\r\n删除第三个元素 :  [&#39;Google&#39;, &#39;Runoob&#39;, 2000]</pre>\r\n\r\n<p><strong>注意：</strong>我们会在接下来的章节讨论 remove() 方法的使用</p>\r\n\r\n<hr />\r\n<h2>Python列表脚本操作符</h2>\r\n\r\n<p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。</p>\r\n\r\n<p>如下所示：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Python 表达式</th>\r\n			<th>结果</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>len([1, 2, 3])</td>\r\n			<td>3</td>\r\n			<td>长度</td>\r\n		</tr>\r\n		<tr>\r\n			<td>[1, 2, 3] + [4, 5, 6]</td>\r\n			<td>[1, 2, 3, 4, 5, 6]</td>\r\n			<td>组合</td>\r\n		</tr>\r\n		<tr>\r\n			<td>[&#39;Hi!&#39;] * 4</td>\r\n			<td>[&#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;]</td>\r\n			<td>重复</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3 in [1, 2, 3]</td>\r\n			<td>True</td>\r\n			<td>元素是否存在于列表中</td>\r\n		</tr>\r\n		<tr>\r\n			<td>for x in [1, 2, 3]: print(x, end=&quot; &quot;)</td>\r\n			<td>1 2 3</td>\r\n			<td>迭代</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<hr />\r\n<h2>Python列表截取与拼接</h2>\r\n\r\n<p>Python的列表截取与字符串操作类型，如下所示：</p>\r\n\r\n<p>L=[&#39;Google&#39;, &#39;Runoob&#39;, &#39;Taobao&#39;]</p>\r\n\r\n<p>操作：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Python 表达式</th>\r\n			<th>结果</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>L[2]</td>\r\n			<td>&#39;Taobao&#39;</td>\r\n			<td>读取第三个元素</td>\r\n		</tr>\r\n		<tr>\r\n			<td>L[-2]</td>\r\n			<td>&#39;Runoob&#39;</td>\r\n			<td>从右侧开始读取倒数第二个元素: count from the right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>L[1:]</td>\r\n			<td>[&#39;Runoob&#39;, &#39;Taobao&#39;]</td>\r\n			<td>输出从第二个元素开始后的所有元素</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&gt;&gt;&gt;L=[&#39;Google&#39;, &#39;Runoob&#39;, &#39;Taobao&#39;] &gt;&gt;&gt; L[2] &#39;Taobao&#39; &gt;&gt;&gt; L[-2] &#39;Runoob&#39; &gt;&gt;&gt; L[1:] [&#39;Runoob&#39;, &#39;Taobao&#39;] &gt;&gt;&gt;</p>\r\n\r\n<p>列表还支持拼接操作：</p>\r\n\r\n<p>&gt;&gt;&gt;squares = [1, 4, 9, 16, 25] &gt;&gt;&gt; squares += [36, 49, 64, 81, 100] &gt;&gt;&gt; squares [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] &gt;&gt;&gt;</p>\r\n\r\n<hr />\r\n', 10, 0, '2021-12-14 02:52:46.544051', '2021-12-21 06:27:57.775164', 8, 1);
INSERT INTO `tb_article` VALUES (94, 'article/20211214/python3_ko2Do57.png', 'Python3 元组', 'Python3 元组', 'Python3 元组', '<h1>Python3&nbsp;元组</h1>\r\n\r\n<p>Python 的元组与列表类似，不同之处在于元组的元素不能修改。</p>\r\n\r\n<p>元组使用小括号&nbsp;( )，列表使用方括号&nbsp;[ ]。</p>\r\n\r\n<p>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2016/04/tup-2020-10-27-10-26-2.png\" /></p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;tup1&nbsp;=&nbsp;(&#39;Google&#39;,&nbsp;&#39;Runoob&#39;,&nbsp;1997,&nbsp;2000)<br />\r\n&gt;&gt;&gt;&nbsp;tup2&nbsp;=&nbsp;(1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5&nbsp;)<br />\r\n&gt;&gt;&gt;&nbsp;tup3&nbsp;=&nbsp;&quot;a&quot;,&nbsp;&quot;b&quot;,&nbsp;&quot;c&quot;,&nbsp;&quot;d&quot;&nbsp;&nbsp;&nbsp;# &nbsp;不需要括号也可以<br />\r\n&gt;&gt;&gt;&nbsp;type(tup3)<br />\r\n&lt;class&nbsp;&#39;tuple&#39;&gt;</p>\r\n\r\n<p>创建空元组</p>\r\n\r\n<pre>\r\ntup1 = ()</pre>\r\n\r\n<p>元组中只包含一个元素时，需要在元素后面添加逗号&nbsp;,&nbsp;，否则括号会被当作运算符使用：</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;tup1&nbsp;=&nbsp;(50)<br />\r\n&gt;&gt;&gt;&nbsp;type(tup1)&nbsp;&nbsp; &nbsp;&nbsp;# 不加逗号，类型为整型<br />\r\n&lt;class&nbsp;&#39;int&#39;&gt;<br />\r\n<br />\r\n&gt;&gt;&gt;&nbsp;tup1&nbsp;=&nbsp;(50,)<br />\r\n&gt;&gt;&gt;&nbsp;type(tup1)&nbsp;&nbsp; &nbsp;&nbsp;# 加上逗号，类型为元组<br />\r\n&lt;class&nbsp;&#39;tuple&#39;&gt;</p>\r\n\r\n<p>元组与字符串类似，下标索引从 0 开始，可以进行截取，组合等。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2016/04/py-tup-10-26.png\" /></p>\r\n\r\n<hr />\r\n<h2>访问元组</h2>\r\n\r\n<p>元组可以使用下标索引来访问元组中的值，如下实例:</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 tup1 = (&#39;Google&#39;, &#39;Runoob&#39;, 1997, 2000) tup2 = (1, 2, 3, 4, 5, 6, 7 ) print (&quot;tup1[0]: &quot;, tup1[0]) print (&quot;tup2[1:5]: &quot;, tup2[1:5])</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\ntup1[0]:  Google\r\ntup2[1:5]:  (2, 3, 4, 5)</pre>\r\n\r\n<hr />\r\n<h2>修改元组</h2>\r\n\r\n<p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 tup1 = (12, 34.56) tup2 = (&#39;abc&#39;, &#39;xyz&#39;) # 以下修改元组元素操作是非法的。 # tup1[0] = 100 # 创建一个新的元组 tup3 = tup1 + tup2 print (tup3)</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n(12, 34.56, &#39;abc&#39;, &#39;xyz&#39;)</pre>\r\n\r\n<hr />\r\n<h2>删除元组</h2>\r\n\r\n<p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>#!/usr/bin/python3 tup = (&#39;Google&#39;, &#39;Runoob&#39;, 1997, 2000) print (tup) del tup print (&quot;删除后的元组 tup : &quot;) print (tup)</p>\r\n\r\n<p>以上实例元组被删除后，输出变量会有异常信息，输出如下所示：</p>\r\n\r\n<pre>\r\n删除后的元组 tup : \r\nTraceback (most recent call last):\r\n  File &quot;test.py&quot;, line 8, in &lt;module&gt;\r\n    print (tup)\r\nNameError: name &#39;tup&#39; is not defined</pre>\r\n\r\n<hr />\r\n<h2>元组运算符</h2>\r\n\r\n<p>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Python 表达式</th>\r\n			<th>结果</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>len((1, 2, 3))</td>\r\n			<td>3</td>\r\n			<td>计算元素个数</td>\r\n		</tr>\r\n		<tr>\r\n			<td>(1, 2, 3) + (4, 5, 6)</td>\r\n			<td>(1, 2, 3, 4, 5, 6)</td>\r\n			<td>连接</td>\r\n		</tr>\r\n		<tr>\r\n			<td>(&#39;Hi!&#39;,) * 4</td>\r\n			<td>(&#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;)</td>\r\n			<td>复制</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3 in (1, 2, 3)</td>\r\n			<td>True</td>\r\n			<td>元素是否存在</td>\r\n		</tr>\r\n		<tr>\r\n			<td>for x in (1, 2, 3): print (x,)</td>\r\n			<td>1 2 3</td>\r\n			<td>迭代</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<hr />\r\n<h2>元组索引，截取</h2>\r\n\r\n<p>因为元组也是一个序列，所以我们可以访问元组中的指定位置的元素，也可以截取索引中的一段元素，如下所示：</p>\r\n\r\n<p>元组：</p>\r\n\r\n<pre>\r\ntup = (&#39;Google&#39;, &#39;Runoob&#39;, &#39;Taobao&#39;, &#39;Wiki&#39;, &#39;Weibo&#39;,&#39;Weixin&#39;)</pre>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2016/04/py-tup-7.png\" /></p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Python 表达式</th>\r\n			<th>结果</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>tup[1]</td>\r\n			<td>&#39;Runoob&#39;</td>\r\n			<td>读取第二个元素</td>\r\n		</tr>\r\n		<tr>\r\n			<td>tup[-2]</td>\r\n			<td>&#39;Weibo&#39;</td>\r\n			<td>反向读取，读取倒数第二个元素</td>\r\n		</tr>\r\n		<tr>\r\n			<td>tup[1:]</td>\r\n			<td>(&#39;Runoob&#39;, &#39;Taobao&#39;, &#39;Wiki&#39;, &#39;Weibo&#39;, &#39;Weixin&#39;)</td>\r\n			<td>截取元素，从第二个开始后的所有元素。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>tup[1:4]</td>\r\n			<td>(&#39;Runoob&#39;, &#39;Taobao&#39;, &#39;Wiki&#39;)</td>\r\n			<td>截取元素，从第二个开始到第四个元素（索引为 3）。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>运行实例如下：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;tup&nbsp;=&nbsp;(&#39;Google&#39;,&nbsp;&#39;Runoob&#39;,&nbsp;&#39;Taobao&#39;,&nbsp;&#39;Wiki&#39;,&nbsp;&#39;Weibo&#39;,&#39;Weixin&#39;)<br />\r\n&gt;&gt;&gt;&nbsp;tup[1]<br />\r\n&#39;Runoob&#39;<br />\r\n&gt;&gt;&gt;&nbsp;tup[-2]<br />\r\n&#39;Weibo&#39;<br />\r\n&gt;&gt;&gt;&nbsp;tup[1:]<br />\r\n(&#39;Runoob&#39;,&nbsp;&#39;Taobao&#39;,&nbsp;&#39;Wiki&#39;,&nbsp;&#39;Weibo&#39;,&nbsp;&#39;Weixin&#39;)<br />\r\n&gt;&gt;&gt;&nbsp;tup[1:4]<br />\r\n(&#39;Runoob&#39;,&nbsp;&#39;Taobao&#39;,&nbsp;&#39;Wiki&#39;)<br />\r\n&gt;&gt;&gt;</p>\r\n\r\n<hr />\r\n<h2>元组内置函数</h2>\r\n\r\n<p>Python元组包含了以下内置函数</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>序号</th>\r\n			<th>方法及描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>len(tuple)<br />\r\n			计算元组元素个数。</td>\r\n			<td>\r\n			<pre>\r\n&gt;&gt;&gt; tuple1 = (&#39;Google&#39;, &#39;Runoob&#39;, &#39;Taobao&#39;)\r\n&gt;&gt;&gt; len(tuple1)\r\n3\r\n&gt;&gt;&gt; </pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>max(tuple)<br />\r\n			返回元组中元素最大值。</td>\r\n			<td>\r\n			<pre>\r\n&gt;&gt;&gt; tuple2 = (&#39;5&#39;, &#39;4&#39;, &#39;8&#39;)\r\n&gt;&gt;&gt; max(tuple2)\r\n&#39;8&#39;\r\n&gt;&gt;&gt; </pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>min(tuple)<br />\r\n			返回元组中元素最小值。</td>\r\n			<td>\r\n			<pre>\r\n&gt;&gt;&gt; tuple2 = (&#39;5&#39;, &#39;4&#39;, &#39;8&#39;)\r\n&gt;&gt;&gt; min(tuple2)\r\n&#39;4&#39;\r\n&gt;&gt;&gt; </pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td>tuple(iterable)<br />\r\n			将可迭代系列转换为元组。</td>\r\n			<td>\r\n			<pre>\r\n&gt;&gt;&gt; list1= [&#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;, &#39;Baidu&#39;]\r\n&gt;&gt;&gt; tuple1=tuple(list1)\r\n&gt;&gt;&gt; tuple1\r\n(&#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;, &#39;Baidu&#39;)</pre>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>关于元组是不可变的</h3>\r\n\r\n<p>所谓元组的不可变指的是元组所指向的内存中的内容不可变。</p>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;tup&nbsp;=&nbsp;(&#39;r&#39;,&nbsp;&#39;u&#39;,&nbsp;&#39;n&#39;,&nbsp;&#39;o&#39;,&nbsp;&#39;o&#39;,&nbsp;&#39;b&#39;)<br />\r\n&gt;&gt;&gt;&nbsp;tup[0]&nbsp;=&nbsp;&#39;g&#39;&nbsp;&nbsp; &nbsp;&nbsp;# 不支持修改元素<br />\r\nTraceback&nbsp;(most recent call last):<br />\r\n&nbsp; File&nbsp;&quot;&lt;stdin&gt;&quot;,&nbsp;line&nbsp;1,&nbsp;in&nbsp;&lt;module&gt;<br />\r\nTypeError:&nbsp;&#39;tuple&#39;&nbsp;object&nbsp;does&nbsp;not&nbsp;support item assignment<br />\r\n&gt;&gt;&gt;&nbsp;id(tup)&nbsp;&nbsp; &nbsp;&nbsp;# 查看内存地址<br />\r\n4440687904<br />\r\n&gt;&gt;&gt;&nbsp;tup&nbsp;=&nbsp;(1,2,3)<br />\r\n&gt;&gt;&gt;&nbsp;id(tup)<br />\r\n4441088800&nbsp;&nbsp; &nbsp;# 内存地址不一样了</p>\r\n\r\n<p>从以上实例可以看出，重新赋值的元组 tup，绑定到新的对象了，不是修改了原来的对象。</p>\r\n', 3, 0, '2021-12-14 02:53:09.206572', '2021-12-14 03:24:04.525104', 8, 1);
INSERT INTO `tb_article` VALUES (95, 'article/20211214/python3_7Wgf9EG.png', 'Python3 字典', 'Python3 字典', 'Python3 字典', '<h1>Python3&nbsp;字典</h1>\r\n\r\n<p>字典是另一种可变容器模型，且可存储任意类型对象。</p>\r\n\r\n<p>字典的每个键值&nbsp;key=&gt;value&nbsp;对用冒号&nbsp;:&nbsp;分割，每个对之间用逗号(<strong>,</strong>)分割，整个字典包括在花括号&nbsp;{}&nbsp;中 ,格式如下所示：</p>\r\n\r\n<pre>\r\nd = {key1 : value1, key2 : value2, key3 : value3 }</pre>\r\n\r\n<p><strong>注意：</strong>dict&nbsp;作为 Python 的关键字和内置函数，变量名不建议命名为&nbsp;<strong>dict</strong>。</p>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2016/04/py-dict-3.png\" /></p>\r\n\r\n<p>键必须是唯一的，但值则不必。</p>\r\n\r\n<p>值可以取任何数据类型，但键必须是不可变的，如字符串，数字。</p>\r\n\r\n<p>一个简单的字典实例：</p>\r\n\r\n<pre>\r\ntinydict = {&#39;name&#39;: &#39;runoob&#39;, &#39;likes&#39;: 123, &#39;url&#39;: &#39;www.runoob.com&#39;}</pre>\r\n\r\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2016/04/py-dict-2.png\" /></p>\r\n\r\n<p>也可如此创建字典：</p>\r\n\r\n<pre>\r\ntinydict1 = { &#39;abc&#39;: 456 }\r\ntinydict2 = { &#39;abc&#39;: 123, 98.6: 37 }</pre>\r\n\r\n<hr />\r\n<h2>创建空字典</h2>\r\n\r\n<p>使用大括号&nbsp;{ }&nbsp;创建空字典：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p># 使用大括号 {} 来创建空字典<br />\r\nemptyDict&nbsp;=&nbsp;{}<br />\r\n&nbsp;<br />\r\n# 打印字典<br />\r\nprint(emptyDict)<br />\r\n&nbsp;<br />\r\n# 查看字典的数量<br />\r\nprint(&quot;Length:&quot;,&nbsp;len(emptyDict))<br />\r\n&nbsp;<br />\r\n# 查看类型<br />\r\nprint(type(emptyDict))</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n{}\r\nLength: 0\r\n&lt;class &#39;dict&#39;&gt;</pre>\r\n\r\n<p>使用内建函数&nbsp;dict()&nbsp;重建字典：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>emptyDict&nbsp;=&nbsp;dict()<br />\r\n&nbsp;<br />\r\n# 打印字典<br />\r\nprint(emptyDict)<br />\r\n&nbsp;<br />\r\n# 查看字典的数量<br />\r\nprint(&quot;Length:&quot;,len(emptyDict))<br />\r\n&nbsp;<br />\r\n# 查看类型<br />\r\nprint(type(emptyDict))</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\n{}\r\nLength: 0\r\n&lt;class &#39;dict&#39;&gt;</pre>\r\n\r\n<hr />\r\n<h2>访问字典里的值</h2>\r\n\r\n<p>把相应的键放入到方括号中，如下实例:</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python3 tinydict = {&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;} print (&quot;tinydict[&#39;Name&#39;]: &quot;, tinydict[&#39;Name&#39;]) print (&quot;tinydict[&#39;Age&#39;]: &quot;, tinydict[&#39;Age&#39;])</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\ntinydict[&#39;Name&#39;]:  Runoob\r\ntinydict[&#39;Age&#39;]:  7</pre>\r\n\r\n<p>如果用字典里没有的键访问数据，会输出错误如下：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python3 tinydict = {&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;} print (&quot;tinydict[&#39;Alice&#39;]: &quot;, tinydict[&#39;Alice&#39;])</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\nTraceback (most recent call last):\r\n  File &quot;test.py&quot;, line 5, in &lt;module&gt;\r\n    print (&quot;tinydict[&#39;Alice&#39;]: &quot;, tinydict[&#39;Alice&#39;])\r\nKeyError: &#39;Alice&#39;</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>修改字典</h2>\r\n\r\n<p>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对如下实例:</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python3 tinydict = {&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;} tinydict[&#39;Age&#39;] = 8 # 更新 Age tinydict[&#39;School&#39;] = &quot;菜鸟教程&quot; # 添加信息 print (&quot;tinydict[&#39;Age&#39;]: &quot;, tinydict[&#39;Age&#39;]) print (&quot;tinydict[&#39;School&#39;]: &quot;, tinydict[&#39;School&#39;])</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\ntinydict[&#39;Age&#39;]:  8\r\ntinydict[&#39;School&#39;]:  菜鸟教程</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>删除字典元素</h2>\r\n\r\n<p>能删单一的元素也能清空字典，清空只需一项操作。</p>\r\n\r\n<p>显示删除一个字典用del命令，如下实例：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python3 tinydict = {&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;} del tinydict[&#39;Name&#39;] # 删除键 &#39;Name&#39; tinydict.clear() # 清空字典 del tinydict # 删除字典 print (&quot;tinydict[&#39;Age&#39;]: &quot;, tinydict[&#39;Age&#39;]) print (&quot;tinydict[&#39;School&#39;]: &quot;, tinydict[&#39;School&#39;])</p>\r\n\r\n<p>但这会引发一个异常，因为用执行 del 操作后字典不再存在：</p>\r\n\r\n<pre>\r\nTraceback (most recent call last):\r\n  File &quot;/runoob-test/test.py&quot;, line 9, in &lt;module&gt;\r\n    print (&quot;tinydict[&#39;Age&#39;]: &quot;, tinydict[&#39;Age&#39;])\r\nNameError: name &#39;tinydict&#39; is not defined</pre>\r\n\r\n<p><strong>注：</strong>del() 方法后面也会讨论。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>字典键的特性</h3>\r\n\r\n<p>字典值可以是任何的 python 对象，既可以是标准的对象，也可以是用户定义的，但键不行。</p>\r\n\r\n<p>两个重要的点需要记住：</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住，如下实例：</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python3 tinydict = {&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Name&#39;: &#39;小菜鸟&#39;} print (&quot;tinydict[&#39;Name&#39;]: &quot;, tinydict[&#39;Name&#39;])</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\ntinydict[&#39;Name&#39;]:  小菜鸟</pre>\r\n\r\n<p>2）键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行，如下实例：</p>\r\n\r\n<h2>实例</h2>\r\n\r\n<p>#!/usr/bin/python3 tinydict = {[&#39;Name&#39;]: &#39;Runoob&#39;, &#39;Age&#39;: 7} print (&quot;tinydict[&#39;Name&#39;]: &quot;, tinydict[&#39;Name&#39;])</p>\r\n\r\n<p>以上实例输出结果：</p>\r\n\r\n<pre>\r\nTraceback (most recent call last):\r\n  File &quot;test.py&quot;, line 3, in &lt;module&gt;\r\n    tinydict = {[&#39;Name&#39;]: &#39;Runoob&#39;, &#39;Age&#39;: 7}\r\nTypeError: unhashable type: &#39;list&#39;</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2>字典内置函数&amp;方法</h2>\r\n\r\n<p>Python字典包含了以下内置函数：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>序号</th>\r\n			<th>函数及描述</th>\r\n			<th>实例</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>len(dict)<br />\r\n			计算字典元素个数，即键的总数。</td>\r\n			<td>\r\n			<pre>\r\n&gt;&gt;&gt; tinydict = {&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}\r\n&gt;&gt;&gt; len(tinydict)\r\n3</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>str(dict)<br />\r\n			输出字典，可以打印的字符串表示。</td>\r\n			<td>\r\n			<pre>\r\n&gt;&gt;&gt; tinydict = {&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}\r\n&gt;&gt;&gt; str(tinydict)\r\n&quot;{&#39;Name&#39;: &#39;Runoob&#39;, &#39;Class&#39;: &#39;First&#39;, &#39;Age&#39;: 7}&quot;</pre>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>type(variable)<br />\r\n			返回输入的变量类型，如果变量是字典就返回字典类型。</td>\r\n			<td>\r\n			<pre>\r\n&gt;&gt;&gt; tinydict = {&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}\r\n&gt;&gt;&gt; type(tinydict)\r\n&lt;class &#39;dict&#39;&gt;</pre>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>Python字典包含了以下内置方法：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>序号</th>\r\n			<th>函数及描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-att-dictionary-clear.html\">radiansdict.clear()</a><br />\r\n			删除字典内所有元素</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-att-dictionary-copy.html\">radiansdict.copy()</a><br />\r\n			返回一个字典的浅复制</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-att-dictionary-fromkeys.html\">radiansdict.fromkeys()</a><br />\r\n			创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-att-dictionary-get.html\">radiansdict.get(key, default=None)</a><br />\r\n			返回指定键的值，如果键不在字典中返回 default 设置的默认值</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5</td>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-att-dictionary-in.html\">key in dict</a><br />\r\n			如果键在字典dict里返回true，否则返回false</td>\r\n		</tr>\r\n		<tr>\r\n			<td>6</td>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-att-dictionary-items.html\">radiansdict.items()</a><br />\r\n			以列表返回一个视图对象</td>\r\n		</tr>\r\n		<tr>\r\n			<td>7</td>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-att-dictionary-keys.html\">radiansdict.keys()</a><br />\r\n			返回一个视图对象</td>\r\n		</tr>\r\n		<tr>\r\n			<td>8</td>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-att-dictionary-setdefault.html\">radiansdict.setdefault(key, default=None)</a><br />\r\n			和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td>\r\n		</tr>\r\n		<tr>\r\n			<td>9</td>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-att-dictionary-update.html\">radiansdict.update(dict2)</a><br />\r\n			把字典dict2的键/值对更新到dict里</td>\r\n		</tr>\r\n		<tr>\r\n			<td>10</td>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-att-dictionary-values.html\">radiansdict.values()</a><br />\r\n			返回一个视图对象</td>\r\n		</tr>\r\n		<tr>\r\n			<td>11</td>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-att-dictionary-pop.html\">pop(key[,default])</a><br />\r\n			删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>12</td>\r\n			<td><a href=\"https://www.runoob.com/python3/python3-att-dictionary-popitem.html\">popitem()</a><br />\r\n			随机返回并删除字典中的最后一对键和值。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 12, 1, '2021-12-14 02:53:43.116225', '2021-12-21 06:34:31.534312', 8, 1);
INSERT INTO `tb_article` VALUES (96, 'article/20211214/python3_34sheuJ.png', 'Python3 集合', 'Python3 集合', 'Python3 集合', '<h1>Python3 集合</h1>\r\n\r\n<p>集合（set）是一个无序的不重复元素序列。</p>\r\n\r\n<p>可以使用大括号&nbsp;{ }&nbsp;或者&nbsp;set()&nbsp;函数创建集合，注意：创建一个空集合必须用&nbsp;set()&nbsp;而不是&nbsp;{ }，因为&nbsp;{ }&nbsp;是用来创建一个空字典。</p>\r\n\r\n<p>创建格式：</p>\r\n\r\n<pre>\r\nparame = {value01,value02,...}\r\n或者\r\nset(value)</pre>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;basket&nbsp;=&nbsp;{&#39;apple&#39;,&nbsp;&#39;orange&#39;,&nbsp;&#39;apple&#39;,&nbsp;&#39;pear&#39;,&nbsp;&#39;orange&#39;,&nbsp;&#39;banana&#39;}<br />\r\n&gt;&gt;&gt;&nbsp;print(basket)&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 这里演示的是去重功能<br />\r\n{&#39;orange&#39;,&nbsp;&#39;banana&#39;,&nbsp;&#39;pear&#39;,&nbsp;&#39;apple&#39;}<br />\r\n&gt;&gt;&gt;&nbsp;&#39;orange&#39;&nbsp;in&nbsp;basket &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;# 快速判断元素是否在集合内<br />\r\nTrue<br />\r\n&gt;&gt;&gt;&nbsp;&#39;crabgrass&#39;&nbsp;in&nbsp;basket<br />\r\nFalse<br />\r\n<br />\r\n&gt;&gt;&gt;&nbsp;# 下面展示两个集合间的运算.<br />\r\n...<br />\r\n&gt;&gt;&gt;&nbsp;a&nbsp;=&nbsp;set(&#39;abracadabra&#39;)<br />\r\n&gt;&gt;&gt;&nbsp;b&nbsp;=&nbsp;set(&#39;alacazam&#39;)<br />\r\n&gt;&gt;&gt;&nbsp;a &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\n{&#39;a&#39;,&nbsp;&#39;r&#39;,&nbsp;&#39;b&#39;,&nbsp;&#39;c&#39;,&nbsp;&#39;d&#39;}<br />\r\n&gt;&gt;&gt;&nbsp;a - b &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 集合a中包含而集合b中不包含的元素<br />\r\n{&#39;r&#39;,&nbsp;&#39;d&#39;,&nbsp;&#39;b&#39;}<br />\r\n&gt;&gt;&gt;&nbsp;a | b &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 集合a或b中包含的所有元素<br />\r\n{&#39;a&#39;,&nbsp;&#39;c&#39;,&nbsp;&#39;r&#39;,&nbsp;&#39;d&#39;,&nbsp;&#39;b&#39;,&nbsp;&#39;m&#39;,&nbsp;&#39;z&#39;,&nbsp;&#39;l&#39;}<br />\r\n&gt;&gt;&gt;&nbsp;a &amp; b &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 集合a和b中都包含了的元素<br />\r\n{&#39;a&#39;,&nbsp;&#39;c&#39;}<br />\r\n&gt;&gt;&gt;&nbsp;a ^ b &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 不同时包含于a和b的元素<br />\r\n{&#39;r&#39;,&nbsp;&#39;d&#39;,&nbsp;&#39;b&#39;,&nbsp;&#39;m&#39;,&nbsp;&#39;z&#39;,&nbsp;&#39;l&#39;}</p>\r\n\r\n<p>类似列表推导式，同样集合支持集合推导式(Set comprehension):</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;a&nbsp;=&nbsp;{x&nbsp;for&nbsp;x&nbsp;in&nbsp;&#39;abracadabra&#39;&nbsp;if&nbsp;x&nbsp;not&nbsp;in&nbsp;&#39;abc&#39;}<br />\r\n&gt;&gt;&gt;&nbsp;a<br />\r\n{&#39;r&#39;,&nbsp;&#39;d&#39;}</p>\r\n\r\n<hr />\r\n<h2>集合的基本操作</h2>\r\n\r\n<h3>1、添加元素</h3>\r\n\r\n<p><strong>语法格式如下：</strong></p>\r\n\r\n<pre>\r\ns.add( x )</pre>\r\n\r\n<p>将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作。</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;thisset&nbsp;=&nbsp;set((&quot;Google&quot;,&nbsp;&quot;Runoob&quot;,&nbsp;&quot;Taobao&quot;))<br />\r\n&gt;&gt;&gt;&nbsp;thisset.add(&quot;Facebook&quot;)<br />\r\n&gt;&gt;&gt;&nbsp;print(thisset)<br />\r\n{&#39;Taobao&#39;,&nbsp;&#39;Facebook&#39;,&nbsp;&#39;Google&#39;,&nbsp;&#39;Runoob&#39;}</p>\r\n\r\n<p>还有一个方法，也可以添加元素，且参数可以是列表，元组，字典等，语法格式如下：</p>\r\n\r\n<pre>\r\ns.update( x )</pre>\r\n\r\n<p>x 可以有多个，用逗号分开。</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;thisset&nbsp;=&nbsp;set((&quot;Google&quot;,&nbsp;&quot;Runoob&quot;,&nbsp;&quot;Taobao&quot;))<br />\r\n&gt;&gt;&gt;&nbsp;thisset.update({1,3})<br />\r\n&gt;&gt;&gt;&nbsp;print(thisset)<br />\r\n{1,&nbsp;3,&nbsp;&#39;Google&#39;,&nbsp;&#39;Taobao&#39;,&nbsp;&#39;Runoob&#39;}<br />\r\n&gt;&gt;&gt;&nbsp;thisset.update([1,4],[5,6])&nbsp;&nbsp;<br />\r\n&gt;&gt;&gt;&nbsp;print(thisset)<br />\r\n{1,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6,&nbsp;&#39;Google&#39;,&nbsp;&#39;Taobao&#39;,&nbsp;&#39;Runoob&#39;}<br />\r\n&gt;&gt;&gt;</p>\r\n\r\n<h3>2、移除元素</h3>\r\n\r\n<p><strong>语法格式如下：</strong></p>\r\n\r\n<pre>\r\ns.remove( x )</pre>\r\n\r\n<p>将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;thisset&nbsp;=&nbsp;set((&quot;Google&quot;,&nbsp;&quot;Runoob&quot;,&nbsp;&quot;Taobao&quot;))<br />\r\n&gt;&gt;&gt;&nbsp;thisset.remove(&quot;Taobao&quot;)<br />\r\n&gt;&gt;&gt;&nbsp;print(thisset)<br />\r\n{&#39;Google&#39;,&nbsp;&#39;Runoob&#39;}<br />\r\n&gt;&gt;&gt;&nbsp;thisset.remove(&quot;Facebook&quot;)&nbsp;&nbsp;&nbsp;# 不存在会发生错误<br />\r\nTraceback&nbsp;(most recent call last):<br />\r\n&nbsp; File&nbsp;&quot;&lt;stdin&gt;&quot;,&nbsp;line&nbsp;1,&nbsp;in&nbsp;&lt;module&gt;<br />\r\nKeyError:&nbsp;&#39;Facebook&#39;<br />\r\n&gt;&gt;&gt;</p>\r\n\r\n<p>此外还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。格式如下所示：</p>\r\n\r\n<pre>\r\ns.discard( x )</pre>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;thisset&nbsp;=&nbsp;set((&quot;Google&quot;,&nbsp;&quot;Runoob&quot;,&nbsp;&quot;Taobao&quot;))<br />\r\n&gt;&gt;&gt;&nbsp;thisset.discard(&quot;Facebook&quot;)&nbsp;&nbsp;# 不存在不会发生错误<br />\r\n&gt;&gt;&gt;&nbsp;print(thisset)<br />\r\n{&#39;Taobao&#39;,&nbsp;&#39;Google&#39;,&nbsp;&#39;Runoob&#39;}</p>\r\n\r\n<p>我们也可以设置随机删除集合中的一个元素，语法格式如下：</p>\r\n\r\n<pre>\r\ns.pop() </pre>\r\n\r\n<h2>脚本模式实例(Python 3.0+)</h2>\r\n\r\n<p>thisset&nbsp;=&nbsp;set((&quot;Google&quot;,&nbsp;&quot;Runoob&quot;,&nbsp;&quot;Taobao&quot;,&nbsp;&quot;Facebook&quot;))<br />\r\nx&nbsp;=&nbsp;thisset.pop()<br />\r\n<br />\r\nprint(x)</p>\r\n\r\n<p>输出结果：</p>\r\n\r\n<pre>\r\n$ python3 test.py \r\nRunoob</pre>\r\n\r\n<p>多次执行测试结果都不一样。</p>\r\n\r\n<p>set 集合的 pop 方法会对集合进行无序的排列，然后将这个无序排列集合的左面第一个元素进行删除。</p>\r\n\r\n<h3>3、计算集合元素个数</h3>\r\n\r\n<p><strong>语法格式如下：</strong></p>\r\n\r\n<pre>\r\nlen(s)</pre>\r\n\r\n<p>计算集合 s 元素个数。</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;thisset&nbsp;=&nbsp;set((&quot;Google&quot;,&nbsp;&quot;Runoob&quot;,&nbsp;&quot;Taobao&quot;))<br />\r\n&gt;&gt;&gt;&nbsp;len(thisset)<br />\r\n3</p>\r\n\r\n<h3>4、清空集合</h3>\r\n\r\n<p><strong>语法格式如下：</strong></p>\r\n\r\n<pre>\r\ns.clear()</pre>\r\n\r\n<p>清空集合 s。</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;thisset&nbsp;=&nbsp;set((&quot;Google&quot;,&nbsp;&quot;Runoob&quot;,&nbsp;&quot;Taobao&quot;))<br />\r\n&gt;&gt;&gt;&nbsp;thisset.clear()<br />\r\n&gt;&gt;&gt;&nbsp;print(thisset)<br />\r\nset()</p>\r\n\r\n<h3>5、判断元素是否在集合中存在</h3>\r\n\r\n<p><strong>语法格式如下：</strong></p>\r\n\r\n<pre>\r\nx in s</pre>\r\n\r\n<p>判断元素 x 是否在集合 s 中，存在返回 True，不存在返回 False。</p>\r\n\r\n<h2>实例(Python 3.0+)</h2>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;thisset&nbsp;=&nbsp;set((&quot;Google&quot;,&nbsp;&quot;Runoob&quot;,&nbsp;&quot;Taobao&quot;))<br />\r\n&gt;&gt;&gt;&nbsp;&quot;Runoob&quot;&nbsp;in&nbsp;thisset<br />\r\nTrue<br />\r\n&gt;&gt;&gt;&nbsp;&quot;Facebook&quot;&nbsp;in&nbsp;thisset<br />\r\nFalse<br />\r\n&gt;&gt;&gt;</p>\r\n\r\n<h3>集合内置方法完整列表</h3>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>方法</th>\r\n			<th>描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-add.html\" rel=\"noopener noreferrer\" target=\"_blank\">add()</a></td>\r\n			<td>为集合添加元素</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-clear.html\" rel=\"noopener noreferrer\" target=\"_blank\">clear()</a></td>\r\n			<td>移除集合中的所有元素</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-copy.html\" rel=\"noopener noreferrer\" target=\"_blank\">copy()</a></td>\r\n			<td>拷贝一个集合</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-difference.html\" rel=\"noopener noreferrer\" target=\"_blank\">difference()</a></td>\r\n			<td>返回多个集合的差集</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-difference_update.html\" rel=\"noopener noreferrer\" target=\"_blank\">difference_update()</a></td>\r\n			<td>移除集合中的元素，该元素在指定的集合也存在。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-discard.html\" rel=\"noopener noreferrer\" target=\"_blank\">discard()</a></td>\r\n			<td>删除集合中指定的元素</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-intersection.html\" rel=\"noopener noreferrer\" target=\"_blank\">intersection()</a></td>\r\n			<td>返回集合的交集</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-intersection_update.html\" rel=\"noopener noreferrer\" target=\"_blank\">intersection_update()</a></td>\r\n			<td>返回集合的交集。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-isdisjoint.html\" rel=\"noopener noreferrer\" target=\"_blank\">isdisjoint()</a></td>\r\n			<td>判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-issubset.html\" rel=\"noopener noreferrer\" target=\"_blank\">issubset()</a></td>\r\n			<td>判断指定集合是否为该方法参数集合的子集。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-issuperset.html\" rel=\"noopener noreferrer\" target=\"_blank\">issuperset()</a></td>\r\n			<td>判断该方法的参数集合是否为指定集合的子集</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-pop.html\" rel=\"noopener noreferrer\" target=\"_blank\">pop()</a></td>\r\n			<td>随机移除元素</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-remove.html\" rel=\"noopener noreferrer\" target=\"_blank\">remove()</a></td>\r\n			<td>移除指定元素</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-symmetric_difference.html\" rel=\"noopener noreferrer\" target=\"_blank\">symmetric_difference()</a></td>\r\n			<td>返回两个集合中不重复的元素集合。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-symmetric_difference_update.html\" rel=\"noopener noreferrer\" target=\"_blank\">symmetric_difference_update()</a></td>\r\n			<td>移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-union.html\" rel=\"noopener noreferrer\" target=\"_blank\">union()</a></td>\r\n			<td>返回两个集合的并集</td>\r\n		</tr>\r\n		<tr>\r\n			<td><a href=\"https://www.runoob.com/python3/ref-set-update.html\" rel=\"noopener noreferrer\" target=\"_blank\">update()</a></td>\r\n			<td>给集合添加元素</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 49, 15, '2021-12-14 02:54:16.682810', '2021-12-23 04:33:59.421548', 8, 1);
INSERT INTO `tb_article` VALUES (98, 'article/20211214/HF_r91fJUN.png', 'Python3 OS 文件/目录方法', 'Python3 OS 文件/目录方法', 'Python3 OS 文件/目录方法', '<h1>Python3 OS 文件/目录方法</h1>\r\n\r\n<p><strong>os</strong>&nbsp;模块提供了非常丰富的方法用来处理文件和目录。常用的方法如下表所示：</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>序号</th>\r\n			<th>方法及描述</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-access.html\">os.access(path, mode)</a></p>\r\n			<br />\r\n			检验权限模式</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-chdir.html\">os.chdir(path)</a></p>\r\n			<br />\r\n			改变当前工作目录</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-chflags.html\">os.chflags(path, flags)</a></p>\r\n			<br />\r\n			设置路径的标记为数字标记。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-chmod.html\">os.chmod(path, mode)</a></p>\r\n			<br />\r\n			更改权限</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-chown.html\">os.chown(path, uid, gid)</a></p>\r\n			<br />\r\n			更改文件所有者</td>\r\n		</tr>\r\n		<tr>\r\n			<td>6</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-chroot.html\">os.chroot(path)</a></p>\r\n			<br />\r\n			改变当前进程的根目录</td>\r\n		</tr>\r\n		<tr>\r\n			<td>7</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-close.html\">os.close(fd)</a></p>\r\n			<br />\r\n			关闭文件描述符 fd</td>\r\n		</tr>\r\n		<tr>\r\n			<td>8</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-closerange.html\">os.closerange(fd_low, fd_high)</a></p>\r\n			<br />\r\n			关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略</td>\r\n		</tr>\r\n		<tr>\r\n			<td>9</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-dup.html\">os.dup(fd)</a></p>\r\n			<br />\r\n			复制文件描述符 fd</td>\r\n		</tr>\r\n		<tr>\r\n			<td>10</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-dup2.html\">os.dup2(fd, fd2)</a></p>\r\n			<br />\r\n			将一个文件描述符 fd 复制到另一个 fd2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>11</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-fchdir.html\">os.fchdir(fd)</a></p>\r\n			<br />\r\n			通过文件描述符改变当前工作目录</td>\r\n		</tr>\r\n		<tr>\r\n			<td>12</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-fchmod.html\">os.fchmod(fd, mode)</a></p>\r\n			<br />\r\n			改变一个文件的访问权限，该文件由参数fd指定，参数mode是Unix下的文件访问权限。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>13</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-fchown.html\">os.fchown(fd, uid, gid)</a></p>\r\n			<br />\r\n			修改一个文件的所有权，这个函数修改一个文件的用户ID和用户组ID，该文件由文件描述符fd指定。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>14</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-fdatasync.html\">os.fdatasync(fd)</a></p>\r\n			<br />\r\n			强制将文件写入磁盘，该文件由文件描述符fd指定，但是不强制更新文件的状态信息。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>15</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-fdopen.html\">os.fdopen(fd[, mode[, bufsize]])</a></p>\r\n			<br />\r\n			通过文件描述符 fd 创建一个文件对象，并返回这个文件对象</td>\r\n		</tr>\r\n		<tr>\r\n			<td>16</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-fpathconf.html\">os.fpathconf(fd, name)</a></p>\r\n			<br />\r\n			返回一个打开的文件的系统配置信息。name为检索的系统配置的值，它也许是一个定义系统值的字符串，这些名字在很多标准中指定（POSIX.1, Unix 95, Unix 98, 和其它）。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>17</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-fstat.html\">os.fstat(fd)</a></p>\r\n			<br />\r\n			返回文件描述符fd的状态，像stat()。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>18</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-fstatvfs.html\">os.fstatvfs(fd)</a></p>\r\n			<br />\r\n			返回包含文件描述符fd的文件的文件系统的信息，Python 3.3 相等于 statvfs()。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>19</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-fsync.html\">os.fsync(fd)</a></p>\r\n			<br />\r\n			强制将文件描述符为fd的文件写入硬盘。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>20</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-ftruncate.html\">os.ftruncate(fd, length)</a></p>\r\n			<br />\r\n			裁剪文件描述符fd对应的文件, 所以它最大不能超过文件大小。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>21</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-getcwd.html\">os.getcwd()</a></p>\r\n			<br />\r\n			返回当前工作目录</td>\r\n		</tr>\r\n		<tr>\r\n			<td>22</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-getcwdb.html\">os.getcwdb()</a></p>\r\n			<br />\r\n			返回一个当前工作目录的Unicode对象</td>\r\n		</tr>\r\n		<tr>\r\n			<td>23</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-isatty.html\">os.isatty(fd)</a></p>\r\n			<br />\r\n			如果文件描述符fd是打开的，同时与tty(-like)设备相连，则返回true, 否则False。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>24</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-lchflags.html\">os.lchflags(path, flags)</a></p>\r\n			<br />\r\n			设置路径的标记为数字标记，类似 chflags()，但是没有软链接</td>\r\n		</tr>\r\n		<tr>\r\n			<td>25</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-lchmod.html\">os.lchmod(path, mode)</a></p>\r\n			<br />\r\n			修改连接文件权限</td>\r\n		</tr>\r\n		<tr>\r\n			<td>26</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-lchown.html\">os.lchown(path, uid, gid)</a></p>\r\n			<br />\r\n			更改文件所有者，类似 chown，但是不追踪链接。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>27</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-link.html\">os.link(src, dst)</a></p>\r\n			<br />\r\n			创建硬链接，名为参数 dst，指向参数 src</td>\r\n		</tr>\r\n		<tr>\r\n			<td>28</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-listdir.html\">os.listdir(path)</a></p>\r\n			<br />\r\n			返回path指定的文件夹包含的文件或文件夹的名字的列表。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>29</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-lseek.html\">os.lseek(fd, pos, how)</a></p>\r\n			<br />\r\n			设置文件描述符 fd当前位置为pos, how方式修改: SEEK_SET 或者 0 设置从文件开始的计算的pos; SEEK_CUR或者 1 则从当前位置计算; os.SEEK_END或者2则从文件尾部开始. 在unix，Windows中有效</td>\r\n		</tr>\r\n		<tr>\r\n			<td>30</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-lstat.html\">os.lstat(path)</a></p>\r\n			<br />\r\n			像stat(),但是没有软链接</td>\r\n		</tr>\r\n		<tr>\r\n			<td>31</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-major.html\">os.major(device)</a></p>\r\n			<br />\r\n			从原始的设备号中提取设备major号码 (使用stat中的st_dev或者st_rdev field)。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>32</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-makedev.html\">os.makedev(major, minor)</a></p>\r\n			<br />\r\n			以major和minor设备号组成一个原始设备号</td>\r\n		</tr>\r\n		<tr>\r\n			<td>33</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-makedirs.html\">os.makedirs(path[, mode])</a></p>\r\n			<br />\r\n			递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>34</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-minor.html\">os.minor(device)</a></p>\r\n			<br />\r\n			从原始的设备号中提取设备minor号码 (使用stat中的st_dev或者st_rdev field )。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>35</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-mkdir.html\">os.mkdir(path[, mode])</a></p>\r\n			<br />\r\n			以数字mode的mode创建一个名为path的文件夹.默认的 mode 是 0777 (八进制)。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>36</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-mkfifo.html\">os.mkfifo(path[, mode])</a></p>\r\n			<br />\r\n			创建命名管道，mode 为数字，默认为 0666 (八进制)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>37</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-mknod.html\">os.mknod(filename[, mode=0600, device])</a><br />\r\n			创建一个名为filename文件系统节点（文件，设备特别文件或者命名pipe）。</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>38</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-open.html\">os.open(file, flags[, mode])</a></p>\r\n			<br />\r\n			打开一个文件，并且设置需要的打开选项，mode参数是可选的</td>\r\n		</tr>\r\n		<tr>\r\n			<td>39</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-openpty.html\">os.openpty()</a></p>\r\n			<br />\r\n			打开一个新的伪终端对。返回 pty 和 tty的文件描述符。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>40</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-pathconf.html\">os.pathconf(path, name)</a></p>\r\n			<br />\r\n			返回相关文件的系统配置信息。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>41</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-pipe.html\">os.pipe()</a></p>\r\n			<br />\r\n			创建一个管道. 返回一对文件描述符(r, w) 分别为读和写</td>\r\n		</tr>\r\n		<tr>\r\n			<td>42</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-popen.html\">os.popen(command[, mode[, bufsize]])</a></p>\r\n			<br />\r\n			从一个 command 打开一个管道</td>\r\n		</tr>\r\n		<tr>\r\n			<td>43</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-read.html\">os.read(fd, n)</a></p>\r\n			<br />\r\n			从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>44</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-readlink.html\">os.readlink(path)</a></p>\r\n			<br />\r\n			返回软链接所指向的文件</td>\r\n		</tr>\r\n		<tr>\r\n			<td>45</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-remove.html\">os.remove(path)</a></p>\r\n			<br />\r\n			删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>46</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-removedirs.html\">os.removedirs(path)</a></p>\r\n			<br />\r\n			递归删除目录。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>47</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-rename.html\">os.rename(src, dst)</a></p>\r\n			<br />\r\n			重命名文件或目录，从 src 到 dst</td>\r\n		</tr>\r\n		<tr>\r\n			<td>48</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-renames.html\">os.renames(old, new)</a></p>\r\n			<br />\r\n			递归地对目录进行更名，也可以对文件进行更名。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>49</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-rmdir.html\">os.rmdir(path)</a></p>\r\n			<br />\r\n			删除path指定的空目录，如果目录非空，则抛出一个OSError异常。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>50</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-stat.html\">os.stat(path)</a></p>\r\n			<br />\r\n			获取path指定的路径的信息，功能等同于C API中的stat()系统调用。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>51</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-stat_float_times.html\">os.stat_float_times([newvalue])</a><br />\r\n			决定stat_result是否以float对象显示时间戳</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>52</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-statvfs.html\">os.statvfs(path)</a></p>\r\n			<br />\r\n			获取指定路径的文件系统统计信息</td>\r\n		</tr>\r\n		<tr>\r\n			<td>53</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-symlink.html\">os.symlink(src, dst)</a></p>\r\n			<br />\r\n			创建一个软链接</td>\r\n		</tr>\r\n		<tr>\r\n			<td>54</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-tcgetpgrp.html\">os.tcgetpgrp(fd)</a></p>\r\n			<br />\r\n			返回与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组</td>\r\n		</tr>\r\n		<tr>\r\n			<td>55</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-tcsetpgrp.html\">os.tcsetpgrp(fd, pg)</a></p>\r\n			<br />\r\n			设置与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组为pg。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>56</td>\r\n			<td>\r\n			<p>os.tempnam([dir[, prefix]])</p>\r\n			<br />\r\n			<strong>Python3 中已删除。</strong>返回唯一的路径名用于创建临时文件。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>57</td>\r\n			<td>\r\n			<p>os.tmpfile()</p>\r\n			<br />\r\n			<strong>Python3 中已删除。</strong>返回一个打开的模式为(w+b)的文件对象 .这文件对象没有文件夹入口，没有文件描述符，将会自动删除。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>58</td>\r\n			<td>\r\n			<p>os.tmpnam()</p>\r\n			<br />\r\n			<strong>Python3 中已删除。</strong>为创建一个临时文件返回一个唯一的路径</td>\r\n		</tr>\r\n		<tr>\r\n			<td>59</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-ttyname.html\">os.ttyname(fd)</a></p>\r\n			<br />\r\n			返回一个字符串，它表示与文件描述符fd 关联的终端设备。如果fd 没有与终端设备关联，则引发一个异常。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>60</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-unlink.html\">os.unlink(path)</a></p>\r\n			<br />\r\n			删除文件路径</td>\r\n		</tr>\r\n		<tr>\r\n			<td>61</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-utime.html\">os.utime(path, times)</a></p>\r\n			<br />\r\n			返回指定的path文件的访问和修改的时间。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>62</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-walk.html\">os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])</a></p>\r\n			<br />\r\n			输出在文件夹中的文件名通过在树中游走，向上或者向下。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>63</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-write.html\">os.write(fd, str)</a></p>\r\n			<br />\r\n			写入字符串到文件描述符 fd中. 返回实际写入的字符串长度</td>\r\n		</tr>\r\n		<tr>\r\n			<td>64</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-path.html\" rel=\"noopener noreferrer\" target=\"_blank\">os.path 模块</a></p>\r\n			<br />\r\n			获取文件的属性信息。</td>\r\n		</tr>\r\n		<tr>\r\n			<td>65</td>\r\n			<td>\r\n			<p><a href=\"https://www.runoob.com/python3/python3-os-pardir.html\" rel=\"noopener noreferrer\" target=\"_blank\">os.pardir()</a></p>\r\n			<br />\r\n			获取当前目录的父目录，以字符串形式显示目录名。</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 27, 1, '2021-12-14 06:26:09.320548', '2021-12-21 08:37:24.505665', 11, 1);
INSERT INTO `tb_article` VALUES (99, 'article/20211221/HF.png', '我的博客系统', '我的博客系统', '我的博客系统', '<p>我的博客系统&nbsp; 2021.12.21</p>\r\n', 24, 0, '2021-12-21 06:19:01.836295', '2021-12-21 08:46:24.877468', 12, 1);
INSERT INTO `tb_article` VALUES (100, 'article/20211221/SHF.png', '我的博客', '我的博客', '我的博客', '<p>我的博客</p>\r\n\r\n<p>&nbsp;</p>\r\n', 9, 0, '2021-12-21 07:36:10.537672', '2021-12-23 04:35:38.949602', 22, 1);
INSERT INTO `tb_article` VALUES (103, 'article/20211221/HF_3rd2Ya9.png', '如何学习C', '如何学习C', '如何学习C', '<p>如何学习C是的隔热隔热</p>\r\n', 4, 1, '2021-12-21 09:03:34.538610', '2021-12-21 09:04:28.774983', 24, 3);
INSERT INTO `tb_article` VALUES (104, 'article/20211223/SHF.png', 'python', '3445', 'ewre', '<p>rewrew</p>\r\n', 1, 0, '2021-12-23 04:34:35.504113', '2021-12-23 04:34:38.800630', 25, 1);

-- ----------------------------
-- Table structure for tb_category
-- ----------------------------
DROP TABLE IF EXISTS `tb_category`;
CREATE TABLE `tb_category`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `created` datetime(6) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tb_category
-- ----------------------------
INSERT INTO `tb_category` VALUES (1, 'Python', '2021-12-13 19:49:00.000000');
INSERT INTO `tb_category` VALUES (3, 'C', '2021-12-13 19:49:00.000000');
INSERT INTO `tb_category` VALUES (5, 'VUE', '2021-12-13 19:49:00.000000');
INSERT INTO `tb_category` VALUES (6, 'JAVA', '2021-12-13 19:49:36.000000');
INSERT INTO `tb_category` VALUES (7, 'JAVASCRIPT', '2021-12-13 19:49:37.000000');

-- ----------------------------
-- Table structure for tb_comment
-- ----------------------------
DROP TABLE IF EXISTS `tb_comment`;
CREATE TABLE `tb_comment`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `created` datetime(6) NOT NULL,
  `article_id` bigint(20) NULL DEFAULT NULL,
  `user_id` bigint(20) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `tb_comment_article_id_d3d5d1ea_fk_tb_article_id`(`article_id`) USING BTREE,
  INDEX `tb_comment_user_id_905a9388_fk_tb_users_id`(`user_id`) USING BTREE,
  CONSTRAINT `tb_comment_article_id_d3d5d1ea_fk_tb_article_id` FOREIGN KEY (`article_id`) REFERENCES `tb_article` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `tb_comment_user_id_905a9388_fk_tb_users_id` FOREIGN KEY (`user_id`) REFERENCES `tb_users` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 4967 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tb_comment
-- ----------------------------
INSERT INTO `tb_comment` VALUES (1, '<p>34235</p>\r\n', '2021-12-13 11:54:11.880403', 2, 8);
INSERT INTO `tb_comment` VALUES (2, '<p>PYTHON&nbsp; YYDS</p>\r\n', '2021-12-13 11:55:29.083313', 21, 8);
INSERT INTO `tb_comment` VALUES (3, '<p>34235</p>\r\n', '2021-12-13 11:54:11.880403', 2, 8);
INSERT INTO `tb_comment` VALUES (4, '<p>PYTHON&nbsp; YYDS</p>\r\n', '2021-12-13 11:55:29.083313', 21, 8);
INSERT INTO `tb_comment` VALUES (6, '<p>34235</p>\r\n', '2021-12-13 11:54:11.880403', 2, 8);
INSERT INTO `tb_comment` VALUES (7, '<p>PYTHON&nbsp; YYDS</p>\r\n', '2021-12-13 11:55:29.083313', 21, 8);
INSERT INTO `tb_comment` VALUES (8, '<p>34235</p>\r\n', '2021-12-13 11:54:11.880403', 2, 8);
INSERT INTO `tb_comment` VALUES (9, '<p>PYTHON&nbsp; YYDS</p>\r\n', '2021-12-13 11:55:29.083313', 21, 8);
INSERT INTO `tb_comment` VALUES (13, '<p>34235</p>\r\n', '2021-12-13 11:54:11.880403', 2, 8);
INSERT INTO `tb_comment` VALUES (14, '<p>PYTHON&nbsp; YYDS</p>\r\n', '2021-12-13 11:55:29.083313', 21, 8);
INSERT INTO `tb_comment` VALUES (15, '<p>34235</p>\r\n', '2021-12-13 11:54:11.880403', 2, 8);
INSERT INTO `tb_comment` VALUES (16, '<p>PYTHON&nbsp; YYDS</p>\r\n', '2021-12-13 11:55:29.083313', 21, 8);
INSERT INTO `tb_comment` VALUES (17, '<p>34235</p>\r\n', '2021-12-13 11:54:11.880403', 2, 8);
INSERT INTO `tb_comment` VALUES (4930, '<p>PYTHON&nbsp; YYDS</p>\r\n', '2021-12-13 11:55:29.083313', 21, 8);
INSERT INTO `tb_comment` VALUES (4931, '<p>34235</p>\r\n', '2021-12-13 11:54:11.880403', 2, 8);
INSERT INTO `tb_comment` VALUES (4932, '<p>PYTHON&nbsp; YYDS</p>\r\n', '2021-12-13 11:55:29.083313', 21, 8);
INSERT INTO `tb_comment` VALUES (4933, '<p>34235</p>\r\n', '2021-12-13 11:54:11.880403', 2, 8);
INSERT INTO `tb_comment` VALUES (4934, '<p>PYTHON&nbsp; YYDS</p>\r\n', '2021-12-13 11:55:29.083313', 21, 8);
INSERT INTO `tb_comment` VALUES (4935, '<p>34235</p>\r\n', '2021-12-13 11:54:11.880403', 2, 8);
INSERT INTO `tb_comment` VALUES (4936, '<p>PYTHON&nbsp; YYDS</p>\r\n', '2021-12-13 11:55:29.083313', 21, 8);
INSERT INTO `tb_comment` VALUES (4937, '<p>34235</p>\r\n', '2021-12-13 11:54:11.880403', 2, 8);
INSERT INTO `tb_comment` VALUES (4938, '<p>PYTHON&nbsp; YYDS</p>\r\n', '2021-12-13 11:55:29.083313', 21, 8);
INSERT INTO `tb_comment` VALUES (4939, '<p>34235</p>\r\n', '2021-12-13 11:54:11.880403', 2, 8);
INSERT INTO `tb_comment` VALUES (4940, '<p>PYTHON&nbsp; YYDS</p>\r\n', '2021-12-13 11:55:29.083313', 21, 8);
INSERT INTO `tb_comment` VALUES (4941, '<p>34235</p>\r\n', '2021-12-13 11:54:11.880403', 2, 8);
INSERT INTO `tb_comment` VALUES (4942, '<p>3243</p>\r\n', '2021-12-14 00:59:59.253916', 21, 5);
INSERT INTO `tb_comment` VALUES (4943, '<p>而厄尔</p>\r\n', '2021-12-14 01:00:18.801850', 21, 5);
INSERT INTO `tb_comment` VALUES (4944, '<p>python yyds</p>\r\n', '2021-12-14 01:02:51.382141', 22, 5);
INSERT INTO `tb_comment` VALUES (4945, '<p><u><em><strong><img alt=\"laugh\" height=\"23\" src=\"http://127.0.0.1:8000/static/ckeditor/ckeditor/plugins/smiley/images/teeth_smile.png\" title=\"laugh\" width=\"23\" />python yyds</strong></em></u></p>\r\n', '2021-12-14 01:03:15.119522', 22, 5);
INSERT INTO `tb_comment` VALUES (4946, '<p>python yyds</p>\r\n', '2021-12-14 02:54:32.747333', 96, 8);
INSERT INTO `tb_comment` VALUES (4947, '<p>vue yyds</p>\r\n', '2021-12-14 04:38:35.531496', 56, 1);
INSERT INTO `tb_comment` VALUES (4948, '<p>个人个人</p>\r\n', '2021-12-14 06:50:35.462437', 98, 11);
INSERT INTO `tb_comment` VALUES (4949, '<p><strong>我也要发言</strong></p>\r\n', '2021-12-21 06:10:34.747704', 95, 11);
INSERT INTO `tb_comment` VALUES (4950, '<p>1</p>\r\n', '2021-12-21 06:20:29.923568', 96, 12);
INSERT INTO `tb_comment` VALUES (4951, '<p>2</p>\r\n', '2021-12-21 06:20:33.204703', 96, 12);
INSERT INTO `tb_comment` VALUES (4952, '<p>3</p>\r\n', '2021-12-21 06:20:37.545124', 96, 12);
INSERT INTO `tb_comment` VALUES (4953, '<p>4</p>\r\n', '2021-12-21 06:20:43.367879', 96, 12);
INSERT INTO `tb_comment` VALUES (4954, '<p>5</p>\r\n', '2021-12-21 06:20:49.331661', 96, 12);
INSERT INTO `tb_comment` VALUES (4955, '<p>python yyds</p>\r\n', '2021-12-21 06:20:58.523361', 96, 12);
INSERT INTO `tb_comment` VALUES (4956, '<p>python yyds</p>\r\n', '2021-12-21 06:21:03.178669', 96, 12);
INSERT INTO `tb_comment` VALUES (4957, '<p>python yyds</p>\r\n', '2021-12-21 06:21:07.271399', 96, 12);
INSERT INTO `tb_comment` VALUES (4958, '<p>python yyds</p>\r\n', '2021-12-21 06:21:13.704565', 96, 12);
INSERT INTO `tb_comment` VALUES (4959, '<p>python yyds</p>\r\n', '2021-12-21 06:21:18.419892', 96, 12);
INSERT INTO `tb_comment` VALUES (4960, '<p>python yyds</p>\r\n', '2021-12-21 06:21:23.735553', 96, 12);
INSERT INTO `tb_comment` VALUES (4961, '<p>2112</p>\r\n', '2021-12-21 07:36:47.598444', NULL, 22);
INSERT INTO `tb_comment` VALUES (4962, '<p><a href=\"https://www.runoob.com/python3/ref-set-update.html\" rel=\"noopener noreferrer\" target=\"_blank\">update()</a>给集合添加元素</p>\r\n', '2021-12-21 08:41:50.518337', 96, 23);
INSERT INTO `tb_comment` VALUES (4963, '<p>金币shf7777777</p>\r\n', '2021-12-21 08:46:15.026415', NULL, 23);
INSERT INTO `tb_comment` VALUES (4964, '<p>到此一游</p>\r\n', '2021-12-21 09:01:52.684943', 96, 24);
INSERT INTO `tb_comment` VALUES (4965, '<p>到此一游</p>\r\n', '2021-12-21 09:04:08.926167', 103, 24);
INSERT INTO `tb_comment` VALUES (4966, '<p>fdg</p>\r\n', '2021-12-23 04:33:51.019942', 96, 25);

-- ----------------------------
-- Table structure for tb_users
-- ----------------------------
DROP TABLE IF EXISTS `tb_users`;
CREATE TABLE `tb_users`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `password` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `last_login` datetime(6) NULL DEFAULT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `username` varchar(150) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `first_name` varchar(150) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `last_name` varchar(150) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `email` varchar(254) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `date_joined` datetime(6) NOT NULL,
  `mobile` varchar(11) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `avatar` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `user_desc` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `username`(`username`) USING BTREE,
  UNIQUE INDEX `mobile`(`mobile`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 26 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tb_users
-- ----------------------------
INSERT INTO `tb_users` VALUES (1, 'pbkdf2_sha256$320000$Vkos7n6wYdbndsra2Cij6m$sYbZpFcocd0Yi46nkrG3/jPgPazxgLq8fe/eknrH5hU=', '2021-12-14 05:34:53.666319', 0, 'hongfan', '', '', '', 0, 1, '2021-12-12 12:00:33.925385', '13476865038', 'avatar/20211214/HF.png', 'shuhongfan');
INSERT INTO `tb_users` VALUES (5, 'pbkdf2_sha256$320000$sBLPzUi6hvM1bruWHr0SIg$HZxIZdjQyknJCUZYYsKwjVqAHxWYfM8oWTIBABc7Afo=', '2021-12-14 00:54:45.989421', 0, 'user2', '', '', '', 0, 1, '2021-12-12 12:31:31.463932', '13437154865', 'avatar/20211214/HF.png', '');
INSERT INTO `tb_users` VALUES (6, 'pbkdf2_sha256$320000$geiGy8xwyvbcxscJr94bs4$KHGCjIECSHUC9j7dMUx9CoYNhVdfDsDZRpFvgH8mr4A=', '2021-12-12 12:37:47.185702', 0, 'user3', '', '', '', 0, 1, '2021-12-12 12:37:46.808526', '13437777777', 'avatar/20211214/HF.png', '');
INSERT INTO `tb_users` VALUES (8, 'pbkdf2_sha256$320000$NAZsUyQvnsi2lNwIp2gKpb$6K6nLRTI1Pb7xUN+h8ifR1Ji64QhKVaJNpKZcnXX1Aw=', '2021-12-14 06:55:27.772206', 1, 'shuhongfan', '', '', 'shuhongfan@live.com', 1, 1, '2021-12-13 04:43:14.756652', '88888888', '', '');
INSERT INTO `tb_users` VALUES (11, 'pbkdf2_sha256$320000$zx0s3geu8HDEcGW3cb1vE1$0eLFUuZfTbHKt61Wpg1WQ6gLCfQgNn8+RXWkQ+u8rc4=', '2021-12-14 07:02:21.522384', 0, '13439999999', '', '', '', 0, 1, '2021-12-14 05:44:28.196778', '13439999999', 'avatar/20211216/HF.png', 'i是13439999999');
INSERT INTO `tb_users` VALUES (12, 'pbkdf2_sha256$320000$Ljrmih1cyzXClYhMyk5KXi$lKRyKAH1Z2GZPqpzSLdWwVXT/6GvLI99AGrUCVxyHLk=', '2021-12-21 06:43:43.294815', 0, 'haha', '', '', '', 0, 1, '2021-12-21 06:17:24.739158', '13431111111', 'avatar/20211221/HF.png', 'hello world!!!');
INSERT INTO `tb_users` VALUES (13, 'pbkdf2_sha256$320000$0GHwys28fNWvZXh4DViZge$0zCSfMc0z/MaH5dFiDpsTZvPyhvvgBeF+vpmKeSDC3o=', '2021-12-21 07:05:16.804776', 0, '13432222222', '', '', '', 0, 1, '2021-12-21 07:05:15.864764', '13432222222', '', '');
INSERT INTO `tb_users` VALUES (14, 'pbkdf2_sha256$320000$WUCLMtKB1hKub4JqasErWV$XXv63gXFeNL1YLti99IGtvBrGRH+WNZTOpqGXGO3YrY=', '2021-12-21 07:06:49.926937', 0, '13323333333', '', '', '', 0, 1, '2021-12-21 07:06:49.659311', '13323333333', '', '');
INSERT INTO `tb_users` VALUES (15, 'pbkdf2_sha256$320000$xnLxjtCek7q7KvlvMbJ1Ib$ZQlPK9aJ2fbpd1lNzR8jpwan8saEIElc1h8KilkNGp0=', '2021-12-21 07:16:20.131865', 0, '13432222333', '', '', '', 0, 1, '2021-12-21 07:16:19.907865', '13432222333', '', '');
INSERT INTO `tb_users` VALUES (16, 'pbkdf2_sha256$320000$tW5iyNpCV9UvRmjdBPUIve$nR/tu2sr/vG8Jc7lFWH3fQEzjpqfC44u9xQKpAIw6JY=', '2021-12-21 07:16:20.141868', 0, '13432222223', '', '', '', 0, 1, '2021-12-21 07:16:19.906868', '13432222223', '', '');
INSERT INTO `tb_users` VALUES (17, 'pbkdf2_sha256$320000$4euzXcpRD3C8GLQk0ZeGiy$2yBUaNVYkMnDVXJKYyEObMDRDJcwWiAmGynMEqCF0RI=', '2021-12-21 07:17:28.281198', 0, '13432222224', '', '', '', 0, 1, '2021-12-21 07:17:28.043569', '13432222224', '', '');
INSERT INTO `tb_users` VALUES (18, 'pbkdf2_sha256$320000$SAZ5wBs6NPv5QmeWv2K9n4$JUTXTEXt1iwKRMRoEceCgCSteeuIK3z3Fm438N+Mp1A=', '2021-12-21 07:18:34.750974', 0, '13432222225', '', '', '', 0, 1, '2021-12-21 07:18:34.452703', '13432222225', '', '');
INSERT INTO `tb_users` VALUES (20, 'pbkdf2_sha256$320000$BzkzJC2YeH5Cz9a5lM9iNB$C030A25yBl/8lP4BP8wWc8O4GIRkkiPEu1o6Qg9GNO0=', '2021-12-21 07:29:05.476858', 0, '13432222228', '', '', '', 0, 1, '2021-12-21 07:29:05.112892', '13432222228', '', '');
INSERT INTO `tb_users` VALUES (21, 'pbkdf2_sha256$320000$eNU17RGhR2RmWQqeDG9POp$KIlbE8VnAEhYyQo3mEgR3THofKev8RcPTaUZW2TijPo=', '2021-12-21 07:33:06.363634', 0, '哇哈哈', '', '', '', 0, 1, '2021-12-21 07:33:06.118187', '13777777779', 'avatar/20211221/SHF.png', 'fdsfdsfds');
INSERT INTO `tb_users` VALUES (22, 'pbkdf2_sha256$320000$J27UArJeunotQtycro8y9u$u6rhERt+9/KUo0CjUS7/uWt+E8BoIDgl27wYIYIfb18=', '2021-12-21 08:32:08.551407', 0, 'shf555555', '', '', '', 0, 1, '2021-12-21 07:35:04.638708', '13475555555', 'avatar/20211221/SHF_i8VoTq0.png', 'shf555555 hello!');
INSERT INTO `tb_users` VALUES (23, 'pbkdf2_sha256$320000$4qFUEbdr5HDSNQj6jpOMRL$ivZGGmnYVlZXlKt55QGysmU7KvKhQaOIi0IcJfgRqAo=', '2021-12-21 08:40:11.680513', 0, 'shf7777777', '', '', '', 0, 1, '2021-12-21 08:40:11.405503', '13467777777', 'avatar/20211221/HF_WoY4d1X.png', 'i am shf7777777');
INSERT INTO `tb_users` VALUES (24, 'pbkdf2_sha256$320000$6IfMpPe3W4yQwy8NGWGeOW$cqvNmOEAJldYWUBrkmpYbFgZMwEyqnha5cKvsvK/pXQ=', '2021-12-21 09:02:42.200150', 0, 'shf13467788777s', '', '', '', 0, 1, '2021-12-21 09:00:32.151562', '13467788777', 'avatar/20211221/SHF_mJ01UJY.png', '课表');
INSERT INTO `tb_users` VALUES (25, 'pbkdf2_sha256$320000$0QUvwZGBsfB6MtHYOoXXNF$c0775lCmnkLQpnrwMvxF/OkUmZkv7GZABluZdEwTuEM=', '2021-12-23 04:32:22.232812', 0, 'ewww', '', '', '', 0, 1, '2021-12-23 04:32:21.957259', '13468877777', 'avatar/20211223/SHF.png', 'fgdfgd');

-- ----------------------------
-- Table structure for tb_users_groups
-- ----------------------------
DROP TABLE IF EXISTS `tb_users_groups`;
CREATE TABLE `tb_users_groups`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) NOT NULL,
  `group_id` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `tb_users_groups_user_id_group_id_5a177a84_uniq`(`user_id`, `group_id`) USING BTREE,
  INDEX `tb_users_groups_group_id_04d64563_fk_auth_group_id`(`group_id`) USING BTREE,
  CONSTRAINT `tb_users_groups_group_id_04d64563_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `tb_users_groups_user_id_5f9e3ed0_fk_tb_users_id` FOREIGN KEY (`user_id`) REFERENCES `tb_users` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tb_users_groups
-- ----------------------------

-- ----------------------------
-- Table structure for tb_users_user_permissions
-- ----------------------------
DROP TABLE IF EXISTS `tb_users_user_permissions`;
CREATE TABLE `tb_users_user_permissions`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `tb_users_user_permissions_user_id_permission_id_064c2ef6_uniq`(`user_id`, `permission_id`) USING BTREE,
  INDEX `tb_users_user_permis_permission_id_b9b3ac94_fk_auth_perm`(`permission_id`) USING BTREE,
  CONSTRAINT `tb_users_user_permis_permission_id_b9b3ac94_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `tb_users_user_permissions_user_id_2726c819_fk_tb_users_id` FOREIGN KEY (`user_id`) REFERENCES `tb_users` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tb_users_user_permissions
-- ----------------------------

SET FOREIGN_KEY_CHECKS = 1;
